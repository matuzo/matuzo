[{"title":"Smashing Conf Freiburg 2016 - Notizen Tag 2","slug":"smashing-conf-freiburg-2016-notizen-tag-2","teaser":"My notes from the second day at Smashing Conf 2016 in Freiburg.","date":"2016-09-13","year":"2016","body":"## A Smashing Case Study\n\n[@SaraSoueidan][1]\n\n### SVG vs. PNG\n\nIf SVGs are complex they become pretty big. Sometimes it makes sense to use a PNG, because it may be smaller than the SVG. You've got to compare.\n\nYou don't have to choose just one embedding technique, you may, but you don't have to. Choose whatever makes sense in the certain use case.\n\n### Responsive Typography\n\n[Responsive Typography CodePen][2]  \n[Article: Truly Fluid Typography With vh And vw Units][3]\n\n### CSS Underlines\n\n[CSS Underlines Suck][4]  \n[currentColor][5]  \n[Nested Links][6]\n\n### Multiline padded text\n\n[box-decoration-break][7]  \n[CSS box-decoration-break caniuse][8]\n\n### a11y\n\n> a11y is not an enhancement, it's a requirement\n\n    <svg aria-labelledby=\"title\">\n        <title>Back to top</title>\n    </svg>\n    \n\nUseful for dynamically added content:\n\n    aria-live=\"\"\n    \n\n[ARIA Live-Regionen][9]\n\n<!--more-->\n\n## Designing Systems: Theory, Practice, and the Unfortunate In-between - Paul Lloyd\n\n[@paulrobertlloyd][10]\n\n[Fractal ‚Äì Build. Document. Integrate.][11]  \n[Book: 101 Things I Learned in Architecture School ][12]\n\n## You can sketch. (You might just not know it yet.) - Eva-Lotta Lamm\n\n[@evalottchen][13]\n\n<https://www.instagram.com/evalottchen/>\n\n**5 steps to change your notetaking**\n\n1.  Write in  \n    CHUNKS  \n    and not in  \n    LINES\n    \n    short lines - 2-4 words per line  \n    one thought per chunk  \n    leave some space\n\n2.  choose the most **IMPORTANT** word and make it **BIG**\n\n3.  add visual hierachy (size, style (uppercase, lowercase, blockletter), contrast, color, underline & frames)\n4.  add structure  \n    connect (lines and arrow)  \n    sperate chunks with dividers  \n    group chunks with containers\n5.  Add visual hooks  \n    one icon per chunk  \n    simple images and basic shapes  \n    guide eye - make page scanable\n\nTipp: Develop consistency  \nTipp: Capture first, structure later\n\n## Deconstructing Performance - Denys Mishunov\n\n[@mishunov][14]\n\n<http://anrgren.net>\n\n> For users to notice, you have to reduce pageloadtime at least by 20%\n\n[Resource Hints][15]\n\n## Crafting for #worlddomination - Polle de Maagt\n\n[@polledemaagt][16]\n\n[srprs.me ‚Äì You‚Äôll go wherever you‚Äôre meant to go][17]\n\n## Innovative SVG Animations - Sarah Drasner\n\n[@sarah_edo][18]\n\n[Sarah Drasner Codepen][19]  \n[Workshop: Advanced SVG Animations CodePen][20]  \n[Sarah Drasner Favorite SVG Animations][21]\n\n### Optimization\n\n<https://jakearchibald.github.io/svgomg/>  \n<https://github.com/svg/svgo>  \n<https://github.com/svg/svgo-gui>  \n<https://petercollingridge.appspot.com/svg-editor>\n\n### Recommended Tools\n\nCSS for simple interactions.  \nMore than 3 sequences:  \nGSAP ([Greensock][22])  \n[react-motion][23]  \n[Snap.svg - The JavaScript SVG library for the modern web][24]\n\n<http://mojs.io/>\n\n[JS-stroll ‚Äì Rewriting code from other languages or other technologies into Vanilla JS and SVG for fun and practice. ][25]\n\n## On Icons - Oliver Reichenstein\n\n[@iA][26]\n\n> As few icons as possible but not less\n\n [1]: https://twitter.com/sarasoueidan\n [2]: https://codepen.io/MadeByMike/pen/YPJJYv\n [3]: https://www.smashingmagazine.com/2016/05/fluid-typography/\n [4]: http://benjam.info/blog/posts/2015-01-31-css-underline/\n [5]: https://css-tricks.com/currentcolor/\n [6]: http://kizu.ru/en/fun/nested-links/\n [7]: https://developer.mozilla.org/de/docs/Web/CSS/box-decoration-break\n [8]: http://caniuse.com/#feat=css-boxdecorationbreak\n [9]: https://developer.mozilla.org/de/docs/Web/Barrierefreiheit/ARIA/ARIA_Live_Regionen\n [10]: https://twitter.com/paulrobertlloyd\n [11]: http://fractal.build/\n [12]: https://www.amazon.de/101-Things-Learned-Architecture-School/dp/0262062666\n [13]: https://twitter.com/evalottchen\n [14]: https://twitter.com/mishunov\n [15]: https://pbs.twimg.com/media/ClF6LgrUkAAx_Uz.jpg:large\n [16]: https://twitter.com/polledemaagt\n [17]: https://srprs.me/\n [18]: https://twitter.com/sarah_edo\n [19]: http://codepen.io/sdras/#\n [20]: https://codepen.io/collection/XvBQJQ/#\n [21]: https://codepen.io/collection/XvBrJr/#\n [22]: https://greensock.com/\n [23]: https://github.com/chenglou/react-motion\n [24]: http://snapsvg.io/\n [25]: https://github.com/sdras/JS-stroll\n [26]: https://twitter.com/iA"},{"title":"Smashing Conf Freiburg 2016 - Notizen Tag 1","slug":"smashing-conf-freiburg-2016-notizen-tag-1","teaser":"My notes from the first day at Smashing Conf 2016 in Freiburg.","date":"2016-09-13","year":"2016","body":"## Vague, But Exciting - Dave Rupert\n\n[@davatron5000][1]\n\n[Book: Sprint ‚Äì How to Solve Big Problems and Test New Ideas in Just Five Days][2]\n\n[Webflow][3] - Design, prototype, and launch dynamic, responsive websites. All in your browser, without writing code.\n\n<!--more-->\n\n## Practical Blend Modes - Una Kravets\n\n[@una][4]\n\n[#arttheweb ][5] - A collection of articles, talks, and web experiments by Una Kravets based around designing in the browser.\n\n[CSS3 Image Filters on Hover ][6]\n\n[OS X Yosemite Style UI][7]\n\n[CSSGram][8] - A tiny (<1kb gzipped!) library for recreating Instagram filters with CSS filters and blend modes.\n\n[CSSCO][9] - Photographic filters made with CSS, inspired by VSCO and CSSgram\n\n[SVG Color Filter Playground][10]\n\n## Lessons Learned Building An Interactive Sheet Music Engine - Adrian Holovaty\n\n[@adrianholovaty][11]\n\n[Soundslice][12] - The Internet‚Äôs finest music learning experience\n\n[Google Closure Compiler][13]\n\n## The Pragmatist‚Äôs Guide to Service Workers - Lyza D. Gardner\n\n[@lyzadanger][14]\n\n[Pragmatist's Guide to Service Worker][15]\n\nCheck if a page is being requested\n\n    if(request.mode === 'navigate') { }\n    \n\nCross browser:\n\n    if (request.mode === 'navigate' || (request.method === 'GET' && request.headers.get('accept').includes('text/html'))) { }\n    \n\n‚ÄûThe claim() method of the of the Clients interface allows an active Service Worker to set itself as the active worker for a client page when the worker and the page are in the same scope.‚Äú\n\n    self.clients.claim\n    \n\n<https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim>\n\n## Designing The Conversation - Aaron Gustafson\n\n[@aarongustafson][16]\n\n    <abbr aria-label=\"British Columbia\">BC</abbr>\n    <abbr title=\"British Columbia\">BC</abbr>\n    \n\n`aria-label` is better than `title` for screen readers, because most screen readers ignore `title`.\n\nMisc a11y stuff\n\n    <a rel=\"bookmark\"></a>\n    \n    <a hreflang=\"es\"></a>\n    \n    <a href=\"video.mp4\" type=\"video/mp4\"></a>\n    \n\n## üéâüê±‚ú®or: How I didn‚Äôt fix emoji in Chrome - Monica Dinculescu\n\n[@notwaldorf][17]\n\n[Emoji translate][18]\n\n [1]: https://twitter.com/davatron5000\n [2]: https://www.amazon.de/Sprint-Solve-Problems-Test-Ideas/dp/150112174X\n [3]: https://webflow.com/\n [4]: https://twitter.com/una\n [5]: http://arttheweb.com/\n [6]: https://codepen.io/gomezisdan/pen/bEWdma\n [7]: https://codepen.io/znak/pen/ntsdy\n [8]: http://una.im/CSSgram/\n [9]: http://www.cssco.co/\n [10]: http://kazzkiq.github.io/svg-color-filter/\n [11]: https://twitter.com/adrianholovaty\n [12]: https://www.soundslice.com/\n [13]: https://developers.google.com/closure/compiler/\n [14]: https://twitter.com/lyzadanger\n [15]: https://github.com/lyzadanger/pragmatist-service-worker\n [16]: https://twitter.com/aarongustafson\n [17]: https://twitter.com/notwaldorf\n [18]: http://meowni.ca/emoji-translate/"},{"title":"Service Worker ohne HTTPS auf einem Virtual Host in Chrome","slug":"service-worker-ohne-https-auf-einem-virtual-host-in-chrome","teaser":"Es ist so weit, ich mache zum ersten Mal ein Projekt mit [Service Worker][1] Offline verf√ºgbar. Sehr weit bin ich noch nicht, weil es gleich zu Anfang eine H√ºrde zu bew√§ltigen gab.\n\n [1]: https://remysharp.com/2016/03/22/the-copy--paste-guide-to-your-first-service-worker","date":"2016-08-19","year":"2016","body":"Um Service Worker verwenden zu k√∂nnen, ben√∂tigt man eine verschl√ºsselte Verbindung. Lokal ist das grunds√§tzlich kein Problem, wenn die Site √ºber `localhost` oder `127.0.0.1` angesteuert wird, weil diese Ausnahmen darstellen ([siehe hier f√ºr weitere Ausnahmen][2]). In meinem Fall haut das aber nicht hin, weil ich mit [Virtual Hosts][3] arbeite.\n\n### Die L√∂sung\n\nZumindest f√ºr Chrome habe ich aber eine L√∂sung gefunden: Man √∂ffnet den Browser √ºber die Kommandozeile und behandelt `http://meinesite.dev` als sichere Quelle, obwohl sie unsicher ist. Daf√ºr muss man zwei Flags √ºbergeben.\n\nZuerst schlie√üt man alle Instanzen von Chrome oder in meinem Fall von Chrome Canary, √∂ffnet Terminal oder iTerm und gibt folgende Zeile ein.\n\n    /Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary --user-data-dir=/tmp/foo --unsafely-treat-insecure-origin-as-secure=http://meinesite.dev\n    \n\nBevor man mit Enter best√§tigt, muss man nat√ºrlich `http://meinesite.dev` noch durch die passende Domain ersetzen und `Google\\ Chrome\\ Canary` mit `Google\\ Chrome` falls man Chrome und nicht Chrome Canary √∂ffnen m√∂chte.  \nWenn alles gut gegangen ist, √∂ffnet sich Chrome und man kann Service Worker auf einem Virtual Host verwenden.\n\nF√ºr Firefox gibt es wohl auch eine L√∂sung: [Service Worker ohne HTTPS auf einem Virtual Host in Firefox][4] (Habe es aber nicht getestet)\n\nOffline ist bei mir noch nichts verf√ºgbar, aber Service Worker l√§uft jetzt zumindest auf meinem Virtual Host. Mal sehen, wie es weitergeht ;)\n\n### Quellen\n\n*   <https://bugs.chromium.org/p/chromium/issues/detail?id=441605#c67>\n*   <http://stackoverflow.com/a/34161385/1187717>\n*   <http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features>\n\n [1]: https://remysharp.com/2016/03/22/the-copy--paste-guide-to-your-first-service-worker\n [2]: http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n [3]: https://coolestguidesontheplanet.com/how-to-set-up-virtual-hosts-in-apache-on-mac-osx-10-11-el-capitan/\n [4]: https://github.com/slightlyoff/ServiceWorker/issues/658#issuecomment-87283965"},{"title":"Einzelne Elemente in Flexbox anders ausrichten als den Rest mit align-self","slug":"einzelne-elemente-in-flexbox-anders-ausrichten-als-den-rest-mit-align-self","teaser":"In einem [Talk][1] von [Estelle Weyl][2] ist mir eine Flexbox Eigenschaft untergekommen, die ich bisher noch nicht kannte: `align-self`.\n\nDie Definition laut [MDN][3]:\n\n> Die align-self CSS Eigenschaft richtet Flexelemente der aktuellen Flexzeile aus und √ºberschreibt dabei den Wert von align-items.\n\nhttps://developer.mozilla.org/de/docs/Web/CSS/align-self\n\n [1]: https://forwardcourses.com/lectures/87\n [2]: http://www.standardista.com/\n [3]: https://developer.mozilla.org/de/docs/Web/CSS/align-self\n","date":"2016-06-03","year":"2016","body":"Wenn man also Elemente mit `align-items` ausrichtet, kann man mit `align-self` ein bestimmtes oder mehrere Elemente anders ausrichten. H√§tte sicher jede/r von uns schon mal gebraucht.\n\nIch habe zwei kleine Beispiele zur Illustration auf CodePen gestellt:\n\n<p data-height=\"300\" data-theme-id=\"6054\" data-slug-hash=\"JKdbEv\" data-default-tab=\"result\" data-user=\"matuzo\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">\n  See the Pen <a href=\"http://codepen.io/matuzo/pen/JKdbEv/\">Flex-box: align-self</a> by Manuel Matuzovic (<a href=\"http://codepen.io/matuzo\">@matuzo</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n</p>\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script> \n## Quellen und Ressourcen\n\n*   [Flexbox: WTF Talk von Estelle Weyl][1]\n*   [align-self Eintrag auf MDN][3]\n\n [1]: https://forwardcourses.com/lectures/87\n [2]: http://www.standardista.com/\n [3]: https://developer.mozilla.org/de/docs/Web/CSS/align-self"},{"title":"Warum Seiten auf iOS 9 skaliert werden","slug":"warum-seiten-auf-ios-skaliert-werden","teaser":"Neulich habe ich eine Website in unterschiedlichen Browsern durchgetestet und da ist mir aufgefallen, dass sie auf iOS 9 beim Laden kurz runter skaliert wird und dann auf die eigentliche Gr√∂√üe springt. Das ist bei jedem Click auf einen Link passiert, was auf Dauer sehr nervig war. Ich konnte nicht herausfinden, was der eigentliche Grund war f√ºr das hin und her springen (wahrscheinlich habe ich irgendwas bei den Abmessungen verpfuscht ;)), aber zumindest wei√ü ich jetzt warum auf iOS 9, und nur auf iOS 9, √ºberhaupt irgendetwas skaliert wird.","date":"2016-06-01","year":"2016","body":"## shrink-to-fit=no\n\n[Seit iOS9][1] ist es so, dass Seiten mit Inhalt, der √ºber den Viewport hinausgeht, runter skaliert werden damit der Inhalt Platz findet. Das passiert nur dann, wenn man den `viewport` Meta Tag mit `width=device-width` angibt, also quasi so gut wie immer. Das klingt durchaus sinnvoll, ist aber nicht immer erw√ºnscht.\n\nIch habe eine ganz simple [Demo][2] vorbereitet: 5 divs (je 250px `width` + 6px `margin-right`), also insgesamt 1280px breit.\n\n**Safari auf iOS 9 ohne shrink-to-fit**  \nBei einer Viewportbreite von 1024px auf dem iPad sollte man nur 4 divs (256 * 4) sehen, aber auf dem Screen sind 5 zu sehen.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2016/06/shrink-to-fit.png\" alt=\"shrink-to-fit\" width=\"2048\" height=\"301\" class=\"alignnone size-full wp-image-1002\" />\n\nDie L√∂sung ist eine zus√§tzliche Angabe im viewport Meta-Tag. Mit `shrink-to-fit=no` verh√§lt sich der Browser wieder wie fr√ºher/erwartet/erw√ºnscht ‚Äì anders ;)\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, shrink-to-fit=no\">\n    \n\n**Safari auf iOS 9 mit shrink-to-fit**  \n<img src=\"https://matuzo.at/wp-content/uploads/2016/06/shrink-to-fit-no.png\" alt=\"shrink-to-fit-no\" width=\"2048\" height=\"333\" class=\"alignnone size-full wp-image-1001\" />\n\nEine genauere Erkl√§rung und Hintergr√ºnde gibt es auf [bitsofcode][3].\n\n [1]: https://developer.apple.com/library/ios/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_0.html#//apple_ref/doc/uid/TP40014305-CH9-SW36\n [2]: http://codepen.io/matuzo/pen/rLawXa\n [3]: https://bitsofco.de/ios-safari-and-shrink-to-fit/"},{"title":"IntersectionObserver: Sichtbarkeit von Elementen checken","slug":"intersectionobserver-sichtbarkeit-von-elementen-checken","teaser":"Mit IntersectionObservers ist es sehr einfach und vor allem ohne [Jank][1] m√∂glich, herauszufinden, ob ein Element gerade im Viewport sichtbar wird bzw. ihn verl√§sst. Das Besondere an IntersectionObservers (IO) ist, dass man daf√ºr weder [getBoundingClientRect()][2] abfragen, noch einen Scroll event handler anlegen muss.\n\n [1]: http://jankfree.org/\n [2]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect","date":"2016-05-27","year":"2016","body":"IO sind gedacht und eignen sich f√ºr:\n\n*   Abfragen der Position von *below the fold* Inhalten und *lazy loaden* dieser\n*   Performante Infinite Scrolling Listen\n*   Sichtbarkeit von Elementen abfragen. Besonders interessant f√ºr Werbebanner.\n\nSie eignen sich nicht f√ºr Szenarien bei denen pixelgenaue Informationen, bspw. bei Animation, gefragt sind.\n\n## IntersectionObserver erstellen\n\nMan legt einen IntersectionObserver an und legt fest, welches Element *observed* werden soll.\n\n    const io = new IntersectionObserver(entries => {\n    \n        // Verf√ºgbare Daten, wenn das Element den Viewport betritt oder verl√§sst\n        console.log(entries);\n    });\n    \n    // Element, das observed werden soll\n    const box = document.querySelector('.box');\n    \n    // .box observen\n    io.observe(box);\n    \n\nDieses Beispiel, erweitert durch eine Statusanzeige, kann man sich [hier][3] ansehen. Der Code ist auf [Github][4].\n\n## Mehrere Elemente beobachten\n\nM√∂chte man mehrere Elemente beobachten, empfiehlt es sich, ein und den selben Observer daf√ºr zu verwenden.\n\n    const io = new IntersectionObserver(entries => {\n        console.log(entries);\n    });\n    \n    // Elemente, die observed werden sollen\n    const box1 = document.querySelector('.box1');\n    const box2 = document.querySelector('.box2');\n    \n    // .box1 und .box2 observen\n    io.observe(box1);\n    io.observe(box2);\n    \n\nDieses Beispiel gibt es ebenfalls als [Demo][5] und den [Code auf Github][6].\n\n## Kindelemente innerhalb eines anderen Elements observen\n\nMan kann dem Observer Optionen √ºbergeben. Beispielsweise kann man festlegen, dass Elemente nicht innerhalb des Dokuments beobachtet werden sollen, sondern innerhalb eines anderen Elements.\n\n    const io = new IntersectionObserver(entries => {\n    \n        // Verf√ºgbare Daten, wenn das Element den sichtbaren Bereich des \n        // Elternelements betritt oder verl√§sst\n        console.log(entries);\n    }, {\n    \n        // Festlegen welches Element das root-Element sein soll\n        root: document.querySelector('.container')\n    });\n    \n    // Element, das observed werden soll\n    const box = document.querySelector('.box');\n    \n    // .box observen\n    io.observe(box);\n    \n\nDieses Beispiel gibt es nat√ºrlich auch als [Demo][7] und den [Code auf Github][8].\n\n## Checken wie viel von einem Element sichtbar ist\n\nEine weitere Option, die man √ºbergeben kann ist `threshold`. Mit `threshold` kann man Werte festlegen, die definieren zu welchem Zeitpunkt der IO Callback aufgerufen werden soll. So bekommt man genauere Information dar√ºber wie viel von dem Element schon sichtbar ist. Mit `threshold: [0.25, 0.5, 0.75, 1]` beispielsweise wird man jedesmal informiert, wenn ein zus√§tzliches Viertel des Elements sichtbar wird.\n\nIn [diesem Beispiel][9] sieht man `threshold` im Einsatz.\n\n## Infinite Scrolling\n\nMit IntersectionObserver l√§sst sich Infinite Scrolling sehr einfach umsetzen. Wichtig ist dabei nur, dass man nicht jedes einzelne Element in der Liste beobachtet, da das stark auf die Performance gehen kann.  \nBesser ist es ein leeres Element nach x Listelementen zu positionieren und dieses zu beobachten. Sobald es im Viewport ist, werden neue Listelemente geladen und das leere Element wird wieder an das Ende der Liste gesetzt.\n\n**HTML**\n\n    <section class=\"articles\">\n         <article class=\"article\">Article 1</article>\n         <article class=\"article\">Article 2</article>\n         <article class=\"article\">Article 3</article>\n         <article class=\"article\">Article 4</article>\n         <article class=\"article\">Article 5</article>\n         <!-- Dieses Element wird beobachtet -->\n         <div class=\"sentinel\"></div>\n         <article class=\"article\">Article 6</article>\n         <article class=\"article\">Article 7</article>\n         <article class=\"article\">Article 8</article>\n         <article class=\"article\">Article 9</article>\n         <article class=\"article\">Article 10</article>\n    </section>\n    \n\n**JS**\n\n    // Indikator der beobachtet werden soll\n    const sentinel = document.querySelector('.sentinel');\n    \n    // Artikel Container\n    const articles = document.querySelector('.articles');\n    \n    // Artikelz√§hler\n    let counter = 15;\n    \n    // Neue Artikel hinzuf√ºgen    \n    function addArticles(n) {\n      for (var i = 0; i < n; i++) {\n        var newArticle = document.createElement('article');\n        newArticle.classList.add('article');\n        counter++;\n        newArticle.textContent = 'Article ' + counter;\n        articles.appendChild(newArticle);\n      }\n    }\n    \n    // IntersectionObserver erstellen\n    const io = new IntersectionObserver(entries => {\n    \n      // Neue Artikel nur dann laden, wenn der Indikator in den \n      // Viewport kommt, nicht wenn er ihn verl√§sst.      \n      if (entries[0].intersectionRatio <= 0) {\n        return;\n      }\n    \n      // Die n√§chsten 10 Artikel laden\n      addArticles(10);\n    \n      // Indikator an das Ende der Liste schieben\n      articles.appendChild(sentinel);\n    \n      // Die n√§chsten 5 Artikel laden      \n      addArticles(5);\n    \n    });\n    \n    // Den Indikator .sentinel observen\n    io.observe(sentinel);\n    \n\n[Demo][10] und [Code][11].\n\n## IO stoppen und deaktivieren\n\nIntersectionObserver lassen sich auch wieder stoppen und deaktivieren.\n\n    // Element nicht mehr observen\n    io.unobserve(element);\n    \n    // Gesamten IntersectionObserver deaktivieren\n    io.disconnect();\n    \n\n## Browser Support\n\nAktuell funktionieren IntersectionObserver nur in Chrome 51+ und Chrome Canary, aber ein [Polyfill][12] ist gerade in der Entwicklung.\n\n## Quellen und weitere Ressourcen\n\n*   [Google Artikel][13]\n*   [Infinite Scrolling Beispiel][14]\n*   [Explainer Doc][15]\n*   [Specs][16]\n*   [Quick introduction to the Intersection Observer API][17]\n*   [Polyfill][12]\n\n [1]: http://jankfree.org/\n [2]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n [3]: http://htmlpreview.github.io/?https://github.com/matuzo/IntersectionObserver-Examples/blob/master/simple.html\n [4]: https://github.com/matuzo/IntersectionObserver-Examples/blob/master/simple.html\n [5]: http://htmlpreview.github.io/?https://github.com/matuzo/IntersectionObserver-Examples/blob/master/multipleelements.html\n [6]: https://github.com/matuzo/IntersectionObserver-Examples/blob/master/multipleelements.html\n [7]: http://htmlpreview.github.io/?https://github.com/matuzo/IntersectionObserver-Examples/blob/master/differentroot.html\n [8]: https://github.com/matuzo/IntersectionObserver-Examples/blob/master/differentroot.html\n [9]: http://htmlpreview.github.io/?https://github.com/matuzo/IntersectionObserver-Examples/blob/master/threshold.html\n [10]: http://htmlpreview.github.io/?https://github.com/matuzo/IntersectionObserver-Examples/blob/master/infinite.html\n [11]: https://github.com/matuzo/IntersectionObserver-Examples/blob/master/infinite.html\n [12]: https://github.com/jeremenichelli/intersection-observer-polyfill\n [13]: https://developers.google.com/web/updates/2016/04/intersectionobserver\n [14]: https://googlechrome.github.io/samples/intersectionobserver/index.html\n [15]: https://github.com/WICG/IntersectionObserver/blob/gh-pages/explainer.md\n [16]: https://wicg.github.io/IntersectionObserver/\n [17]: https://jeremenichelli.github.io/2016/04/quick-introduction-to-the-intersection-observer-api"},{"title":"Inspiration: Portfolio Websites","slug":"inspiration-portfolio-websites","teaser":"Es gibt schon seit L√§ngerem gro√üe Aufregung dar√ºber, dass im Web [alles gleich aussieht][1]. Dass alle die gleichen Wordpress-Themes verwenden und die [gleichen Bootstrap basierenden Websites][2] bauen. Dass alle Websites ein gro√ües Heroimage mit Call To Action (Scroll √ºblicherweise), 1 - 3 Spalten und irgendeinen Parallax-Spass haben. Dass alle DesignerInnen die gleichen Stockfotos und Iconsets verwenden, [und so weiter][3].\n\nWenn man sich umschaut, wird man sehen, dass das auch wirklich so ist. Aber wessen Schuld ist das? Unsere! Nat√ºrlich ist mir klar, dass man bei den meisten Projekten wahrscheinlich nicht die gestalterischen Freiheiten hat, die man sich w√ºnsche w√ºrde. Es gibt aber eine ganz gute M√∂glichkeit, wie man sich selbst kreativ verwirklichen und zeigen kann, dass es auch andere Wege gibt Websites zu gestalten: Die eigene **Portfolio Website**.\n\nNachdem meine Website nicht nur nicht sch√∂n ist, sondern sich auch in irgendeinem kostenlosen Standard Wordpress Theme kleidet, habe ich nicht gro√ü zu reden. Aber ich bin bereit mich zu bessern und habe vor, optisch etwas aus meinem Online-Auftritt zu machen.  \nDeswegen habe ich mich umgesehen und umgeh√∂rt und ein paar Inspirationen gesammelt. In dieser kleinen Sammlung sind nicht nur zwangsweise sehr sch√∂ne, daf√ºr aber programmier- oder layouttechnisch irgendwie besondere und auff√§llige Werke dabei.\n\n [1]: http://www.novolume.co.uk/blog/all-websites-look-the-same/\n [2]: http://adventurega.me/bootstrap/\n [3]: https://www.smashingmagazine.com/2015/07/hunt-for-the-webs-lost-soul/","date":"2016-05-04","year":"2016","body":"## Eli Fitch\n\n<http://eli.wtf/>\n\n<a href=\"http://eli.wtf/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/eliwtf.jpg\" alt=\"eli,wtf\" width=\"480\" height=\"285\" class=\"alignnone size-full wp-image-946\" /></a>\n\n## Jessica Biggs\n\n<http://biggles.rocks/>\n\n<a href=\"http://biggles.rocks/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/bigglesrocks.jpg\" alt=\"Jessica Biggs\" width=\"480\" height=\"257\" class=\"alignnone size-full wp-image-954\" /></a>\n\n## Alessandro Risso\n\n<http://www.alessandrorisso.com/>\n\n<a href=\"http://www.alessandrorisso.com/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/alessandrorisso.jpg\" alt=\"Alessandro Risso\" width=\"480\" height=\"252\" class=\"alignnone size-full wp-image-958\" /></a>\n\n## Daniel Givens\n\n<http://danielgivens.com/>\n\n<a href=\"http://danielgivens.com/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/danielgivens.jpg\" alt=\"Daniel Givens\" width=\"480\" height=\"259\" class=\"alignnone size-full wp-image-968\" /></a>\n\n## Sadok Yiram\n\n<http://sadok.mx/>\n\n<a href=\"http://sadok.mx\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/sadokmx.jpg\" alt=\"Sadok Yiram\" width=\"480\" height=\"269\" class=\"alignnone size-full wp-image-966\" /></a>\n\n## Sarah Ventura\n\n<http://saranthula.com/>\n\n<a href=\"http://saranthula.com/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/saranthula.jpg\" alt=\"Sarah Ventura\" width=\"480\" height=\"269\" class=\"alignnone size-full wp-image-967\" /></a>\n\n## Tomas Jasovsky\n\n<http://hellodusko.com/>\n\n<a href=\"http://hellodusko.com/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/hellodusko.jpg\" alt=\"Tomas Jasovsky\" width=\"480\" height=\"269\" class=\"alignnone size-full wp-image-964\" /></a>\n\n## Andrew McCarthy\n\n<http://andrevv.com/>\n\n<a href=\"http://andrevv.com/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/andrevv.jpg\" alt=\"Andrew McCarthy\" width=\"480\" height=\"270\" class=\"alignnone size-full wp-image-961\" /></a>\n\n## Armand Chakhalyan\n\n<http://chakhalyan.com/>\n\n<a href=\"http://chakhalyan.com/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/chakhalyan.jpg\" alt=\"Armand Chakhalyan\" width=\"480\" height=\"263\" class=\"alignnone size-full wp-image-962\" /></a>\n\n## Maxime Daguet\n\n<http://maxime.work>\n\n<a href=\"http://maxime.work\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/maxime.jpg\" alt=\"Maxime Daguet\" width=\"480\" height=\"269\" class=\"alignnone size-full wp-image-965\" /></a>\n\n## Chris Davis\n\n<http://chrisjdavis.org/>\n\n<a href=\"http://chrisjdavis.org/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/chrisjdavis.jpg\" alt=\"Chris Davis\" width=\"480\" height=\"268\" class=\"alignnone size-full wp-image-963\" /></a>\n\n## Adrian Zumbrunnen\n\n<https://azumbrunnen.me/>\n\n<a href=\"https://azumbrunnen.me/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2016/05/adrianzumbrunnen.jpg\" alt=\"Adrian Zumbrunnen\" width=\"480\" height=\"302\" class=\"alignnone size-full wp-image-970\" /></a>\n\n [1]: http://www.novolume.co.uk/blog/all-websites-look-the-same/\n [2]: http://adventurega.me/bootstrap/\n [3]: https://www.smashingmagazine.com/2015/07/hunt-for-the-webs-lost-soul/"},{"title":"Meine Top Picks der letzten Woche #3","slug":"meine-top-picks-der-letzten-woche-3","teaser":"Eine kleine Liste mit den Artikeln, Videos, Websites, Programmen, etc., die mir letzte Woche besonders gut gefallen haben oder in irgendeiner Form hilfreich waren. Wenn du die Liste erg√§nzen kannst und m√∂chtest, mach das bitte in den Kommentaren.","date":"2016-02-08","year":"2016","body":"### Image tag vs background property\n\n<https://pawelgrzybek.com/image-tag-vs-background-property/>  \n`object-fit: cover` ist f√ºr img-Tags was `background-size: cover` f√ºr Hintergrundbilder ist.\n\n### MediumEditor\n\n<https://yabwe.github.io/medium-editor/>  \nEin Inline-Editor.\n\n### CSS Best Practices\n\n<http://fantasai.inkedblade.net/style/talks/best-practices/#title>  \nEin paar CSS Tipps. (Mit Click/Tap bl√§ttern.)"},{"title":"console.log stylen","slug":"console-log-aufrufe-stylen","teaser":"In einem [Artikel von David Walsh][1] habe ich neulich gesehen, dass man `console` Aufrufe stylen kann. Gerade beim debuggen ist das sicher nicht unpraktisch, beispielsweise wenn man gewisse Logs hervorheben m√∂chte.\n\n [1]: https://davidwalsh.name/add-styles-console","date":"2016-02-02","year":"2016","body":"## console.log stylen\n\nAnstatt einfach nur die Nachricht zu √ºbergeben, √ºbergibt man zwei zus√§tzliche Parameter. Zuerst die [Formatierungs-Strings][2] f√ºr die n√§chsten beiden Parameter (`%c` f√ºr das CSS und `%s` bzw. `%o` f√ºr die Nachricht), dann die CSS Eigenschaften und schlie√ülich was geloggt werden soll.\n\n    console.log(\"%c%s\", \"background: #123456; color: #fff; font-size: 24px\", \"Ziemlich abgefahren!\")\n    \n\nDas geht nat√ºrlich auch mit Arrays und sonstigen anderen Arten von Objekten. `%s` eignet sich besser f√ºr Strings und `%o` f√ºr Arrays und Objekte.\n\n    console.log(\"%c%o\", \"border: 2px dotted red; padding: 5px; font-size: 18px\", [2, 3, \"test\"])\n    \n\nAnhand des zweiten Beispiels sieht man ganz gut, dass die Konsolen der einzelnen Browser die Ausgaben unterschiedlich formatieren. Der Rahmen wird in Firefox sch√∂n dargestellt, in Chrome nicht so richtig.\n\nDamit man nicht jedes Mal alle Eigenschaften abtippen muss, kann man eine eigene Funktion schreiben oder sich beispielsweise auch so aushelfen.\n\n    var logs = {\n        o: \"%c%o\",\n        s: \"%c%s\",\n        error: \"background: #f00; color: #fff; padding: 3px; font-size: 20px\",\n        info: \"background: #3033E8; color: #fff; padding: 3px; font-size: 20px\"\n    }\n    \n    console.log(logs.s, logs.info, \"Viel besser!\");\n    \n\n## Beispiele f√ºr gestylte Logs\n\nEin paar Beispiele findet man, wenn man in diesem Artikel die DevTools √∂ffnet und sich die Konsole ansieht oder auch in der Konsole auf [Google+][3].\n\n## log, warn, error, info und table\n\nAn dieser Stelle m√∂chte ich darauf hinweisen, dass es neben `console.log()` auch noch andere M√∂glichkeiten gibt, etwas zu loggen (Egal ob mit oder ohne zus√§tzlichem Styling).\n\n    console.warn(\"%c%s\", \"background: #E8CD34; color: #fff; padding: 3px; font-size: 20px\", \"Warnung!\")\n    console.error(\"%c%s\", \"background: #f00; color: #fff; padding: 3px; font-size: 20px\", \"Fehler!\")\n    console.info(\"%c%s\", \"background: #3033E8; color: #fff; padding: 3px; font-size: 20px\", \"Info!\")\n    console.table([[1, 2, \"test\"]])\n    \n\n`console.table()` kann man zwar nicht stylen, aber es ist trotzdem sehr [praktisch][4].\n\nMehr dazu gibt es auf [MDN][5]\n\n [1]: https://davidwalsh.name/add-styles-console\n [2]: http://php.net/manual/de/function.sprintf.php\n [3]: https://plus.google.com\n [4]: https://matuzo.at/mehrdimensionale-arrays-oder-listen-von-objekten-in-tabellenform-ausgeben/\n [5]: https://developer.mozilla.org/en-US/docs/Web/API/Console"},{"title":"Meine Top Picks der letzten Woche #2","slug":"meine-top-picks-der-letzten-woche-2","teaser":"Eine kleine Liste mit den Artikeln, Videos, Websites, Programmen, etc., die mir letzte Woche besonders gut gefallen haben oder in irgendeiner Form hilfreich waren. Wenn du die Liste erg√§nzen kannst und m√∂chtest, mach das bitte in den Kommentaren.","date":"2016-02-01","year":"2016","body":"\n\n### The A11Y Project\n\n<http://a11yproject.com/>  \nHow-Tos, Checklisten, Patterns, Tests, Tipps und Mehr zum Thema Accessibility.\n\n### vienna.js\n\n<http://www.meetup.com/viennajs/>  \nIch war letzte Woche das erste Mal beim [vienna.js Meetup][1] und kann es nur empfehlen!\n\n### BEM with Emmet\n\n<https://pawelgrzybek.com/bem-with-emmet/>  \nEmmet Filter f√ºr den BEM Syntax.\n\n### Critical Web Fonts\n\n<http://www.zachleat.com/web/critical-webfonts/>  \n*Kritische* Buchstaben zuerst laden und dann erst den Rest.\n\n [1]: http://www.meetup.com/viennajs/"},{"title":"AutoFileName: Projektroot in Sublime √§ndern","slug":"autofilename-projektroot-in-sublime-aendern","teaser":"Ich k√∂nnte mir die Arbeit in Sublime ohne dem Plugin *[AutoFileName][1]* nicht mehr vorstellen. Bis vor Kurzem hat mich aber eine Sache gest√∂rt. Immer wenn ich einen Pfad mit `/` begonnen habe, wurde der Pfad relativ zum Root meines Computers vervollst√§ndigt, anstatt relativ zum Root meines Projekts. Zum Gl√ºck kann man den Projektroot in Sublime √§ndern.\n\nWie ich dieses *Problem* gel√∂st habe, erkl√§re ich gleich. Vorher m√∂chte ich aber AutoFileName kurz vorstellen.\n\n [1]: https://github.com/BoundInCode/AutoFileName","date":"2016-01-30","year":"2016","body":"\n\n<!--more-->\n\n## Autovervollst√§ndigung von Pfaden mit AutoFileName\n\nMit [AutoFileName][1] (AFN) ist es nicht mehr notwendig Pfade manuell abzutippen. Sobald sich der Cursor zwischen Anf√ºhrungszeichen befindet, werden passende Ordner, Dateien und in weiterer Folge Unterordner und -dateien vorgeschlagen.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2016/01/autofilename.gif\" alt=\"Autofilename\" width=\"636\" height=\"332\" class=\"alignnone size-full wp-image-895\" />\n\nDas Ganze passiert relativ zum Ordner in dem sich das Dokument, das gerade beschrieben wird, befindet. Das ist auch gut so, aber, wie schon erw√§hnt, wird relativ zum Root des Computers vervollst√§ndigt, wenn man den Pfad mit `/` beginnt. Nachdem es immer wieder vorkommen kann, dass man mit absoluten Pfaden arbeiten muss, ist das nat√ºrlich sehr m√ºhsam.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2016/01/autofilename_root.png\" alt=\"Autofilename Root\" width=\"636\" height=\"350\" class=\"alignnone size-full wp-image-894\" />\n\n## Rootordner f√ºr Autofilename √§ndern\n\nIn den Settings von AutoFileName (*Sublime Text > Preferences > Package Settings > AutoFileName > Settings - Default*) findet man zwei Eigenschaften, die die Situation zumindest ein bisschen optimieren. Mit `afn_proj_root` kann man einen eigenen Root-Ordner definieren, wobei man vorher `afn_use_project_root` auf `true` setzen muss. Diese beiden Eigenschaft √§ndert man nicht direkt in der Datei, sondern kopiert und erg√§nzt sie in den Sublime User Settings (*Sublime Text > Preferences > Settings - User*).\n\n    {\n        ‚Ä¶\n        \"afn_use_project_root\": true,\n        \"afn_proj_root\": \"/Users/matuzoat/Sites\"\n    }\n    \n\nNachdem die Usersettings global gelten und nicht pro Projekt, ist diese L√∂sung eben noch nicht ganz ideal. Root ist zwar nicht mehr so weit weg, aber noch immer nicht das Projektroot.\n\n## Projekte in Sublime erstellen und speichern\n\nSublime bietet die M√∂glichkeit, gewisse [Settings pro Projekt][2] zu speichern. Man kann globale Einstellungen projektweise anpassen oder beispielsweise auch speichern, welche Ordner und Dateien im Sidebar eingezeigt werden sollen oder nicht, wenn das Projekt ge√∂ffnet wird.\n\nHat man einen Projektordner in Sublime offen, hat man theoretisch schon ein Sublimeproject, es ist nur nicht gespeichert. Um ein Projekt zu sichern, w√§hlt man oben in der Men√ºleiste *Project - Save Project As...* aus und speichert die Datei wo auch immer man m√∂chte. Ich lege sie gerne direkt in den Projektordner. In dieser Datei f√ºgt man dann im `settings` Objekt die beiden Eigenschaften von vorher ein und passt den Pfad an.\n\n    {\n        \"folders\":\n        [\n            {\n                \"path\": \".\"\n            }\n        ],\n        \"settings\": {\n            \"afn_use_project_root\": true,\n            \"afn_proj_root\": \"/Users/matuzoat/Sites/projekt\"\n        }\n    }\n    \n\nUnd voil√†, `/` f√ºhrt jetzt immer zum Projektroot. Wirklich viel Arbeit ist das nicht und vor allem muss man es nur ein Mal, wenn man das Projekt frisch anlegt, machen.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2016/01/autofilename_root_angepasst.png\" alt=\"Autofilename Root angepasst\" width=\"636\" height=\"314\" class=\"size-full wp-image-892\" />\n\n [1]: https://github.com/BoundInCode/AutoFileName\n [2]: https://www.sublimetext.com/docs/3/projects.html"},{"title":"Meine Top Picks der letzten Woche #1","slug":"meine-top-picks-der-letzten-woche","teaser":"Eine kleine Liste mit den Artikeln, Videos, Websites, Programmen, etc., die mir letzte Woche besonders gut gefallen haben oder in irgendeiner Form hilfreich waren. Wenn du die Liste erg√§nzen kannst und m√∂chtest, mach das bitte in den Kommentaren.","date":"2016-01-25","year":"2016","body":"### Jank Free\n\n<http://jankfree.org/>  \nArtikel, Videos und Slides zum Thema ‚ÄûRuckelfreie Animation mit CSS (und Javascript)‚Äú.\n\n### Vienna\n\n<http://www.vienna-rss.org/>  \nOpen Source RSS Reader f√ºr OS X\n\n### How to Create Visually Effective Calls-To-Action\n\n<http://rafaltomal.com/visually-effective-cta/>  \nEin kurzer Artikel, der beschreibt was man f√ºr effektive Calls-To-Action beachten kann/soll.\n\n### About Those Lava Lamps\n\n<https://gist.github.com/marick/3ec112bc38b2af267e15>  \nEin nette Anekdote zur Mitarbeitermotivation"},{"title":"Toolbar in Chrome f√ºr Android einf√§rben","slug":"toolbar-in-chrome-fuer-android-einfaerben","teaser":"Es wird wahrscheinlich aufgefallen sein, dass manche Browserfenster auf Android seit einigen Monaten √ºberraschend bunt sind. Das ist m√∂glich seit [Chrome 39 f√ºr Android][1], weil in dieser Version ein neuer Meta-Tag vorgestellt worden ist.\n\n [1]: https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android\n","date":"2015-12-30","year":"2015","body":"    <meta name=\"theme-color\" content=\"#123456\">\n    \n\nMit dem `theme-color` Meta-Tag kann man die Status- und Adressleiste einf√§rben, wie man in den Screenshots oben sehen kann.\n\nAuf iOS funktioniert der Meta-Tag nicht, da kann man nur einstellen wie die Statusleiste im [Fullscreen-Modus][2] aussieht.\n\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n    \n\nDamit man die Darstellung der Statusleiste in iOS √§ndern kann, muss die Website im Fullscreen-Modus sein, deswegen werden beide Meta-Tags ben√∂tigt. Eigene Farben kann man nicht angeben, man hat nur die Wahl zwischen `default`, `black` und `black-translucent`.\n\n [1]: https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android\n [2]: https://developer.apple.com/library/iad/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html#//apple_ref/doc/uid/TP40008193-SW3"},{"title":"Wie funktioniert flex-grow?","slug":"wie-funktioniert-flex-grow","teaser":"Nachdem der Support f√ºr Flexbox mittlerweile schon [mehr als brauchbar][1] ist, habe ich vor einigen Wochen beschlossen, dass es endlich Zeit f√ºr mich ist, mich mit Flexbox zu besch√§ftigen und es in meinen Projekten zu verwenden.  \nIch war sehr schnell sehr begeistert, weil Flexbox tats√§chlich so abgefahren ist, wie alle sagen. Dementsprechend habe ich keine Gelegenheit ausgelassen und immer wieder von meinen neuesten Erkenntnissen erz√§hlt. So war es auch wie ich meinem Kollegen Rob von der Eigenschaft `flex-grow` vorgeschw√§rmt habe. Ich habe ihm gezeigt wie sie funktioniert und auch eine [einfache Demo][2] erstellt.  \nEr war √§hnlich begeistert und wollte `flex-grow` gleich auf einer Website testen, die er k√ºrzlich gemacht hat. Also haben wir die Website ge√∂ffnet, DevTools gestartet, alle Floatings entfernt und `display: flex` und `flex-grow` angewendet. Dabei sind wir nat√ºrlich auch sichergegangen, dass keines der Elemente negative `margin`s hatte oder eine `position`, die uns st√∂ren konnte. Trotzdem war das Layout kaputt. Egal was wir versucht haben, das Layout hat nicht ausgesehen und funktioniert wie in meiner Demo, obwohl wir die exakt gleichen Eigenschaften verwendet haben.","date":"2015-12-28","year":"2015","body":"## flex-grow: Funktionsweise und Anwendungsbeispiele\n\nWie sich herausgestellt hat, habe ich ganz einfach falsch verstanden wie `flex-grow` funktioniert. Deswegen habe ich mich in weiterer Folge intensiv mit der Eigenschaft auseinandergesetzt. Zuf√§lligerweise bin ich zu dieser Zeit mit Chris Coyier von CSS-Tricks in Kontakt gekommen und somit konnte ich meine Erkenntnisse und einige praktische Beispiele in einem [Artikel auf css-tricks.com][3] zusammenfassen. Wenn also Interesse daran besteht genauer herauszufinden was genau hinter `flex-grow` steckt, dann kann ich diesen Artikel nur w√§rmstens empfehlen. An dieser Stelle m√∂chte ich ein gro√ües Dankesch√∂n an Eva Lettner f√ºrs Lektorat richten.\n\n [1]: http://caniuse.com/#search=Flexbox\n [2]: http://codepen.io/matuzo/pen/zvXQyj\n [3]: https://css-tricks.com/flex-grow-is-weird/"},{"title":"Gulp Tasks auf mehrere Dateien aufteilen","slug":"gulp-tasks-auf-mehrere-dateien-aufteilen","teaser":"Wenn man viele seiner Entwicklungsschritte mit Gulp l√∂st, wird das *gulpfile*, in dem sich √ºblicherweise s√§mtliche Tasks befinden, sehr schnell sehr lang und un√ºbersichtlich.\n\nGl√ºcklicherweise gibt es ein node-Package namens [require-dir][1] mit dem man die Inhalte eines Ordners in einem Dokument einbinden kann. Und das wiederum macht es m√∂glich, gulp Tasks in mehrere Dateien aufzuteilen.\n\nWie das geht zeige in einem kleinen Beispiel.\n\n [1]: https://www.npmjs.com/package/require-dir","date":"2015-12-03","year":"2015","body":"<span class=\"tipp\"><strong>Hinweis:</strong> Dieser Artikel setzt voraus, dass du schon ge√ºbt bist im Umgang mit gulp. Ist das nicht der Fall, kannst du hier die <a href=\"http://matuzo.at/gulp-grundlagen-arbeitsablaeufe-mit-gulp-automatisieren/\">Gulp Grundlagen</a> lernen.</span>\n\n## Tasks in eigene Dateien auslagern\n\nIn meinem [Beispiel][2] befindet sich im root Ordner des Projekts wie gewohnt das gulpfile (`gulpfile.js`) und ein Ordner (`gulp-tasks/`) mit zwei Javascript Dateien (`styles.js` und `scripts.js`). (Die Namen des Ordners und der Dateien sind vollkommen frei gew√§hlt. Das *gulpfile* muss aber nat√ºrlich immer noch *gulpfile.js* hei√üen.)\n\nIn den beiden Javascript Dateien wird jeweils gulp eingebunden und die Packages, die f√ºr die Ausf√ºhrung der jeweiligen Tasks notwendig sind. Die Tasks sind thematisch auf die beiden Dateien aufgeteilt.\n\n`gulp-tasks/scripts.js`\n\n    // Gulp und alle JS Plugins einbinden\n    var gulp = require('gulp'),\n        uglify = require('gulp-uglify'),\n        jshint = require('gulp-jshint');\n    \n    // Task der Javascript validiert und uglified\n    gulp.task('scripts', function() {\n        return gulp.src('scripts/script.js')\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n        .pipe(uglify())\n        .pipe(gulp.dest('dist'));\n    });\n    \n\n`gulp-tasks/styles.js`\n\n    // Gulp und alle CSS Plugins einbinden\n    var gulp = require('gulp'),\n        sourcemaps = require('gulp-sourcemaps'),\n        minify = require('gulp-minify-css'),\n        less = require('gulp-less');\n    \n    // Task der Less zu CSS kompiliert, minified\n    // und Sourcemaps erstellt\n    gulp.task('styles', function() {\n        return gulp.src('styles/main.less')\n        .pipe(sourcemaps.init())\n        .pipe(less())\n        .pipe(minify())\n        .pipe(sourcemaps.write('.', { sourceRoot: 'css-source' }))\n        .pipe(gulp.dest('dist'));\n    });\n    \n\n## Ausgelagerte Tasks einbinden\n\nIm *gulpfile* selber wird ebenfalls gulp eingebunden. Um auf die Tasks der Dateien im gulp-tasks Ordner zugreifen zu k√∂nnen, muss [require-dir][1] installiert (`npm install require-dir --save-dev`) und *required* werden. Den gulp-tasks Ordner kann man auch gleich in der selben Zeile einbinden.\n\n    require('require-dir')('gulp-tasks');\n    \n\nDas war es eigentlich schon. Wenn man gewisse Tasks nicht auslagern will, kann man diese weiterhin direkt ins *gulpfile* schreiben.\n\n`gulpfile.js`\n\n    // Gulp einbinden\n    var gulp = require('gulp');\n    \n    // Alle Tasks aus den Dateien im gulp-tasks Ordner holen\n    require('require-dir')('gulp-tasks');\n    \n    // Die Tasks 'styles' und 'scripts' sind zwar nicht direkt\n    // im gulpfile, k√∂nnen aber trotzdem ausgef√ºhrt werden \n    gulp.task('dist', ['styles', 'scripts']);\n    \n\nDas **komplette Beispiel** kann man [hier herunterladen][2]. Bevor man die Tasks ausf√ºhren kann, muss man zuerst alle Dependencies mit `npm install` downloaden.\n\nDas Auslagern von Tasks in eigene Dateien ist nicht immer notwendig, kann aber bei vielen Tasks von Vorteil sein. Au√üerdem kann die Aufteilung in eigene Dateien die Wiederverwendbarkeit von Tasks vereinfachen.\n\n [1]: https://www.npmjs.com/package/require-dir\n [2]: http://matuzo.at/beispiele/gulp/gulp_require-dir.zip"},{"title":"Digitalvision 2015: Meine Notizen","slug":"digitalvision-2015-meine-notizen","teaser":"Gestern hat die Digitalvision 2015 in Wien stattgefunden. Es gab 7 Talks zu den Themen UX und Frontend, reichlich zu Essen und zu Trinken, funktionierendes WLAN, und das alles in einer [sehr sch√∂nen Location][1]. Die Talks waren in Ordnung, aber unterm Strich nicht sonderlich √ºberw√§ltigend, weil nicht wirklich viel Neues dabei. Nichtsdestotrotz war der Tag insgesamt gut organisiert und es hat Spass gemacht den Sprechern zuzuh√∂ren. Ob es die knapp 100 Euro wert waren? Ich bin mir nicht ganz sicher. Aber die [Liechteneckers][2] geh√∂ren zu den wenigen in √ñsterreich, die ein derartiges Event veranstalten und immerhin tut sich etwas in diese Richtung und das ist wichtig.\n\nIch habe meine Notizen zur Digitalvision 2015 hier kurz zusammengefasst.\n\n [1]: http://vienna.impacthub.net/\n [2]: http://liechtenecker.at/","date":"2015-10-10","year":"2015","body":"## The UX of Speed\n\n[Stefan Baumgartner (@ddprrt)][3]  \nSlides: <https://t.co/7UDvBAIT6A>\n\n400ms weniger Ladezeit bei Yahoo => 9% mehr Traffic\n\nUsersnap Ladezeit 1,5 Sek. schneller => 150% mehr Traffic\n\n### Ziele\n\n*   User sollen innerhalb von einer 1 Sekunde die wichtige Information bekommen. \n*   Speedindex sollte unter 1000 sein.\n*   Page Speed Score √ºber 85 \n\n### Links\n\n*   <https://blog.ruxit.com/> \n*   <http://technologieplauscherl.at/>\n*   <http://www.meetup.com/de/stahlstadt-js/>\n\n## How to be the UX-Designer of tomorrow\n\n[David H√∂ller (@davidhoeller)][4]\n\n<http://illustree.at/>\n\n> Es ist lustiger am iPhone etwas nicht zu schaffen, als am Blackberry etwas zu schaffen.\n\n-???\n\n> The details are not the details. They make the design.\n\n‚ÄìCharles Eames\n\n## Gender Experience\n\n[Marc Busch (@mabu_89)][5]\n\nWie kann Technologie die selbe Experience f√ºr Menschen bieten, wenn Menschen so unterschiedlich sind? Technologie: Ein ‚ÄûOne size fits all‚Äú-Modell kann in Zukunft nicht mehr funktionieren.\n\nMc Donalds Video Game: <http://purposefulgames.info/post/18006014158/mc-donalds-video-game>\n\n## AI is the new UI\n\n[Jeremy Abbett (@jeremytai)][6]\n\nThere is a shift from something functional \"Okay we can do things\" to something thats desirable. DeverloperInnen und DesignerInnen m√ºssen mehr zusammenarbeiten.\n\n> If you love software, you have to build hardware.\n\n-Alan Kay\n\n> If you need more than 2 pizzas for your team, your team is too big.\n\n-Jeremy Abbett\n\n> Science Fiction becomes Science Fact\n\n-Jeremy Abbett\n\n### Sonstiges\n\n*   [Introducing Amazon Echo][7] \n*   [Amazon Echo Commercial Parody][8] \n*   [Magic Leap][9]\n*   [Ready Player One Buch][10]\n\n## Modulare Webentwicklung\n\n[Jens Grochtdreis (@flocke)][11]\n\n<http://speakerdeck.com/flocke>\n\nSlides: <https://speakerdeck.com/flocke/webseiten-modular-entwickeln-2>\n\nWenn alles das gleiche ist und nur anders ‚Äûangemalt‚Äú, dann ist das alles 1 Modul. (Beispiel Linkliste)\n\nLayout von Design trennen.\n\n**Living Styleguides:** <http://www.styleguides.io>\n\n**Zugang bei Development √ºber Styleguides:** Alle einzelnen Module zuerst direkt im Styleguide erstellen und dann am Ende erst zu einzelnen Seiten zusammenf√ºgen.\n\nGrundlagen daf√ºr:\n\n*   Module stehen f√ºr sich \n*   Module nicht gebunden an Ort in DOM \n*   M√∂glichst flach selektieren\n\n> BEM__is--really-ugly\n\n## Empathisches Design und der Reiz der Endorphine\n\n[Andrea Egger (@and_rea_e)][12]\n\n‚ÄûEmpathie ist das F√ºhlen mit Menschen‚Äú\n\n### Emotionale Empathie\n\nDas selbe Gef√ºhl des Gegen√ºber zu sp√ºren\n\n### Kognitive Empathie\n\nIn das Gegen√ºber hineinversetzen\n\n### Sonstiges\n\n<http://www.lingscars.com/>\n\n## Responsive by Design ‚Äì Successful by Chance?\n\n[Thomas Piribauer][13] & Bj√∂rn Ganslandt\n\nSlides: <http://www.slideshare.net/intuio/intuio-ix-dahh150216>\n\n<http://intuio.at/>\n\nTechnisch funktioniert Mobile First schon, aber im Design ist das ‚Äûrichtige‚Äú Mindset noch nicht angekommen. Es wird zuerst Desktop First konzipiert und Mobile First entwickelt, was zu Diskrepanzen f√ºhren kann.\n\n> Gleichzeitig First!\n\n-intuio\n\nTitel Foto von <https://twitter.com/liechteneckers/status/652461091511996416>\n\n [1]: http://vienna.impacthub.net/\n [2]: http://liechtenecker.at/\n [3]: https://twitter.com/ddprrt\n [4]: https://twitter.com/davidhoeller\n [5]: https://twitter.com/mabu_89\n [6]: https://twitter.com/jeremytai\n [7]: https://www.youtube.com/watch?v=KkOCeAtKHIc\n [8]: https://www.youtube.com/watch?v=NUR3Dqxtijg\n [9]: http://www.magicleap.com\n [10]: http://www.amazon.de/Ready-Player-One-Ernest-Cline/dp/0099560437/ref=sr_1_1?ie=UTF8&qid=1444390617&sr=8-1&keywords=Ready+Player+One\n [11]: https://twitter.com/flocke\n [12]: https://twitter.com/and_rea_e\n [13]: https://twitter.com/tpiribauer"},{"title":"Webfont Performance, FOUT, FOIT und Usability","slug":"webfont-performance","teaser":"Webfonts haben sich in den letzten knapp 6 Jahren zu einem mehr oder weniger fixen Bestandteil des modernen Webdesign entwickelt. Neben gestalterischen Fortschritten, hat sich auch sehr viel in der Art und Weise, wie wir Webfonts einbinden, getan. Die `@font-face` Syntax ist mehrere [Entwicklungsschritte][1] durchgegangen, es gibt einige Services, die Webfonts anbieten, und eine neue [API][2] ist im Anmarsch.\n\nInspiriert durch [Bram Steins][3] Talk auf der [Smashing Conference 2015 in Freiburg][4] habe ich mich die letzten Tage mit dem Laden von Webfonts und den damit verbundenen Aspekten hinsichtlich der Usability und Performance besch√§ftigt. Ich habe mir angesehen, wie sich Browser verhalten w√§hrend Webfonts geladen werden und wie man dar√ºber Kontrolle ergreifen kann, um ein m√∂glichst konsistentes Verhalten in allen Browsern zu erreichen und dabei auch die Webfont Performance zu verbessern. Weiters habe ich unterschiedliche Optionen getestet Webfonts zu laden und die Ergebnisse zusammengefasst.\n\n [1]: http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/\n [2]: https://drafts.csswg.org/css-font-loading/\n [3]: https://twitter.com/bram_stein\n [4]: http://smashingconf.com/freiburg-2015/","date":"2015-09-28","year":"2015","body":"\n\n<!--more-->\n\n## Webfonts: Services und Formate\n\nSeit 2009 haben wir die M√∂glichkeit mit Webfonts zu arbeiten und m√ºssen uns nicht mehr auf [Systemfonts][5] beschr√§nken. Webfonts k√∂nnen wir entweder selber auf unseren Servern hosten oder eines der vielen Services (z.B. [Google Fonts][6], [Typekit][7], [Fonts.com][8] oder [Fontdeck][9]) verwenden.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2015/09/woff_support.png\" alt=\"Browser WOFF Support\" width=\"1272\" height=\"466\" class=\"alignnone size-full wp-image-806\" />][10]\n\nWebfonts gibt es in verschiedenen Formaten (.eot, .ttf, .svg, etc.), wobei wir uns heute auf [WOFF][11] und [WOFF2][12] (bessere Kompression als WOFF) beschr√§nken k√∂nnen und sollten. Der Vorteil von WOFF und besonders WOFF2 gegen√ºber den anderen Formate ist die deutlich geringere Dateigr√∂√üe.\n\n## Font Lademechanismus\n\nDas alleinige Einbinden eines Fonts mit `@font-face` bezweckt noch keinen Request. Erst wenn ein Selektor die Schriftart mit `font-family` zugewiesen bekommt und auch ein passendes HTML-Element existiert wird der Font heruntergeladen. Diesen Mechanismus nennt man *Lazy Loading* und grunds√§tzlich ist das auch eine gute Sache, weil so unn√∂tige Requests verhindert werden.\n\n> Lazyloading is bad for webfonts\n\n-Bram Stein\n\n*Lazy Loading* kann aber zur Folge haben, dass der Font noch geladen wird, die Seite aber schon fertig aufgebaut ist. Ist der Font schon im Browsercache, gibt es kein Problem, weil er quasi sofort abgerufen und angewendet werden kann. Ist das nicht der Fall, muss zwischenzeitlich die Darstellung des Textes irgendwie bewerkstelligt werden. Das kann sich sehr deutlich auf die Usability und Accessibility auswirken, wie man im folgenden gif sieht.\n\n<figure> <img src=\"https://matuzo.at/wp-content/uploads/2015/09/foit_transfermarktat.gif\" alt=\"FOIT und FOUT\" width=\"313\" height=\"543\" class=\"alignnone size-full wp-image-807\" /><figcaption>Aufbau auf einem Smartphone mit 3G Verbindung. Obwohl schon die ersten Elemente, sogar Bilder und Icons, zu sehen sind, wird der Text erst sehr sp√§t angezeigt.</figcaption> \n\n</figure>\n\n## Darstellung von Webfonts w√§hrend dem Laden\n\nLange wurde dar√ºber diskutiert, wie Text dargestellt werden soll w√§hrend die Webfonts noch geladen werden. So richtig einig ist man sich dar√ºber immer noch nicht und [Browserhersteller √§ndern auch gerne ihre Meinung][13]. Es gibt zwei verschiedene Herangehensweisen, die zwei unterschiedliche Effekte zur Folge haben.\n\n### FOUT\n\nDie erste Herangehensweise zeigt zuerst den Fallback Font, der im Font-Stack definiert worden ist, und tauscht diesen durch den Webfont aus, sobald dieser fertig geladen hat. Beispielsweise w√ºrde bei `font-family: 'Francois One', Times, sans-serif` Times angezeigt werden und dann, nach erfolgreichem Download, Francois One. Diesen Wechsel von einem zum anderen Font nennt man *Flash of unstyled Text (FOUT)*.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/09/fout.gif\" alt=\"Flash of unstyled Text\" width=\"273\" height=\"61\" class=\"alignnone size-full wp-image-809\" />\n\nFirefox and Opera haben mit diesem Verhalten angefangen und schlie√ülich aber zur zweiten Variante gewechselt. Das gilt auch f√ºr alle anderen gro√üen Browserhersteller. Der einzige aktuelle Browser mit FOUT ist Internet Explorer.\n\n#### Nachteile von FOUT\n\nDas Problem mit FOUT ist, dass sich das Layout durch das Austauschen der Fonts verschieben kann, besonders dann wenn Fallback Font und Webfont sehr unterschiedlich sind. Zudem sieht dieser Flash of unstyled Text ungewollt und wie ein Fehler aus.\n\n### FOIT\n\nAuf Grund der Nachteile von FOUT haben die meisten Browser begonnen Text zu verstecken w√§hrend der Webfont geladen wird. Anstatt des Fallback Fonts ist unsichtbarer Text zu sehen (oder eben nicht zu sehen). Das f√ºhrt dazu, dass das Layout nicht mehr *zuckt*. Das nennt man dann *Flash of invisible Text (FOIT)*.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2015/09/foit.gif\" alt=\"Flash of invisible Text\" width=\"273\" height=\"61\" class=\"alignnone size-full wp-image-810\" />][14]\n\n#### Nachteile von FOIT\n\nFOIT ist zwar optisch vielleicht sch√∂ner, aber das gro√üe Problem daran ist, dass es bei langsamen Internetverbindungen (z.B.: Smartphone oder √∂ffentliches WLAN) passieren kann, dass lange Zeit unsichtbarerer Text dargestellt wird, obwohl der Rest des Layouts bereits aufgebaut und bedienbar ist. Um dem entgegenzuwirken zeigen Firefox, Chrome und Opera nach 3 Sekunden unsichtbarem Text erst recht wieder den Fallback Font. Das ist zwar eine L√∂sung, aber richtig ideal ist das nicht, weil 3 Sekunden nicht gerade kurz sind (siehe transfermarkt.at gif oben). In Safari, Safari (iOS) und Android Webkit ist es √ºberhaupt so, dass ein Fallback Font erst nach 30 Sekunden oder gar nicht angezeigt wird.\n\n## FOUT optimieren\n\nAuf Grund der eben beschriebenen Nachteile ist FOIT f√ºr viele nicht die ideale L√∂sung. Wenn man f√ºr sich akzeptiert hat, dass es zu FOUT kommen kann, kann man verschiedene Dinge machen, um diesen Wechsel von einer Schrift zu anderen unscheinbarer zu machen.\n\n### Font Stacks\n\nEine der einfachsten Optimierungen ist das Aufbauen des Font Stacks so, dass man Fallbackfonts verwendet, die dem Webfont √§hnlich sind. Wenn der Fallback Font ansatzweise √§hnliche Eigenschaften aufweist wie der Webfont, ist der Sprung nicht mehr so extrem.\n\nZum Beispiel ist `font-family: Arial, Times, monospace;` keine gute Wahl, weil alle drei Schriften sehr unterschiedlich sind.\n\n#### Font Stacks testen\n\nAuf [fontfamily.io][15] kann man Font Stacks testen. Man sieht welche Fallback Fonts auf welchem Betriebssystem installiert sind und ob Fallback Fonts √ºberhaupt zum Einsatz kommen k√∂nnten. Beispielsweise bei `font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;` w√ºrden \"Helvetica Neue\" und Helvetica nie verwendet werden, weil Arial √ºberall installiert ist.\n\nMehr √ºber dieses Thema erf√§hrt man in einem [Artikel von Zach Leatherman][16].\n\n#### font-size-adjust\n\nEs gibt viele Charakteristika, die eine Schrift ausmachen. Eine davon ist die x-H√∂he, die H√∂he der Kleinbuchstaben. Ein Grund warum der FOUT sehr deutlich zu sehen sein kann, ist, dass die x-H√∂he des Fallback Fonts stark von der x-H√∂he des Webfonts abweicht. Jeder Font hat einen Formfaktor, der das Verh√§ltnis von x-H√∂he zu Schrifth√∂he darstellt. Dieses Verh√§ltnis kann man berechnen, wenn man die [x-H√∂he durch die Schriftgr√∂√üe rechnet][17].\n\nMit der Eigenschaft `font-size-adjust` kann man diesen Wert auf alle Schriften anwenden. Dadurch passt sich dann die H√∂he der Kleinbuchstaben der Fallbacks Fonts an die H√∂he der Kleinbuchstaben des Webfonts an.\n\nIn folgendem Beispiel ist der Text zuerst in Arial 50px zu sehen, dann Verdana 50px und schlie√ülich Verdana 50px mit `font-size-adjust`.\n\n<p data-height=\"287\" data-theme-id=\"6054\" data-slug-hash=\"PPGMzL\" data-default-tab=\"result\" data-user=\"matuzo\" class='codepen'>\n  See the Pen <a href='http://codepen.io/matuzo/pen/PPGMzL/'>font-size-adjust Test</a> by Manuel Matuzovic (<a href='http://codepen.io/matuzo'>@matuzo</a>) on <a href='http://codepen.io'>CodePen</a>.\n</p>\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script> Die Eigenschaft `font-size-adjust` funktioniert aktuell leider nur in [Firefox][18].\n\n#### Herausfinden ob Fonts installiert sind\n\nSollte man herausfinden wollen, ob ein bestimmter Font auf dem System installiert ist oder nicht, kann man daf√ºr [Font Face Observer][19] von [Bram Stein][3] verwenden und m√∂gliche Anpassungen mit Javascript machen.\n\n    var observer = new FontFaceObserver('My Family', {\n      weight: 400\n    });\n    \n    observer.check().then(function () {\n      console.log('Font is available');\n    }, function () {\n      console.log('Font is not available');\n    });\n    \n\n## Webfonts laden\n\nDie Art und Weise mit der man Fonts l√§dt spielt eine sehr wichtige Rolle, da es zwischen den verschiedenen Techniken massive Unterschiede gibt. Ich habe mir 6 Herangehensweisen angesehen und in punkto Performance und Kontrollm√∂glichkeiten verglichen.\n\n### Lokal auf dem Server\n\nDie Fonts liegen auf dem eigenen Server und man bindet sie mit `@font-face` ein.\n\n    @font-face{\n        font-family:Cabin;\n                src:url(cabin-regular-webfont.woff2) format('woff2'),\n                    url(cabin-regular-webfont.woff) format('woff'),\n                    url(cabin-regular-webfont.ttf) format('truetype');\n    }\n    \n\n**Vorteile:** Geringe Dateigr√∂√üe, wenn man die Fonts vorher bearbeitet hat (Stichwort: Subsetting).\n\n**Nachteile:** Keine Kontrolle √ºber FOUT und FOIT. Liegt nicht auf einem CDN. Lazy-Loading.\n\n### Mit link-Element und einem externen Service\n\nMan verwendet beispielsweise ein Service wie Google Fonts und bindet die Fonts per `link`-Element ein.\n\n    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>\n    \n\n**Vorteile:** Gute Performance beim zweiten Besuch.\n\n**Nachteile:** Blockt Rendering, was sehr schlecht f√ºr Usability und Accessibility ist.\n\n### Web Font Loader\n\nMit dem von Google und Typekit entwickelten [Web Font Loader][20] erlangt man mehr Kontrolle √ºber das Laden der Webfonts. Web Font Loader unterst√ºtzt Fonts von [Google Fonts][6], [Typekit][7], [Fonts.com][8], and [Fontdeck][9].\n\nDas Besondere an WFL (Web Font Loader) ist, dass es ein Eventsystem in Javascript und CSS zu Verf√ºgung stellt. In Javascript gibt es Events auf die man reagieren kann, bspw. `fontloading` oder `fontinactive` und in CSS werden je nach Status Klassen auf das `<html>`-Element angewendet, bspw. `.wf-loading` oder `.wf-inactive`. Mit Hilfe dieser Klassen hat man die Kontrolle dar√ºber, ob Fonts mit FOUT oder FOIT geladen werden, weil man selber festlegt was bei `.wf-loading` bzw. `.wf-active` passieren soll.\n\nMit WFL kann man Fonts asynchron laden.\n\n    <script>\n        WebFontConfig = {\n          google: {\n            families: ['Droid Sans', 'Droid Serif']\n          }\n        };\n    \n       (function(d) {\n          var wf = d.createElement('script'), s = d.scripts[0];\n          wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.6/webfont.js';\n          s.parentNode.insertBefore(wf, s);\n       })(document);\n    </script>\n    \n\nM√∂chte man FOUT verhindern, kann man WFL auch synchron einbinden. Das hat nat√ºrlich zur Folge, dass die Seite erst angezeigt wird, wenn der Font fertig geladen hat.\n\n    <script src=\"https://ajax.googleapis.com/ajax/libs/webfont/1.6.6/webfont.js\"></script>\n    <script>\n        WebFont.load({\n            google: {\n                families: ['Droid Sans', 'Droid Serif']\n            }\n        });\n    </script>\n    \n\n**Vorteile:** Kontrolle √ºber FOUT und FOIT. Statusklassen in CSS und Events in Javascript. Sehr performant.\n\n**Nachteile:** Javascript notwendig.\n\n### Font Face Oberserver\n\n[Font Face Observer][19] checkt zwar nur, ob ein Font vorhanden ist oder nicht, aber er macht das indem er den Font l√§dt. Praktischerweise gibt es auch eine Callback-Funktion, die nach erfolgreichen Ladevorgang ausgef√ºhrt wird. Man kann also √§hnliche Kontrolle wie bei Web Font Loader erlangen und noch dazu den Font asynchron laden.\n\n    var fontA = new FontFaceObserver( \"Cabin\" );\n    var fontB = new FontFaceObserver( \"Francois One\" );\n    \n    Promise\n        .all([fontA.check(), fontB.check()])\n        .then(function(){\n            document.documentElement.className += \"fonts-loaded\";\n        });\n    \n\nSobald beide Fonts geladen worden sind, bekommt das HTML Element die Klasse `fonts-loaded`.\n\n    .fonts-loaded body {\n        font-family: 'Cabin', sans-serif;\n    }\n    \n\nDie Deklaration im CSS greift also erst, wenn die Klasse `fonts-loaded` im HTML zugewiesen worden ist.\n\n**Vorteile:** Kontrolle √ºber FOUT und FOIT. Statusklasse in CSS. Sehr performant. Geringe Gr√∂√üe des Scripts.\n\n**Nachteile:** Javascript notwendig. Nicht so viel Kontrolle wie bei Web Font Loader.\n\n### CSS Font Loading\n\nEs gibt auch schon eine [native L√∂sung (CSS Font Loading)][2] f√ºr das Laden von Webfonts mit der man √§hnliche Dinge machen kann wie mit Web Font Loader oder Font Face Observer. Ein brauchbarer [Browsersupport][21] ist aber leider noch nicht gegeben. Zwischenzeitlich kann man [Fontloader Polyfill][22] nutzen.\n\nWeiters gibt es einen Entwurf f√ºr eine Eigenschaft ([font-display][23]) mit der man steuern k√∂nnen wird, wie Webfonts dargestellt werden sollen, je nachdem ob sie bereits geladen sind oder nicht. `font-display` wird noch von keinem Browser unterst√ºtzt.\n\n### Webfont Performance Vergleich\n\nIch habe 6 Dokumente mit verschiedene Varianten erstellt und die Performance mit [WebPageTest][24] gemessen. Getestet habe ich auf einem Server in Prag mit Mobile 3G - Fast (1.6 Mbps/768 Kbps 150ms RTT) auf Chrome. Au√üerdem habe ich die .htaccess des [HTML5 Boilerplate][25] wegen der gzip- und Caching-Einstellungen kopiert.\n\n<table>\n  <caption>Beim ersten Aufruf (ohne Browsercache)</caption> <thead>\n    <tr>\n      <th>\n      </th>\n      \n      <th>\n        Text sichtbar\n      </th>\n      \n      <th>\n        Webfont sichtbar\n      </th>\n      \n      <th>\n        Speed Index\n      </th>\n      \n      <th>\n        Ladezeit\n      </th>\n    </tr>\n  </thead>\n  \n  <tbody>\n    <tr>\n      <td>\n        Systemfonts\n      </td>\n      \n      <td>\n        0,5s\n      </td>\n      \n      <td>\n        /\n      </td>\n      \n      <td>\n        700\n      </td>\n      \n      <td>\n        0,553s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Google Link-Element\n      </td>\n      \n      <td>\n        2,7s\n      </td>\n      \n      <td>\n        2,7s\n      </td>\n      \n      <td>\n        2700\n      </td>\n      \n      <td>\n        1.586s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Google Web Font Loader\n      </td>\n      \n      <td>\n        0,7s\n      </td>\n      \n      <td>\n        2,6s\n      </td>\n      \n      <td>\n        777\n      </td>\n      \n      <td>\n        1.606s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Lokal Web Font Loader\n      </td>\n      \n      <td>\n        0,8s\n      </td>\n      \n      <td>\n        1,6s\n      </td>\n      \n      <td>\n        868\n      </td>\n      \n      <td>\n        1.102s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Lokal @font-face\n      </td>\n      \n      <td>\n        1,1s\n      </td>\n      \n      <td class=\"cell-highlight\">\n        1,1s\n      </td>\n      \n      <td>\n        1086\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0.974s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Lokal Web Font Observer\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0,6s\n      </td>\n      \n      <td>\n        1,4s\n      </td>\n      \n      <td class=\"cell-highlight\">\n        752\n      </td>\n      \n      <td>\n        1.191s\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nAm **schnellsten wird Text angezeigt** mit der Web Font Observer Variante. Der **niedrigste Speedindex** geht ebenfalls an Web Font Observer. Die **geringste Ladezeit insgesamt und f√ºr den Webfont** erreicht man mit der lokalen `@font-face` L√∂sung. Das f√ºhre ich darauf zur√ºck, dass ich den Font mit zopfli komprimiert und h√§ndisch das Subsetting eingestellt habe.\n\n<table>\n  <caption>Beim zweiten Aufruf (mit Browsercache)</caption> <thead>\n    <tr>\n      <th>\n      </th>\n      \n      <th>\n        Text sichtbar\n      </th>\n      \n      <th>\n        Webfont sichtbar\n      </th>\n      \n      <th>\n        Speed Index\n      </th>\n      \n      <th>\n        Ladezeit\n      </th>\n    </tr>\n  </thead>\n  \n  <tbody>\n    <tr>\n      <td>\n        Systemfonts\n      </td>\n      \n      <td>\n        0,4s\n      </td>\n      \n      <td>\n        /\n      </td>\n      \n      <td>\n        504\n      </td>\n      \n      <td>\n        0,369s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Google Link-Element\n      </td>\n      \n      <td>\n        0,5s\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0,5s\n      </td>\n      \n      <td>\n        500\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0.375s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Google Web Font Loader\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0,4s\n      </td>\n      \n      <td>\n        0,6s\n      </td>\n      \n      <td class=\"cell-highlight\">\n        408\n      </td>\n      \n      <td>\n        0.416s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Lokal Web Font Loader\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0,4s\n      </td>\n      \n      <td>\n        0,6s\n      </td>\n      \n      <td class=\"cell-highlight\">\n        408\n      </td>\n      \n      <td>\n        0.404s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Lokal @font-face\n      </td>\n      \n      <td>\n        0,5s\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0,5s\n      </td>\n      \n      <td>\n        500\n      </td>\n      \n      <td>\n        0.394s\n      </td>\n    </tr>\n    \n    <tr>\n      <td>\n        Lokal Web Font Observer\n      </td>\n      \n      <td>\n        0,5s\n      </td>\n      \n      <td class=\"cell-highlight\">\n        0,5s\n      </td>\n      \n      <td>\n        500\n      </td>\n      \n      <td>\n        0.420s\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nBeim zweiten Aufruf weist die Web Font Loader Variante in beiden F√§lle den **niedrigsten Speedindex** und die **schnellste Darstellung von Text** auf.\n\n## Zus√§tzliche Performanceoptimierung\n\nNeben der Ladetechnik gibt es noch zus√§tzliche Dinge, die man machen kann um die Performance zu optimieren.\n\n### Subsetting\n\nBeim Subsetting reduziert man die Gr√∂√üe der Fonts indem man nur die Zeichen in den Font nimmt, die man ben√∂tigen wird. Das geht mit dem [Webfont Generator][26] auf [Font Squirrel][27] sehr einfach. Man w√§hlt den ‚ÄûExpert‚Äú-Modus und wechselt bei ‚ÄûSubsetting‚Äú auf ‚ÄûCustom Subsetting‚Ä¶‚Äú. Dort w√§hlt man dann nur die Zeichentypen, Sprachen und Unicode Tabellen, die man ben√∂tigt.\n\n### WOFF Komprimierung mit zopfli\n\nWOFF Dateien sind zwar schon komprimiert, aber mit [sfnt2woff-zopfli][28] kann man noch extra 5-8% in Dateigr√∂√üe herausholen.\n\n### Fonts cachen\n\nMan sollte Fonts m√∂glichst lange (1 Jahr bspw.) cachen, weil sich selten etwas an Fonts √§ndert. Wie das geht kann man in der [.htaccess Datei des HTML5 Boilerplate][29] nachlesen.\n\n## Progressive enhancement\n\nFOUT ist zwar nicht sch√∂n, aber am Ende ist lesbarer Inhalt meistens wichtiger als ein sch√∂ner Webfont. Deswegen sollte man Webfonts als ein *progressive enhancement* sehen. Die Inhalte sind so schnell wie m√∂glich konsumierbar und werden mit einem Systemfont dargestellt. Sobald der Webfont geladen ist, wird das Leseerlebnis durch einen Webfont optimiert.\n\nMir pers√∂nlich ist es lieber, dass BenutzerInnen ein Mal FOUT sehen, als dass sie m√∂glicherweise mehrere Sekunden nichts sehen. Wenn man sich ein bisschen Zeit nimmt und sich mit der Thematik besch√§ftigt, kann man den *Flash of unstyled Text* durch die richtige Ladetechnik und reduzieren der Dateigr√∂√üe der Fonts optimieren.\n\n## Sonstiges\n\n*   [woff2-feature-test][30]\n*   [Techniken und Tests von der Filament Group][31]\n*   [Tipps f√ºr das Laden von Google Webfonts][32]\n\n## Quellen:\n\n*   <https://viget.com/extend/the-font-face-dilemma>\n*   <http://www.paulirish.com/2009/fighting-the-font-face-fout/#update2011>\n*   <http://www.zachleat.com/web/font-family-reunion/>\n*   <https://github.com/typekit/webfontloader>\n*   <https://developers.google.com/fonts/docs/getting_started>\n*   <http://tympanus.net/codrops/css_reference/font-size-adjust/>\n*   <https://www.filamentgroup.com/lab/font-events.html>\n*   <https://matuzo.at/smashing-conference-freiburg-2015-tag-1-meine-notizen/>\n*   [Smashing Book 5][33]\n\n [1]: http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/\n [2]: https://drafts.csswg.org/css-font-loading/\n [3]: https://twitter.com/bram_stein\n [4]: http://smashingconf.com/freiburg-2015/\n [5]: http://www.cssfontstack.com/\n [6]: https://www.google.com/fonts/\n [7]: https://typekit.com/\n [8]: http://www.fonts.com/de\n [9]: http://fontdeck.com/\n [10]: http://caniuse.com/#search=woff\n [11]: http://caniuse.com/#feat=woff\n [12]: http://caniuse.com/#feat=woff2\n [13]: http://www.paulirish.com/2009/fighting-the-font-face-fout/#update2011\n [14]: https://matuzo.at/wp-content/uploads/2015/09/foit.gif\n [15]: http://fontfamily.io/\n [16]: http://www.zachleat.com/web/font-family-reunion/\n [17]: http://www.brunildo.org/test/xheight.pl\n [18]: http://www.stateofwebtype.com/#font-size-adjust\n [19]: https://github.com/bramstein/fontfaceobserver/\n [20]: https://github.com/typekit/webfontloader\n [21]: http://caniuse.com/#feat=font-loading\n [22]: https://github.com/bramstein/fontloader\n [23]: https://tabatkins.github.io/specs/css-font-display/#font-display-desc\n [24]: http://www.webpagetest.org/\n [25]: https://github.com/h5bp/html5-boilerplate/blob/master/dist/.htaccess\n [26]: http://www.fontsquirrel.com/tools/webfont-generator\n [27]: http://www.fontsquirrel.com/\n [28]: https://github.com/bramstein/sfnt2woff-zopfli\n [29]: https://github.com/h5bp/server-configs-apache\n [30]: https://github.com/filamentgroup/woff2-feature-test\n [31]: https://github.com/filamentgroup/font-loading/\n [32]: https://developers.google.com/fonts/docs/getting_started\n [33]: http://www.smashingmagazine.com/2015/03/real-life-responsive-web-design-smashing-book-5/"},{"title":"Smashing Conference Freiburg 2015 Tag 1 ‚Äì Meine Notizen","slug":"smashing-conference-freiburg-2015-tag-1-meine-notizen","teaser":"Die Talks am ersten Tag der Smashing Conference 2015 in Freiburg waren wieder sehr interessant und lehrreich. Ich habe f√ºr euch, [so wie auch letztes Jahr][1], die wichtigsten Links, Zitate, Notizen, Slides und Buch-Tipps zusammengestellt.\n\nDie Notizen beinhalten unter anderem folgende Themen: Modulares Design, Touch und Pointer Events, Laden von Fonts, die WebAudio API, e-Commerce Usability Tipps und Papierprototyping.","date":"2015-09-21","year":"2015","body":"## The Designer‚Äôs Guide to Being Essential\n\n**Simon Collison**  \n[@colly][2]  \n<http://www.colly.com>\n\n### √úber die Arbeit am Computer\n\n> I almost went full TRON\n\n-Simon Collison\n\n### Ist Webdesign tot?\n\n> I move things around until they look right\n\n-Milton Glaser\n\n> Machines will never be as good as humans in moving things around until they look right.\n\n-Simon Collison\n\n### Sonstiges\n\n*   <https://louderthanten.com/> - Digitale Projekt Management Schule\n*   <http://markboultondesign.com/> - Designer\n*   <http://tools.subtraction.com/> - Welche Tools verwenden Designer aktuell\n*   <http://travisgertz.com/> - UI Desinger\n\n## Modular design at work\n\n**Alla Kholmatova**  \n[@craftui][3]  \n<http://www.craftui.com>\n\n> We are not designing pages, we are designing systems of components\n\n[-Stephen Hay][4]\n\nDie drei Komponenten des modularen Designs: **Language**, **Process** und **Experience**.\n\n### Language\n\nWenn man eine Komponente hat, die aus einem Hintergrundbild, Text und einem Button besteht, k√∂nnte man diese `.image_container` nennen. Wenn aber eine weitere Komponente dazu kommt, die mit der ersten Komponente ident ist, aber kein Bild hat, macht die Klasse `.image_container` schon keinen Sinn mehr. Entweder man erstellt eine zweite Klasse und wiederholt sich damit oder man √ºberlegt sich einen anderen Namen.\n\n*   Sinnvolle Namen √ºberlegen und Bezeichnungen allgemein halten\n*   Komponenten basierend auf ihrer Funktion auf hoher Ebene benennen. Man sollte sich √ºberlegen, was die Aufgabe dieser Komponente ist und nicht aus welchen Elementen sie besteht. In dem Beispiel oben haben sie das Element schlie√ülich `.billboard` genannt.\n*   Namen nicht auf Bereich einschr√§nken, bspw. `.header_billboard`\n\nWenn sich Elemente entwickeln, ist es OK, Namen sp√§ter anzupassen.\n\n### Process\n\n[Pattern Library][5] erstellen als Weg, modulare, wiederverwendbare Komponenten zu schaffen.\n\nPhotoshop zum probieren und testen verwenden, aber nicht f√ºr Details. Details sind dann in der Pattern Library. Eine Design√§nderung ist erst fix, wenn sie in der Pattern Library zu sehen ist.\n\nMit dem gro√üen Ganzen beginnen, dann Kernelemente ausarbeiten.\n\nIn der Pattern Library werden User Interface Elemente erstellt und nicht nur dokumentiert.\n\n### Experience\n\nNicht nur an Module an sich denken, sondern auch an Verbindungen. Rollen f√ºr Komponenten definieren. Intro, Outro, Standard- und Verbindungskomponenten. Einfache Regeln f√ºr Komponenten basierend auf ihren Rollen definieren. Verbindungskomponenten k√∂nnen beispielsweise nie am Anfang stehen, Introkomponenten eher nicht in der Mitte.  \nDen Grad der Modularit√§t legt man basierend auf den jeweiligen Voraussetzungen fest.\n\nModularit√§t ist nicht das Ziel, sondern eine Technik zu finden, die User Experience zu verbessern.\n\n### Sonstiges\n\n*   <https://www.futurelearn.com/> - Kostenlose Onlinekurse \n*   **Buchtipp:** [The little girl who lost her name][6] ‚Äì A magical, personalised story book \n*   **Buchtipp:** [Abby Covert: How to Make Sense of Any Mess: Information Architecture for Everybody][7] \n*   **Artikeltipp:** <https://www.filamentgroup.com/lab/grade-the-components.html> \n*   **Artikeltipp:** <http://daverupert.com/2013/04/responsive-deliverables/> \n\n## Getting touchy: An Introduction To Touch and Pointer Events\n\n**Patrick Lauke**  \n[@patrick_h_lauke][8]  \n<http://www.splintered.co.uk>\n\nSlides (SmashingConf): <http://de.slideshare.net/redux/getting-touchy-an-introduction-to-touch-and-pointer-events-smashing-conference-freiburg-14-september-2015>  \nSlides (alle): <https://patrickhlauke.github.io/getting-touchy-presentation/>  \nTests und Demos: <http://patrickhlauke.github.io/touch/>\n\n### Was muss ich machen damit meine Website auf Touch Devices funktioniert?\n\nNormalerweise nichts, weil Touchevents Mouseevents emulieren.  \nDas funktioniert zwar, ist aber aus zwei Gr√ºnden problematisch.\n\n#### 1\\. Verz√∂gerte Events\n\nAuf Mobile wird das Click-Event 300ms sp√§ter ausgef√ºhrt.  \nDer Grund daf√ºr ist meistens die Tatsache, dass auf Mobile Devices mit Double Tap gezoomt wird. Der Browser wartet also knapp 300ms auf den zweiten Tap bevor Click ausgef√ºhrt wird.\n\n#### 2\\. Mousemove-Event greift nicht\n\nMousemove funktioniert nicht bzw. greift es nur bei Tap.\n\n### Touch Events\n\nVon Apple entwickelt, mittlerweile [Standard][9].\n\ntouchstart (Touch beginnt)  \ntouchmove (Bewegung w√§hrend Touch)  \ntouchend (Touch endet)  \ntouchcancel (Wenn Touch unterbrochen wurde, beispielsweise wenn w√§hrend dem Touch Event ein Alert ausgef√ºhrt wird)\n\nL√∂sung f√ºr verz√∂gerte Events: touchstart oder touchend.\n\n#### Support von Touch Events checken\n\n    if('ontouchstart' in window) {\n    \n    }\n    \n\nAuf keinen Fall ontouchstart Support √ºberpr√ºfen und Touch Events nur f√ºr ‚ÄûTouch Ger√§te‚Äú anwenden und Click nur f√ºr ‚ÄûClick Ger√§te‚Äú, weil es viele Hybride gibt (PC mit Maus, aber auch Touchscreen; Androidtablet mit Maus, etc.)\n\nWenn man einen touchend und einen click-Listener erstellt, werden beide ausgef√ºhrt. Eine m√∂gliche L√∂sung daf√ºr:\n\n    /* doubled-up event listeners */\n    \n    foo.addEventListener('touchend', someFunction, false);\n    foo.addEventListener('click', someFunction, false);\n    \n    /* prevent mouse events + click as part of the common handler */\n    \n    function someFunction(e) {\n        ...\n        if (e.type == 'touchend') { e.preventDefault(); }\n        ...\n    }\n    \n\nLibraries: <https://github.com/ftlabs/fastclick>\n\nNicht einfach Touch-Versionen von Komponenten entwickeln, sondern Events kombinieren und gemeinsam entwickeln, sodass Elemente unabh√§ngig vom Ger√§t bspw. per Click, aber auch per Swipe gesteuert werden k√∂nnen.\n\n[Multitouch Demo 1][10] und [Multitouch Demo 2][11] (Am besten auf einem Tablet testen)\n\n### pointer events\n\nVereinheitlicht Events, sodass man sich nicht mehr separat um Touch- und Click-Events k√ºmmern muss. Genau genommen erweitern pointer events die Maus Events. Hat nichts mit den CSS `pointer-events` zu tun.\n\nBis IE9 gibt es nur Mouse Events, seit IE10 gibt es auch Pointer Events. Von IE entwickelt, geht bald √ºberall, au√üer in Safari. <http://caniuse.com/#search=pointer%20events>\n\n### CSS touch-action Eigenschaft\n\nMit `touch-action` kann man kontrollieren, ob *Touch Scrolling*, *Pinch Zoom* oder *Double-Tab Zoom* aktiviert sind oder nicht.\n\n[touch-action Browsersupport][12]  \n[touch-action auf MDN][13]\n\n### Sonstiges\n\n*   <https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away>\n\n## Web Fonts Performance\n\n**Bram Stein**  \n[@bram_stein][14]  \n<http://www.bramstein.com>\n\nSlides: <https://speakerdeck.com/bramstein/web-fonts-performance>\n\nEs werden 2,8 Fonts bzw. 300kb Fonts im Schnitt pro Seite geladen.\n\nWebfonts (@font-face) werden erst geladen, wenn es f√ºr die CSS Regel auch ein passendes DOM Element gibt.\n\n> Lazyloading is bad for webfonts  \n> -Bram Stein\n\n### FOUT vs. FOIT\n\n**Flash of unstyled Text** - Fallback Fonts werden gezeigt w√§hrend die Webfonts geladen werden (IE)\n\n**Flash of invisible Text** - Nichts wird gezeigt, bis der Font fertig geladen hat (Chrome, Safari, Firefox, Opera). √úberall au√üer Safari wird auch der Fallbackfont gezeigt, wenn der Webfont nicht innerhalb von 3 Sekunden geladen hat.\n\n> FOUT is progressive enhancement  \n> -Bram Stein\n\n#### font-display\n\n<https://tabatkins.github.io/specs/css-font-display/#font-display-desc>\n\nEine Eigenschaft mit der man steuern k√∂nnen wird, wie Webfonts dargestellt werden sollen, je nachdem ob sie bereits geladen sind oder nicht. Wird noch von keinem Browser unterst√ºtzt.\n\n### Webfontloader\n\n<https://github.com/typekit/webfontloader>  \nLaden von Fonts kontrollieren.\n\n#### CSS Font Loading API\n\n<http://www.w3.org/TR/css-font-loading/>  \nStandard, der Webfontloader irgendwann ersetzen wird\n\n### Dos\n\nF√ºr beste Performance CDNs verwenden, Font lange, bspw. f√ºr ein Jahr, cachen und Fonts (nur) in WOFF2 und WOFF einbinden.\n\nWOFF Support: <http://caniuse.com/#feat=woff>  \nWOFF2 Support: <http://caniuse.com/#feat=woff2>\n\n### Don'ts\n\n*   Fonts inlinen (base64)\n*   Fonts in localstorage speichern\n*   Auf das (oben beschriebene) Standardverhalten vertrauen\n\n## Making Dog Food Part Of A Balanced Diet\n\n**Toby Sterrett**  \n[@takeo][15]  \n<http://www.simple.com>\n\nCase Study zu <https://www.simple.com/>\n\nSlides: <https://speakerdeck.com/takeo/making-dog-food-part-of-a-balanced-diet>\n\nMan sollte Produkte so gestalten, wie man sie sich selber vorstellt.\n\n### Sonstiges:\n\n*   <http://www.useronboard.com/onboarding-teardowns/> - Eine Sammlung von Analysen von User Onboarding Prozessen unterschiedlicher Apps und Websites. \n\n## Hands-On Web Audio\n\n**Soledad Penad√©s**  \n[@supersole][16]  \n<http://www.soledadpenades.com>\n\n[Web Audio API Support][17]\n\nDemos: <http://webaudioapi.com/samples/>\n\n## Conversion Rate Optimization Techniques in eCommerce\n\n**Christian Holsts**  \n[@KiehnHolst][18]  \n<http://www.baymard.com>\n\n### 7 Punkte, die man in Online Shops optimieren kann\n\n#### 1\\. Guest-Checkout\n\n100% der Leute √ºbersehen den Guest-Checkout, weil die Loginfelder davon ablenken.\n\n=> L√∂sung Desktop: Linke Spalte Guest-Checkout, Rechte Spalte Login  \n=> L√∂sung Mobile: Zuerst die Optionen zeigen und dann erst bei Tap das Login Formular oder den Guest-Checkout Button.\n\nAu√üerdem sollte man die Registrierung beim Guest-Checkout erst am Ende des Checkout Prozesses anbieten, weil es so eher zu einem Kauf kommt, als wenn die Registrierung schon am Anfang passiert.\n\n#### 2\\. Fehlermeldungen\n\nFehlermeldungen sollen zeigen was genau nicht funktioniert hat. Statt ‚ÄûE-Mail ist nicht valide‚Äú ist es bspw. besser zu schreiben ‚ÄûDie E-mail muss ein @ Zeichen aufweisen‚Äú.\n\n#### 3\\. Filter\n\nFilter k√∂nnen zu stark einschr√§nken. Besser ist es die Sortierung auszubauen und Optionen als ‚ÄûSoft-Filter‚Äú zu nutzen.\n\n<http://baymard.com/blog/category-specific-sorting>\n\n#### 4\\. Weiterf√ºhrende Produkte\n\nMenschen suchen am Ende einer Produktdetailseite entweder nach Zubeh√∂r zu diesem Produkt oder nach √§hnlichen Produkten. Am besten ist es, man bietet beides in separaten Bereichen an.\n\n56% der Websites machen das nicht.\n\n#### 5\\. Contextual Search Snippets\n\nMan sollte, basierend auf den einzelnen W√∂rtern und wie viele auf das Ergebnis zutreffen, optisch unterstreichen warum das Produkt relevant ist f√ºr den Kunden. Beispielsweise indem man passende W√∂rter hervorhebt.\n\n96% der Websites machen das nicht.\n\n<http://baymard.com/blog/search-snippets>\n\n#### 6\\. Preis pro Einheit\n\nDamit KundInnen Preis-/Leistungsverh√§ltnisse besser vergleichen k√∂nnen, sollten Preise nicht nur pro Produkt, sondern zus√§tzlich auch pro Einheit angegeben werden. Bei einer Festplatte beispielsweise 50 ‚Ç¨ bzw. 0,50 Cent pro GB.\n\nNur 4% der Websites machen das.\n\n#### 7\\. Zwei ‚ÄûJetzt bestellen‚Äú Buttons\n\nViele BenutzerInnen glauben, dass die Bestellzusammenfassung schon die Bestellbest√§tigung ist. 1. weil sich die Seiten zu √§hnlich sehen und 2. weil der ‚ÄûJetzt bestellen‚Äú Button meistens nicht above the fold ist.\n\n=> L√∂sung: 2 ‚ÄûJetzt bestellen‚Äú Buttons. Einer am Anfang der Seite und einer am Ende.\n\n20% der Shops auf Desktop machen das nicht und 40% auf Mobile.\n\n## Paper Prototyping Applications\n\n**Heydon Pickering**  \n[@heydonworks][19]  \n<http://www.heydonworks.com>\n\n### Dinge, die man f√ºr Paper Prototyping ben√∂tigt:\n\n*   Viele kleine Zettel und ein paar gro√üe Zettel (A2)\n*   Tixo, (doppelseitige) Klebeb√§nder\n*   Durchsichtige Folie (f√ºr Inputfelder bspw.)\n*   Stifte in Schwarz (f√ºr die Elemente), Rot (f√ºr Fehler und Warnungen), Blau (f√ºr Links) und Gr√ºn (f√ºr ‚Äûgute Dinge‚Äú).\n\n### Dinge, die man f√ºr das Testen von Paper Prototypen ben√∂tigt:\n\n*   2 TesterInnen\n*   2 ModeratorInnen - Eine/r sieht zu und macht Notizen. Der/die andere baut die Templates neu zusammen, je nachdem was die TesterInnen machen.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/09/paperprototyping.jpg\" alt=\"Paperprototyping\" width=\"533\" height=\"350\" class=\"alignnone size-full wp-image-791\" />\n\nF√ºr den Test muss man vorher die Aufgaben und die Ausgangssituation f√ºr die TesterInnen definieren. Wichtig ist, dass den TestInnen klar ist, dass nicht sie √ºberpr√ºft werden, sondern die App.\n\n> We are testing the app, not you\n\n### Vorteile von Paper Prototyping\n\n*   Interaktiv\n*   Macht Spass\n*   Technologieunabh√§ngig\n*   Demokratisch\n\n### Sonstiges\n\n*   <http://www.docready.org/#/home>\n*   <https://twitter.com/adrianegger>\n*   <http://www.smashingmagazine.com/2015/09/creating-cel-animations-with-svg/>\n*   <https://github.com/Heydon/cel-animation>\n\n [1]: https://matuzo.at/smashing-conference-freiburg-2014-tag-1-meine-notizen/\n [2]: https://twitter.com/colly\n [3]: https://twitter.com/craftui\n [4]: http://bradfrost.com/blog/mobile/bdconf-stephen-hay-presents-responsive-design-workflow/\n [5]: http://patternlab.io/\n [6]: https://www.lostmy.name/\n [7]: http://www.amazon.de/How-Make-Sense-Any-Mess/dp/1500615994\n [8]: https://twitter.com/patrick_h_lauke\n [9]: https://www.w3.org/TR/touch-events\n [10]: http://patrickhlauke.github.io/touch/tracker/multi-touch-tracker-pointer.html\n [11]: http://patrickhlauke.github.io/touch/picture-organiser/\n [12]: http://caniuse.com/#search=touch%20action\n [13]: https://developer.mozilla.org/de/docs/Web/CSS/touch-action\n [14]: https://twitter.com/bram_stein\n [15]: https://twitter.com/takeo\n [16]: https://twitter.com/supersole\n [17]: http://caniuse.com/#search=web%20audio\n [18]: https://twitter.com/KiehnHolst\n [19]: https://twitter.com/heydonworks"},{"title":"Smashing Conference Freiburg 2015 - Ein kleines Review","slug":"smashing-conference-freiburg-2015-review","teaser":"Die vierte ‚Äì meine dritte ‚Äì Smashing Conference in Freiburg ist, wenn man die Workshops, die morgen stattfinden, nicht mitrechnet, heute zu Ende gegangen.\n\nIch werde so schnell wie m√∂glich meine Notizen und die passenden Linklisten ver√∂ffentlichen. Vorher m√∂chte ich noch ein kleines Fazit ziehen und meine Eindr√ºcke kurz zusammenfassen.","date":"2015-09-15","year":"2015","body":"## Der 0. Tag\n\nAuch dieses Jahr gab es im Rahmen der Smashing Conference 2015 wieder ein kleines *Gettogether* einen Tag bevor die Konferenz offiziell begonnen hat. Das Ganze fand in der [Hausbrauerei Feierling][1] statt und bat eine gute M√∂glichkeit, vorab schon Kollegen und KollegInnen kennenzulernen und sich mit ihnen auszutauschen.  \nLeider gab es diesmal keine 5 Minuten Talks von Konferenzbesuchern, weil sich wohl nicht gen√ºgend Menschen daf√ºr gemeldet haben. Das werden wir n√§chstes Jahr √§ndern ;).\n\n## Die Talks\n\nWie man es schon von den letzten Smashing Conferences kannte, wurden auch diesmal eine Reihe von Themen abgedeckt. Von aktuellen ‚Äûhei√üen Themen‚Äú, wie ‚ÄûWas bedeutet UX √ºberhaupt und was machen UX Designer eigentlich‚Äú oder Gedanken zur Diskussion dar√ºber, ob Webdesign tot ist oder nicht, √ºber klassische Front-End Themen, wie ‚ÄûStrukturierung und Benennung von CSS Klassen‚Äú, bis hin zu HTTPS wurde den BesucherInnen wieder eine sehr zufriedenstellende Bandbreite an Wissen und Denkanst√∂√üen geliefert.\n\n## Die Besucher\n\nAuch diesmal sind die BesucherInnen aus [verschiedenen L√§ndern][2] angereist. Ich habe mich mit Leuten aus Stuttgart, Frankfurt, Magdeburg, Br√ºssel und Salzburg unterhalten. Aus √ñsterreich waren leider nur insgesamt 8 Leute anwesend. Ich hoffe, dass sich das in den n√§chsten Jahren √§ndert.\n\n## Verpflegung und Goodies\n\nEs gab den ganzen Tag √ºber Kaffee, Tee, Softdrinks, Brote, Obst, S√º√üigkeiten und sonstige Snacks. Jede/r BesucherIn hat ein Goodiebag mit Schreibuntensilien, Stickern und einem Powerbank bekommen.  \nZus√§tzlich wurden an beiden Tagen auch noch einige B√ºcher verlost.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/09/smashing_conference_2015_goodies.jpg\" alt=\"Smashing Conference 2015 Goodies\" width=\"730\" height=\"399\" class=\"alignnone size-full wp-image-782\" />\n\n## Fazit\n\nMich hat zwar nicht jeder Talk vom Hocker gehauen, aber der Gro√üteil der Vortr√§ge war √§u√üerst interessant und lehrreich. Solche Konferenzen kosten viel Geld, aber der Mehrwert ist definitiv gegeben: Man hat die M√∂glichkeit von den Gro√üen in der Branche zu lernen und Erfahrungen mit anderen KollegInnen zu teilen und zu h√∂ren womit sie in ihrer t√§glichen Arbeit konfrontiert sind.\n\nIch hatte die letzten 2,5 Tage sehr viel Spass, habe nette Leute kennenlernt und viele neue Ideen und Denkanst√∂√üe mitgenommen. Ich bin n√§chstes Jahr auf jeden Fall wieder dabei.\n\n [1]: http://feierling.de/\n [2]: http://smashingconf.com/attendees"},{"title":"Elemente mit CSS vertikal zentrieren","slug":"elemente-mit-css-vertikal-zentrieren","teaser":"Ich melde mich aus der Sommerpause mit einem kleinen Tipp und einer Bitte zur√ºck. Ich musste gestern ein Bild innerhalb eines `div` mit fixer H√∂he vertikal zentrieren. Mein erster Gedanke war irgendeine L√∂sung mit position: relative und absolute. Ich wollte aber noch checken, ob es andere, bessere L√∂sungen gibt. Dann ist mir aber eingefallen, dass ich gar nicht erst suchen muss, weil ich die beste L√∂sung schon kenne, Flexbox.","date":"2015-09-09","year":"2015","body":"*HTML*\n\n    <div>\n        <img src=\"dasbild.jpg\" />\n    </div>\n    \n\n*CSS*\n\n    div {\n        width: 200px;\n        height: 200px;\n    \n        display: flex;\n        align-items: center;\n    }\n    \n\nMan macht das Elternelement zu einem Flexbox-Element und zentriert das Kindelement mit `align-items: center;`. Fertig. Ein Beispiel, inklusive 3 weiterer Techniken ohne Flexbox, habe ich auf [codepen][1] gestellt.\n\nUnd damit komme ich auch schon zu meiner Bitte: Fangt an mit Flexbox zu arbeiten. Die [Browserunterst√ºtzung][2] ist super und es gibt viele Lern- und Nachschlageressourcen, wie beispielsweise der [css-tricks.com Artikel][3] oder [flexboxin5.com][4].\n\n [1]: http://codepen.io/matuzo/pen/pjJLBK\n [2]: http://caniuse.com/#search=flexbox\n [3]: https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n [4]: http://flexboxin5.com/"},{"title":"Dateigr√∂√üe von Bildern ohne Verluste reduzieren","slug":"dateigroesse-von-bildern-ohne-verluste-reduzieren","teaser":"2014 waren Webseiten im Schnitt knapp [unter 2MB gro√ü][1], davon haben Bilder fast 64% ausgemacht. Die restlichen ~36% sind HTML, JS, CSS und Sonstiges. Das liegt zum einen daran, dass oft sehr viele Bilder verwendet werden, zum anderen daran, dass die Bilder nicht optimal abgespeichert worden sind. Es ist schon mal nicht schlecht, wenn man Bilder in Photoshop *f√ºr Web* speichert, aber das allein reicht nicht aus.\n\n [1]: http://www.sitepoint.com/average-page-weight-increases-15-2014/","date":"2015-06-27","year":"2015","body":"Es gibt eine Reihe von Tools, die Dateigr√∂√üen zus√§tzlich reduzieren. Dabei kann man zwischen Werkzeugen unterscheiden, die die Qualit√§t mehr oder weniger sichtbar verringern (lossy) und Werkzeugen, die Dateigr√∂√üen optimieren, ohne die Qualit√§t zu beeinflussen (lossless). Programme, die lossy komprimieren sind zum Beispiel [MozJPEG][2], [JPEGmini][3], [TinyPNG][4], [pngquant][5] oder [ImageAlpha][6].\n\nM√∂chte man die Dateigr√∂√üe reduzieren, macht es sicher Sinn eines der Tools zu verwenden. Wenn man aber keine Einbu√üen bei der Qualit√§t machen m√∂chte, sollte man zumindest [ImageOptim][7] verwenden. ImageOptim optimiert lossless, also ohne dass Pixelinformation ver√§ndert wird.\n\nImageOptim gibt es leider nur f√ºr OS X. Eine Alternative f√ºr Windows ist [FileOptimizer][8]. Eine Liste von weiteren Tools gibt es in einem [Artikel von Addy Osmani][9].\n\n## Wie viel kann man bei verlustfreier Komprimierung sparen?\n\nIch habe testweise vier Bilder vorbereitet:\n\n*   jpg, 722 KB, Foto von [PixaBay][10]\n*   jpg, 662 KB, gleiches Foto aber mit Photoshop mit 65% Qualit√§t f√ºr Web gespeichert\n*   gif, 170 KB, Screenrecording mit [LICEcap][11]\n*   png, 34 KB, Screenshot nativ mit OS X\n\nNach der Optimierung konnte ich ohne Qualit√§tsverlust insgesamt **133 KB sparen**.\n\n*   jpg, 668 KB (7,5% gespart)\n*   jpg, 624 KB (5,8%)\n*   gif, 145 KB (15%)\n*   png, 18 KB (46,3%)\n\nImageOptim kann man auf verschiedenste Arten nutzen. Vier davon habe ich mir angesehen.\n\n## ImageOptim Desktopapp\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2015/06/imageoptim.jpg\" alt=\"Dateigr√∂√üe von Bildern ohne Verluste reduzieren mit ImageOptim\" width=\"688\" height=\"286\" class=\"alignnone size-full wp-image-762\" />][12]\n\nImageOptim gibt es als Desktopapp f√ºr OS X. Es ist nicht √ºber den App Store verf√ºgbar, sondern nur √ºber die [Website des Entwicklers][7].\n\nMan √∂ffnet die App, zieht Bilder hinein und wartet bis die Optimierung abgeschlossen ist. Wichtig: Die Originalbilder bleiben nicht erhalten.\n\n[ImageOptim Website][7]\n\n## ImageOptim-CLI\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2015/06/imageoptimcli.png\" alt=\"ImageOptim-CLI\" width=\"850\" height=\"202\" class=\"alignnone size-full wp-image-766\" />][13]\n\nDas gleiche kann man auch √ºber die Kommandozeile machen ohne eine App √∂ffnen zu m√ºssen. Daf√ºr muss man ImageOptim-CLI via npm installieren.\n\n    npm install -g imageoptim-cli\n    \n\nDanach kann man die Dateien in einem Ordner mit folgendem Befehl optimieren (vorausgesetzt man hat die ImageOptim Desktopapp installiert).\n\n    imageoptim -d ~/Pfad/zu/meinem/Ordner\n    \n\nOhne irgendwelche Optionen anzugeben, ist das Ergebnis √§hnlich wie bei der Desktopapp Variante (134 KB). Hat man ImageAlpha und JPEGmini auch noch installiert, kann man diese mit ImageOptim-CLI ebenfalls ausf√ºhren.\n\n### Mit ImageAlpha\n\n    imageoptim -a -d ~/Pfad/zu/meinem/Ordner\n    \n\n### Mit ImageAlpha und JPEGmini\n\n    imageoptim -a -j -d ~/Pfad/zu/meinem/Ordner \n    \n\n[ImageOptim-CLI auf GitHub][13]\n\n## ImageOptim Workflow f√ºr Alfred\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2015/06/imageoptimalfred.png\" alt=\"ImageOptim Alfred Workflow\" width=\"324\" height=\"63\" class=\"alignnone size-full wp-image-768\" />][14]\n\nPraktischerweise gibt es auch einen [Alfred Workflow][14], der ImageOptimCLI ausf√ºhrt.\n\nNach dem [Download][15], sucht man nach Dateien oder Ordnern mit Alfred (`find Ordnername`), dr√ºckt dann `Strg` um die Actions aufzurufen und w√§hlt *Optimize Images*.\n\n[ImageOptim Workflow for Alfred app auf GitHub][14]\n\n## ImageOptim Gulp Plugin\n\nSelbstverst√§ndlich gibt es auch ein [Gulp Plugin f√ºr ImageOptim][16] (f√ºr [Grunt nat√ºrlich auch][17]), das man in den eigenen Workflow sehr einfach integrieren kann.\n\n**Installation**\n\n    npm install gulp-imageoptim --save-dev\n    \n\n**Der Task**\n\n    var gulp = require('gulp'),\n        imageOptim = require('gulp-imageoptim');\n    \n    gulp.task('imgopt', function() {\n        return gulp.src('dev/images/**/*')\n            .pipe(imageOptim.optimize())\n            .pipe(gulp.dest('dist/images'));\n    });\n    \n\nEin fertiges und funktionierendes Beispiel habe ich auf [GitHub][18] geladen.\n\n## Res√ºmee\n\n[Unsere Websites sind zu fett][19], deswegen m√ºssen wir alle M√∂glichkeiten nutzen, um Performance zu optimieren. Auch wenn man ‚Äûnur ein paar KB‚Äú gutmacht, ist es wichtig die Dateigr√∂√üe von Bildern so stark es geht zu reduzieren. Daf√ºr gibt es eine Reihe von Werkzeugen, die mit oder ohne Qualit√§tsverlust arbeiten. Das beste Ergebnis erzielt man, wenn man beides macht. Dabei ist nur die Reihenfolge wichtig: Zuerst lossy komprimieren und dann erst lossless.\n\n [1]: http://www.sitepoint.com/average-page-weight-increases-15-2014/\n [2]: https://imageoptim.com/mozjpeg\n [3]: http://www.jpegmini.com/\n [4]: https://tinypng.com/\n [5]: https://pngquant.org/\n [6]: http://pngmini.com/\n [7]: https://imageoptim.com/\n [8]: http://nikkhokkho.sourceforge.net/static.php?page=FileOptimizer\n [9]: http://addyosmani.com/blog/image-optimization-tools/\n [10]: http://pixabay.com\n [11]: http://www.cockos.com/licecap/\n [12]: http://imageoptim.com\n [13]: https://github.com/JamieMason/ImageOptim-CLI\n [14]: https://github.com/ramiroaraujo/alfred-image-optim-workflow\n [15]: https://github.com/ramiroaraujo/alfred-image-optim-workflow/blob/master/alfred-image-optim.alfredworkflow?raw=true\n [16]: https://www.npmjs.com/package/gulp-imageoptim\n [17]: https://github.com/JamieMason/grunt-imageoptim\n [18]: https://github.com/matuzo/gulp/tree/master/gulpfile_imageoptim\n [19]: https://matuzo.at/unsere-websites-sind-zu-fett-optimierung-der-frontend-performance/"},{"title":"Unsere Websites sind zu fett: Optimierung der Frontend Performance","slug":"unsere-websites-sind-zu-fett-optimierung-der-frontend-performance","teaser":"Wir befinden uns in einer Zeit, in der Performance eine sehr wichtige Rolle spielt. Zwar werden Bandbreiten immer gr√∂√üer und auf mobilen Ger√§ten bekommt man auch schon beachtliche Downloadgeschwindigkeiten zusammen, aber nicht immer hat man die beste √úbertragungsrate. Oft steht nur GPRS oder Edge (bspw. in der U-Bahn) zur Verf√ºgung oder man befindet sich in einem √∂ffentlichen WLAN, in dem die Geschwindigkeit deutlich gedrosselt wird.","date":"2015-06-23","year":"2015","body":"## Wir nutzen Ressourcen nicht bewusst genug\n\nGleichzeitig haben wir immer mehr M√∂glichkeiten mit Multimediainhalten, wie Bildern oder Videos, zu arbeiten, die nat√ºrlich sehr ins Gewicht fallen k√∂nnen. Au√üerdem sind wir es gewohnt mit fertigen Komplett- oder auch nur Teill√∂sungen zu arbeiten. Sei es *nur* eine [Colorbox][1], eine umfangreiche Library wie [jQuery][2] oder sogar ein komplettes Framework √† la [Twitter Bootstrap][3]. Das Gute daran ist, dass diese meistens *einfach funktionieren* und eine Community dahinter steht, die laufend optimiert und weiterentwickelt. Das Problem dabei ist, dass diese *Tools* meist mehr Eventualit√§ten abdecken, als f√ºr einen pers√∂nlich eigentlich notwendig. Das wirkt sich auf die Gr√∂√üe von Javascript- und CSS-Dateien aus, und damit auch auf die Performance und letztendlich auf die Usability und Accessibility. Dazu kommt, dass wir uns darauf verlassen, dass die EntwicklerInnen alles richtig gemacht haben und nicht nur die Technik und das Design passt, sondern auch die Performance.\n\n## Die Gr√∂√üe von Webpages ist 2014 um 15% gestiegen\n\nWebpages (also Seiten, nicht komplette Websites!) sind im [Durchschnitt knapp 2 Megabyte schwer][4] und haben damit ein eindeutiges Gewichtsproblem. Im Vergleich zu 2013 ist die Durchschnittsgr√∂√üe einer Seite um 15% gestiegen.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2015/05/page_weight_2014.png\" alt=\"Page Weight 2014\" width=\"554\" height=\"233\" class=\"aligncenter size-full wp-image-719\" />][4]\n\nIch m√∂chte mich in einer Reihe von Artikel speziell mit diesem Thema, also Frontend Performance, besch√§ftigen und herausfinden, was man machen kann, um unseren Websites beim abspecken zu helfen. Den Anfang mache ich mit CSS und der Frage wie man ungenutztes CSS los werden kann.\n\n## Artikel zum Thema ‚ÄûFrontend Performanceoptimierung‚Äú\n\n### [Webfont Performance, FOUT, FOIT und Usability][5]\n\nEs gibt verschiedene Techniken Webfonts zu laden. Dieser Artikel stellt einige davon vor und beschreibt wie man die Webfont Performance optimieren kann. [Beitrag lesen][5]\n\n### [Ungenutztes CSS entfernen mit uncss (gulp)][6]\n\nDie Gr√∂√üe von CSS-Dokumenten ist 2014 im Durchschnitt um 24% gestiegen. In diesem Artikel lernst du, wie man mit gulp ungenutztes CSS entfernen kann.  \n[Beitrag lesen][6]\n\n### [Dateigr√∂√üe von Bildern ohne Verluste reduzieren][7]\n\nMit ImageOptim kann man die Dateigr√∂√üe von Bildern reduzieren, ohne die Qualit√§t zu verschlechtern. Es ist unter anderem als App und Gulp-Plugin verf√ºgbar. [Beitrag lesen][7]\n\n [1]: http://www.jacklmoore.com/colorbox/\n [2]: jquery.com\n [3]: http://getbootstrap.com/\n [4]: http://www.sitepoint.com/average-page-weight-increases-15-2014/\n [5]: http://matuzo.at/webfont-performance/\n [6]: http://matuzo.at/ungenutztes-css-entfernen-mit-uncss-gulp/\n [7]: http://matuzo.at/dateigroesse-von-bildern-ohne-verluste-reduzieren/"},{"title":"Ungenutztes CSS entfernen mit uncss (gulp)","slug":"ungenutztes-css-entfernen-mit-uncss-gulp","teaser":"Die Gr√∂√üe von CSS-Dokumenten ist [2014 im Durchschnitt um 24% von 46kb auf 57kb][1] gestiegen. Ein Anstieg um fast ein Viertel der Gesamtgr√∂√üe ist echt nicht ohne. Nat√ºrlich k√∂nnte man sagen, dass sich CSS stark weiterentwickelt hat und wir viel mehr M√∂glichkeiten haben Aufgaben, die wir vorher mit Javascript gel√∂st h√§tten, mit CSS umzusetzen. Leider ist nur die Gr√∂√üe von Javascript-Dokumenten ebenfalls gestiegen, um 7% im Schnitt.\n\n> What surprises me most is CSS‚Äôs 11Kb rise. Responsive Web Design and CSS3 animations could account for some of this increase but there‚Äôs not been a drop in JavaScript.\n\n<http://www.sitepoint.com/average-page-weight-increases-15-2014/>\n\nEs handelt sich hierbei um eine negative Entwicklung der wir zumindest ein bisschen entgegenwirken k√∂nnen. Zuerst m√ºssen wir erkennen, ob und warum unsere CSS Dateien so gro√ü sind und schlie√ülich was wir dagegen tun k√∂nnen.\n\n [1]: http://www.sitepoint.com/average-page-weight-increases-15-2014/","date":"2015-06-23","year":"2015","body":"## Das Problem\n\nDas gr√∂√üte Problem stellen meist nicht eine Handvoll ungenutzter Klassen im eigenen CSS dar, sondern das CSS externer Plugins, Libraries oder Frameworks. Wie viel nutzt man tats√§chlich von all den Eigenschaften, die in Foundation oder Bootstrap definiert sind? Oftmals nur sehr wenig. Auf matuzo.at beispielsweise verwende ich ein kostenloses Theme, das auf Bootstrap aufbaut. Von den **111kb**, die allein das bootstrap CSS-Dokument gro√ü ist, nutze ich nur **9%, also knapp 10kb**. Der Rest liegt nur da und verschlechtert die Performance und damit auch die Usability meiner Website.\n\n## Herausfinden wie viel CSS nicht genutzt wird\n\nIn Chrome kann man recht einfach erfahren, wie viel des eingebunden CSS nicht verwendet wird. Daf√ºr √∂ffnet man die DevTools, wechselt auf den Audits-Tab und klickt unten auf *Run*. Unter *Web Page Performance* gibt es dann einen Punkt *Remove unused CSS rules*, den man aufklappen kann. Da sind die einzelnen CSS Dateien und die jeweilige Prozentzahl des ungenutzten CSS aufgelistet.\n\n#### DevTools √∂ffnen\n\nDie DevTools lassen sich mit Command + ALT + I √∂ffnen.\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-alt\" title=\"Alt\">‚å•</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">I</span>\n</div>\n\n#### Audits-Tab in den Dev Tools\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/06/google_chrome_audits_tab.png\" alt=\"Google Chrome - Audits Tab\" width=\"851\" height=\"342\" class=\"alignnone size-full wp-image-746\" />\n\n## Die L√∂sung: Ungenutztes CSS entfernen\n\nDie oder zumindest eine L√∂sung ist [uncss][2]. *uncss* durchforstet die Dokumente einer Website und entfernt ungenutzte CSS Regeln aus den Stylesheets. Dabei checkt es welche der definierten Regeln in den Dokumenten vorkommen. Sogar durch Javascript hinzugef√ºgtes CSS wird dabei beachtet.\n\n[uncss][2] kann man unterschiedlich nutzen:\n\n*   [node package][2]\n*   [gulp-uncss][3]\n*   [grunt-uncss][4]\n*   [broccoli-uncss][5]\n\nFolgend habe ich ein Beispiel mit [gulp-uncss][3] vorbereitet.\n\n<span class=\"tipp\"><strong>Hinweis:</strong> Dieser Beitrag deckt die Installation von gulp und die Grundlagen der Benutzung nicht ab. Diese habe ich aber <a href=\"https://matuzo.at/gulp-grundlagen-arbeitsablaeufe-mit-gulp-automatisieren/\">hier</a> beschrieben.</span>\n\n## gulp-uncss: Installation\n\n[gulp-uncss][3] kann man via [npm][6] installieren und als dev-dependency speichern.\n\n    npm install gulp-uncss --save-dev\n    \n\n## gulp-uncss: Task erstellen\n\nZu Beginn binden wir *gulp* und *gulp-uncss* ein und erstellen einen einfachen Task, den wir *uncss* nennen.\n\n    var gulp = require('gulp'),\n        uncss = require('gulp-uncss');\n    \n    gulp.task('uncss', function() {\n    \n    });\n    \n\nDer Task soll alle CSS Dateien unseres Projekts durchforsten. Daf√ºr kann man entweder ein Array mit bestimmten Dateien definieren oder Ordner, die nach CSS Dateien durchsucht werden sollen.\n\n#### Array mit Dateien √ºbergeben\n\n    return gulp.src(['dev/site.css', 'dev/plugin.css'])\n    \n\n#### Ordner nach Dateien mit der Endung .css durchsuchen\n\n    return gulp.src(dev/*.css')\n    \n\nDanach f√ºhren wir *uncss* aus und definieren mit `gulp.dest` den Ordner in den die optimierten Dateien verschoben werden sollen.\n\n    var gulp = require('gulp'),\n        uncss = require('gulp-uncss');\n    \n    gulp.task('uncss', function() {\n        return gulp.src('dev/*.css')\n            .pipe(uncss())\n            .pipe(gulp.dest('dist'));\n    });\n    \n\nDer Task w√ºrde, wenn man ihn ausf√ºhrt, zu Fehlern f√ºhren, weil man *uncss* mitteilen muss, welche Dateien durchsucht werden sollen. Das macht man indem man ein Array mit den Dateinamen √ºbergibt.\n\n    .pipe(uncss( {\n        html: ['*.html'],\n    }))\n    \n\n`*.html` steht f√ºr alle Dateien mit der Endung `.html` im root-Ordner.  \nUnd das war es eigentlich schon. Alle CSS-Dateien im `dev` Ordner werden durchsucht und wenn es CSS Eigenschaften gibt, die im HTML nicht aufgerufen werden, werden sie aus dem optimierten CSS-Dokument, das im `dist` Ordner gespeichert wird, entfernt.\n\n## Besonderheiten und Einstellungen\n\n### Javascript Dateien\n\nBei gr√∂√üeren Projekten kann es notwendig sein, dass man dem Task zus√§tzliche Zeit geben muss, um das Javascript auszuf√ºhren. Daf√ºr kann man mit `timeout` in Millisekunden angeben wie lange man warten m√∂chte bis das Javascript verarbeitet worden ist.\n\n    .pipe(uncss( {\n        html: ['*.html'],\n        timeout: 2000\n    }))\n    \n\nWenn man Javascript-Dateien mit relativen Pfaden einbindet, werden sie nicht durchsucht. Eine L√∂sung, die ich gefunden habe, ist, dass man der `html`-Option zus√§tzlich zu den HTML-Dateien auch noch den absoluten Pfad zum Projekt √ºbergibt. So werden auch die eingebunden Javascript-Dateien durchsucht.\n\n    html: ['*.html', 'http://localhost/meinprojekt'],\n    \n\nCSS-Eigenschaften, die nur bei Userinteraktion, also beispielweise bei `click`, Anwendung finden, werden nicht beachtet. Mann muss explizit angeben, dass diese bei der Optimierung ignoriert werden sollen.\n\n### Eigenschaften ignorieren\n\nEs gibt zwei M√∂glichkeiten Eigenschaften zu ignorieren.\n\n#### Im CSS\n\n    .klasse19 { background: green;}\n    /* uncss:ignore */\n    .klasse20 { background: green;}\n    .klasse21 { background: green;} \n    \n\nMit Hilfe des Kommentars `/* uncss:ignore */` wird die Klasse `.klasse20` ins CSS geschrieben, selbst wenn sie nirgends aufgerufen wird.\n\n#### Im gulp Task\n\nMan kann auch direkt im gulp Task definieren, welche Deklarationen auf jeden Fall eingebunden werden sollen. Entweder man √ºbergibt den kompletten Selektor oder eine Regular Expression.\n\n    ignore: ['h1', /^.js-/]\n    \n\n`/^.js-/` w√ºrde alle Klassen ignorieren, die mit `.js-` beginnen.\n\nEine komplette Liste der Einstellungen gibt es hier: <https://github.com/giakki/uncss#from-the-command-line>\n\n## Das fertige Beispiel\n\n    var gulp = require('gulp'),\n        uncss = require('gulp-uncss');\n    \n    gulp.task('uncss', function() {\n        return gulp.src('dev/*.css')\n            .pipe(uncss({\n                html: ['*.html', 'http://localhost/meinprojekt'],\n                ignore: ['h1', /^.js-/]\n            }))\n            .pipe(gulp.dest('dist'));\n    });\n    \n\nEine funktionierende Demo habe ich auf Github geladen. Um sie selber zu testen, muss man im Terminal mit `cd` in den Projektordner wechseln und dann mit `npm install` die Dependencies herunterladen. Bevor man den Task mit `gulp uncss` ausf√ºhrt, muss man der Variable `pathToProject` den absoluten Pfad zum Projektordner √ºbergeben.\n\n<div class=\"demodownload\">\n  <a href=\"https://github.com/matuzo/gulp/archive/master.zip\" class=\"cta-button\">Download des Beispiels</a>\n</div>\n\n## Fazit\n\nZwar handelt es sich hier nur um ein sehr einfaches Beispiel, aber man sieht, dass es durchaus Sinn machen kann mit [uncss][2] zu arbeiten. Wenn einem Performance wichtig ist ‚Äì und das sollte es ‚Äì muss man diesen Schritt fast zwingend in den eigenen Workflow integrieren. Was man mit uncss bewirken kann sieht man au√üerdem auch in [Addy Osmanis Talk auf der CSSconf EU][7] (Die passenden Slides dazu gibt es auf [speakerdeck.com][8]).\n\n## Credits\n\nHeader-Foto gefunden auf [Pixabay][9].\n\n [1]: http://www.sitepoint.com/average-page-weight-increases-15-2014/\n [2]: https://github.com/giakki/uncss\n [3]: https://github.com/ben-eb/gulp-uncss\n [4]: https://github.com/addyosmani/grunt-uncss\n [5]: https://github.com/sindresorhus/broccoli-uncss\n [6]: http://npmjs.com\n [7]: http://www.youtube.com/embed/FEs2jgZBaQA\n [8]: https://speakerdeck.com/addyosmani/css-performance-tooling\n [9]: https://pixabay.com/en/scale-market-measure-food-weighing-690839/"},{"title":"Gulp Grundlagen: Arbeitsabl√§ufe mit gulp automatisieren","slug":"gulp-grundlagen-arbeitsablaeufe-mit-gulp-automatisieren","teaser":"Seit knapp drei Jahren ist Task-Automatisierung ein ganz gro√ües Thema. Seinen Anfang hat alles mit [grunt][1] genommen. Bald folgten unter anderem auch [gulp][2] und [brunch][3]. Ganz egal f√ºr welches Tool man sich entscheidet, die Automatisierung von Arbeitsabl√§ufen kann durchaus Sinn machen.  \nIn einer Reihe von Artikeln will ich euch [gulp][2] und meine bevorzugten [gulp-Plugins][4] vorstellen. Alle gulpfiles, die ich in diesem Rahmen erstellen, teile ich auch auf [GitHub][5].\n\n### Was dieser Artikel abdeckt\n\n*   Gulp Grundlagen\n*   Was ist gulp?\n*   gulp installieren\n*   gulp in einem Projekt integrieren\n*   gulp-Plugins finden und installieren\n\nAu√üerdem erstellen wir ein Projekt bei dem Less zu CSS kompiliert wird. Das fertige Beispiel kann man [hier][6] downloaden.\n\n [1]: http://gruntjs.com/\n [2]: http://gulpjs.com/\n [3]: http://brunch.io/\n [4]: http://gulpjs.com/plugins/\n [5]: https://github.com/matuzo/gulp\n [6]: http://matuzo.at/beispiele/gulp/meinprojekt_fertig.zip","date":"2015-06-17","year":"2015","body":"## Was ist gulp?\n\nGulp ist ein build system (dt. Erstellungsprozess), das es m√∂glich macht gewisse Aufgaben beim Erstellen von Websites zu automatisieren. Der Sinn dahinter ist, dass man sich auf die eigentliche Entwicklung der Website, App, etc. konzentrieren kann, ohne sich st√§ndig um das *Rundherum* k√ºmmern zu m√ºssen. Zum *Rundherum* geh√∂ren Dinge wie Javascript oder CSS-Dateien zusammenfassen und minifyen, Browser refreshen, Less oder Sass kompilieren, unn√∂tiges CSS entfernen, Sprites erstellen, usw.\n\nWie bereits erw√§hnt, gibt es verschiedene Werkzeuge, die diese Aufgaben erledigen k√∂nnen. Ich habe bereits mit [grunt][1] gearbeitet, bin aber bei [gulp][2] geblieben, weil mir die Syntax ganz einfach am sympathischsten ist.\n\nDie Grundlage f√ºr das Automatisieren von Arbeitsabl√§ufen bietet gulp.js an sich. Die einzelnen Aufgaben werden von Plugins erledigt, die man nach belieben installieren kann.\n\n## Gulp installieren\n\n<span class=\"tipp\">Hinweis: F√ºr die Installation von gulp muss <a href=\"https://www.npmjs.org/\">npm</a> installiert sein. Wie man <a href=\"https://www.npmjs.org/\">npm</a> auf OSX 10.9. installiert, habe ich in dem Artikel <a href=\"http://matuzo.at/npm-node-package-manager-auf-os-x-10-9-mavericks-installieren/\">‚Äûnpm (node package manager) auf OS X 10.9. Mavericks installieren¬°</a> beschrieben (gilt auch f√ºr OSX 10.10.).</span>\n\nZuerst muss gulp global installiert werden. Man √∂ffnet die Kommandozeile (Terminal, iTerm,...) und gibt folgendes ein:\n\n    npm install --global gulp\n    \n\nDamit ist gulp global auf den Rechner verf√ºgbar.\n\n## Gulp in einem Projekt integrieren\n\nBevor wir die einzelnen Schritte durchgehen, empfehle ich meine [vorbereitete Ordnerstruktur][7] herunter zu laden.\n\nDurch die globale Installation kann gulp nun genutzt werden. Um Aufgaben mit gulp erstellen zu k√∂nnen muss im Projektordner ein Dokument namens `gulpfile.js` erstellt werden. Ich mache das gerne gleich √ºber den Terminal, da man ihn sowieso in weiterer Folge f√ºr das Ausf√ºhren der Aufgaben ben√∂tigt. Wenn man sich noch nicht im Projektordner befindet, muss man mit `cd` hinnavigieren.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/06/gulpfile_erstellen.gif\" alt=\"Gulp Grundlagen: gulpfile.js erstellen\" width=\"685\" height=\"147\" class=\"size-full wp-image-731\" />\n\n### gulpfile.js erstellen\n\nAuf OSX kann man Dateien mit `touch dateiname` erstellen.\n\n    cd /pfad/zu/meinem/projektordner\n    touch gulpfile.js\n    \n\nOder auf Windows:\n\n    cd /pfad/zu/meinem/projektordner\n    echo. 2> gulpfile.js\n    \n\n### gulp lokal installieren\n\nDamit wir gulp aufrufen k√∂nnen, m√ºssen wir es noch lokal installieren und es mit `--save-dev` in den `devDependencies` der `package.json` Datei speichern. Mit dem Zusatz `--save-dev` legen wir fest, dass gulp f√ºr die Entwicklung dieses Projekts eine Voraussetzung ist.\n\n    npm install gulp --save-dev\n    \n\n<span class=\"tipp\">Hinweis: Eine <code>package.json</code> Datei l√§sst sich √ºber den Terminal mit <code>npm init</code> erstellen. Die Eingabeaufforderungen, die dann erscheinen, kann man ruhig mit Enter best√§tigen ohne etwas auszuf√ºllen.</span>\n\nDadurch wird automatisch im Projektordner ein `node_modules` Ordner erstellt. In diesem Ordner befindet sich nun gulp und in weiterer Folge alle Plugins.\n\n### gulp Aufgaben (tasks) erstellen\n\nNachdem wir nun ein gulpfile erstellt und gulp lokal installiert haben, m√ºssen wir gulp im gulpfile einbinden. Das machen wir in dem wir eine Variable `gulp` erstellen und ihr zuweisen, dass gulp geladen werden soll.\n\n    var gulp = require('gulp');\n    \n\nDanach kann man schon den ersten Task erstellen.\n\n    gulp.task('default', function() {\n        console.log('Test');\n    });\n    \n\n`gulp.task` √ºbergibt man zwei Parameter, den Namen des Tasks und eine anonyme Funktion mit der Funktionalit√§t. F√ºhrt man dann in der Kommandozeile `gulp` aus, sieht man wie das Wort ‚ÄûTest‚Äú ausgegeben wird.\n\n<div class=\"demodownload\">\n  <a href=\"http://matuzo.at/beispiele/gulp/meinprojekt_v2.zip\" class=\"cta-button\">Download aktueller Stand</a>\n</div>\n\n## Gulp-Plugins finden und installieren\n\nEine einfache Textausgabe ist in den meisten F√§lle wohl relativ nutzlos. Deswegen wollen wir jetzt eine sinnvollere Aufgabe erstellen. Wenn wir zum Beispiel less kompilieren m√∂chten, m√ºssen wir daf√ºr ein Plugin installieren. Plugins findet man auf der [Gulp Website][4] oder auch auf der [npm Website][8].\n\nEin Plugin, das less kompiliert ist beispielsweise [gulp-less][9]. Die Installation und Nutzung ist auf der [gulp-less npm Seite][9] und auf [GitHub][10] beschrieben.\n\n### Less mit gulp-less kompilieren\n\nDie Ordnerstruktur unseres Projektordners sollte aktuell so aussehen:\n\n    meinprojekt\n        - css\n        - gulpfile.js\n        - less\n            - styles.less\n        - node_modules\n            - gulp\n        - package.json\n    \n\nF√ºr die Installation des Plugins muss man sich in der Kommandozeile wieder (oder immer noch) im Projektordner befinden und gulp-less installieren und als *Dev-Dependency* speichern.\n\n    npm install gulp-less --save-dev\n    \n\nIm n√§chsten Schritt muss gulp-less, √§hnlich wie gulp, eingebunden werden.\n\n    var gulp = require('gulp'),\n        less = require('gulp-less');\n    \n\nDann muss wieder ein Task definiert werden:\n\n    gulp.task('lesszucss', function() {\n        return gulp.src('less/styles.less')\n            .pipe(less())\n            .pipe(gulp.dest('css'))\n    });\n    \n\n**In diesem Task passieren drei Dinge:**\n\n    return gulp.src('styles.less')\n    \n\n...gibt an welche less Datei kompiliert werden soll.\n\n    .pipe(less())\n    \n\n...`.pipe()` ‚Äûst√ºckelt‚Äú eine Aufgabe an diese Datei. In diesem Fall die Kompilierung eben dieser Datei.\n\n    .pipe(gulp.dest('css'))\n    \n\n...h√§ngt eine weitere Aufgabe an. Und zwar wird die kompilierte CSS-Datei mit `gulp.dest()` in den `css` Ordner verschoben.\n\nF√ºhrt man dann in der Kommandozeile `gulp lesszucss` aus, wird less kompiliert und styles.css im css-Ordner erstellt.\n\n<div class=\"demodownload\">\n  <a href=\"http://matuzo.at/beispiele/gulp/meinprojekt_fertig.zip\" class=\"cta-button\">Download fertiges Beispiel</a>\n</div>\n\nDas war es auch schon. Innerhalb k√ºrzester Zeit haben wir gulp installiert und einen task geschrieben, der Less zu CSS kompiliert. Der Ablauf f√ºr das Installieren weiterer Plugins sieht √§hnlich aus: Plugin suchen, herunterladen und als *Dev-Dependency* speichern, Task schreiben und ausf√ºhren.\n\n## Zusammenfassung\n\nWie man sieht, ist gulp einfach und schnell zu installieren und auch verh√§ltnism√§√üig einfach anzuwenden. Das Kompilieren von Less ist zwar eine Aufgabe, die auch andere Tools oder Programme erledigen k√∂nnen, aber dieser Task sollte lediglich nur ein Beispiel daf√ºr sein, was mit gulp m√∂glich ist und wie der grunds√§tzliche Arbeitsablauf aussieht.  \nWie bereits erw√§hnt gibt es weitere Beispiele in meinem [GitHub Repo][5].\n\n [1]: http://gruntjs.com/\n [2]: http://gulpjs.com/\n [3]: http://brunch.io/\n [4]: http://gulpjs.com/plugins/\n [5]: https://github.com/matuzo/gulp\n [6]: http://matuzo.at/beispiele/gulp/meinprojekt_fertig.zip\n [7]: http://matuzo.at/beispiele/gulp/meinprojekt_v1.zip\n [8]: https://www.npmjs.org/search?q=gulp\n [9]: https://www.npmjs.org/package/gulp-less/\n [10]: https://github.com/plus3network/gulp-less"},{"title":"Standortkoordinaten simulieren mit den Dev Tools in Chrome","slug":"standortkoordinaten-simulieren-mit-den-dev-tools-in-chrome","teaser":"Vor Kurzem ist mir in [Chromes Dev Tools][1] aufgefallen, dass man, neben dem Ausgabeger√§t und Medium, auch die Standortkoordinaten simulieren kann. Wenn man beispielsweise mit [HTML5 Geolocation][2] arbeitet und die Location der Benutzer erfasst, kann man alternative Koordinaten angeben, um so verschiedene Locations zu testen. Weil das ein gar nicht so unpraktisches Feature ist, habe ich ein kleines Beispiel vorbereitet.\n\n## Was dieser Artikel abdeckt\n\n*   Google Maps mit der Google Maps API einbinden\n*   Koordinaten einer Adressen herausfinden\n*   Location mit HTML5 Geolocation erfassen\n*   Marker in einer Google Map setzen\n*   Standortkoordinaten simulieren\n\n [1]: https://developer.chrome.com/devtools\n [2]: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation","date":"2015-05-24","year":"2015","body":"<div class=\"demodownload\">\n  <a href=\"https://matuzo.at/tests/geolocation/demo/\" class=\"cta-button\" target=\"_blank\">Demo</a> <a href=\"https://matuzo.at/tests/geolocation/geolocation.zip\" class=\"cta-button\">Download</a>\n</div>\n\n<span class=\"tipp\"><strong>Hinweis:</strong> Wenn du die Dateien herunterl√§dst, musst du sie auf einen (virtuellen) Server laden, da Geolocation sonst in manchen Browsern (bspw. Chrome ) nicht funktioniert.</span>\n\n## Google Maps mit der Google Maps API einbinden\n\nZu Beginn legen wir ein HTML Dokument an, binden Google Maps ein und initialisieren eine neue Map. Zus√§tzlich muss der Map auch noch H√∂he und Breite zugewiesen werden, weil sie sonst nicht angezeigt wird.\n\n#### H√∂he und Breite angeben\n\n    .map { \n      width: 100%; \n      height: 400px; \n    }\n    \n\n#### Button erstellen, Container f√ºr die Map definieren und Google Maps API laden\n\n    <button class=\"getlocation\">Location erfassen!</button>\n    \n    <div class=\"map\"></div>\n    \n    <script src=\"https://maps.googleapis.com/maps/api/js?v=3.exp\"></script>\n    \n\n#### Einstellungen festlegen und Map einbinden\n\n    var map;\n    \n    function initialize() {\n      /* Einstellungen f√ºr die Map */\n      var optionen = {\n        /* Je h√∂her die Zahl, desto n√§her wird rangezoomt */\n        zoom: 17,\n        /* Koordinaten, die die Mitte der Map definieren */\n        center: new google.maps.LatLng(48.229433,16.371475)\n      };\n    \n      /* Map-Container ausw√§hlen, Map einbinden und Eigenschaften anwenden */\n      map = new google.maps.Map(document.querySelector('.map'), optionen);\n    }\n    \n\n#### Sobald die Seite geladen hat, initialize Funktion aufrufen\n\n    google.maps.event.addDomListener(window, 'load', initialize);\n    \n\n#### Alles zusammen\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Geolocation</title>\n        <style>\n          .map {\n            width: 100%; \n            height: 400px;\n          }\n        </style>\n      </head>\n      <body>\n        <button class=\"getlocation\">Location erfassen!</button>\n        <div class=\"map\"></div>\n    \n        <script src=\"https://maps.googleapis.com/maps/api/js?v=3.exp\"></script>\n        <script>\n          var map;\n    \n          function initialize() {\n            var optionen = {\n              zoom: 17,\n              center: new google.maps.LatLng(48.229433,16.371475)\n            };\n    \n            map = new google.maps.Map(document.querySelector('.map'), optionen);\n          }\n          google.maps.event.addDomListener(window, 'load', initialize);\n        </script>\n      </body>\n    </html>\n    \n\n<div class=\"demodownload\">\n  <a href=\"https://matuzo.at/tests/geolocation/geolocation_schritt1.html\" class=\"cta-button\" download>Schritt 1 (html) downloaden</a>\n</div>\n\n## Koordinaten einer Adressen herausfinden\n\nDie Map haben wir zentriert, indem wir bestimmte Koordinaten √ºbergeben haben.\n\n    center: new google.maps.LatLng(48.229433,16.371475)\n    \n\nKoordinaten einer Adresse lassen sich sehr einfach herausfinden. Auf [latlong.net ][3] gibt man eine Adresse ein und bekommt die passenden Koordinaten zur√ºck. Auf der Website kann man au√üerdem auch Koordinaten eingeben und eine Adresse zur√ºckbekommen.\n\n## Location mit HTML5 Geolocation erfassen\n\nNachdem wir jetzt eine Map haben, wollen wir im n√§chsten Schritt die Standortkoordinaten des Benutzers erfassen und einen Marker setzen, wenn auf den Button geklickt wird.\n\n#### Abfragen, ob der Browser Geolocation beherrscht\n\n    if(navigator.geolocation) {\n      console.log(\"Lade Koordinaten\");\n    } else {\n      console.log(\"Ihr Browser beherrscht Geolocation leider nicht\");\n    }\n    \n\n#### Standortkoordinaten abfragen\n\n    navigator.geolocation.getCurrentPosition(function(position) {\n      console.log(\"Koordinaten gefunden\");\n    }, \n    \n\n#### Wenn die Location nicht gefunden werden konnte\n\n    function() {\n      console.log(\"Geolocation Service nicht verf√ºgbar\");\n    });    \n    \n\n#### Alles zusammen\n\n    document.querySelector('.getlocation').addEventListener('click', function() {\n      if(navigator.geolocation) {\n        console.log(\"Lade Koordinaten\");\n    \n        navigator.geolocation.getCurrentPosition(function(position) {\n          console.log(\"Koordinaten gefunden\");\n        }, function() {\n          console.log(\"Geolocation Service nicht verf√ºgbar\");\n        });\n      } else {\n        console.log(\"Ihr Browser beherrscht Geolocation leider nicht\");\n      }\n    })\n    \n\nDie Location wird also mit `navigator.geolocation.getCurrentPosition()` erfasst. Der Methode kann man drei Parameter √ºbergeben (erfolg, fehler, optionen).\n\n    navigator.geolocation.getCurrentPosition(function(position) {\n        console.log(position);\n    }, function(error) {\n        console.log(error)\n    }, {\n        option: wert\n    });\n    \n\nDetails zur Anwendung von Geolocation findet man im [Mozilla Developer Network][2].\n\n<div class=\"demodownload\">\n  <a href=\"https://matuzo.at/tests/geolocation/geolocation_schritt2.html\" class=\"cta-button\" download>Schritt 2 (html) downloaden</a>\n</div>\n\n## Marker in einer Google Map setzen\n\nSobald wir die Koordinaten erfasst haben, √ºbergeben wir sie an Maps und setzen einen Marker.\n\n#### Bei Erfolg Koordinaten an Maps √ºbergeben\n\n    navigator.geolocation.getCurrentPosition(function(position) {\n      var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n    }\n    \n\n#### Neuen Marker an der ermittelten Position setzen\n\n    var marker = new google.maps.Marker({\n      position: pos,\n      map: map\n    });\n    \n\n#### Map zentrieren\n\n    map.setCenter(pos); \n    \n\n#### Alles zusammen:\n\n    navigator.geolocation.getCurrentPosition(function(position) {\n      var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n    \n      var marker = new google.maps.Marker({\n        position: pos,\n        map: map\n      });\n    \n      map.setCenter(pos);\n    }\n    \n\nWenn man nun auf den Button klickt, wird man beim ersten Mal gefragt, ob man die Standortkoordinaten auch wirklich teilen will. Wenn man das best√§tigt, wechselt die Map zu den definierten Koordinaten und setzt einen Marker.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/05/location_check.jpg\" alt=\"Geolocation - Location check\" width=\"407\" height=\"200\" class=\"alignnone size-full wp-image-703\" />\n\n<div class=\"demodownload\">\n  <a href=\"https://matuzo.at/tests/geolocation/geolocation_schritt3.html\" class=\"cta-button\" download>Schritt 3 (html) downloaden</a>\n</div>\n\n## Standortkoordinaten simulieren\n\nM√∂chte man nun andere Standortkoordinaten simulieren, muss man die Dev Tools √∂ffnen, den *drawer* anzeigen und auf den Emulation-Tab wechseln.\n\n#### Dev Tools √∂ffnen\n\nDie Dev Tools lassen sich mit Command + ALT + I √∂ffnen.\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-alt\" title=\"Alt\">‚å•</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">I</span>\n</div>\n\n#### Emulation Tab\n\nIn den Dev Tools klickt man rechts oben auf das Icon neben dem Zahnrad, wechselt zum *Emulation*-Tab und zieht den Drawer nach oben. Zus√§tzlich muss man noch die Emulation togglen, was mit einem Klick auf das Smartphone Icon rechts neben der Lupe erledigt ist.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/05/emulation.jpg\" alt=\"Google Chrome Emulation Tab\" width=\"648\" height=\"210\" class=\"alignnone size-full wp-image-704\" />\n\n#### Alternative Standortkoordinaten\n\nIm Emulation-Tab gibt es links ein Men√º und unter dem Untermen√ºpunkt *Sensors* kann man die Standortkoordinaten simulieren, indem man die Checkbox *Emulate geolocation coordinates* aktiviert und die geografische Breite (lat) und L√§nge (lon) angibt.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/05/emulation_latlong.jpg\" alt=\"Google Chrome Standortkoordinaten simulieren\" width=\"648\" height=\"402\" class=\"alignnone size-full wp-image-705\" />\n\nKlickt man jetzt auf den *Location erfassen*-Button wird nicht mehr die echte Position genommen, sondern die angegebene. Alternativ kann man mit der *Emulate position unavailable* Checkbox auch testen, was passiert, wenn die Location nicht erfasst werden konnte.\n\n## Fazit\n\nDie Arbeit mit der Google Maps API und Geolocation macht nicht nur Spass, sondern ist auch nicht sonderlich kompliziert, wenn man sich ein bisschen eingearbeitet hat. Zus√§tzlich wird uns die Arbeit durch die M√∂glichkeiten, die die Dev Tools bieten, erleichtert.\n\n## Quellen\n\n<https://developers.google.com/maps/documentation/javascript/examples/map-simple?hl=de>  \n<http://diveintohtml5.info/geolocation.html>  \n<https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation>\n\n [1]: https://developer.chrome.com/devtools\n [2]: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation\n [3]: http://www.latlong.net/convert-address-to-lat-long.html"},{"title":"Zwei Dateien in Sublime Text vergleichen","slug":"zwei-dateien-in-sublime-text-vergleichen","teaser":"Oft hat man zwei Versionen einer Datei und m√∂chte schnell herausfinden, ob es Unterschiede gibt und an welcher Stelle im Dokument sich diese befinden. In Sublime Text kann man zwei Dateien sehr einfach vergleichen.","date":"2015-04-22","year":"2015","body":"## So vergleicht man zwei Dateien in Sublime Text\n\n1.  Den Ordner in dem sich die beiden zu vergleichenden Dateien befinden in Sublime Text √∂ffnen.\n2.  Beide Dateien mit CMD bzw. Strg. + Klick markieren.\n3.  Rechtsklick auf eine der markierten Dateien und ‚ÄûDiff Files‚Ä¶‚Äú ausw√§hlen.\n\nDadurch wird ein diff-File erzeugt in dem die Unterschiede zu sehen sind. In meinem Beispiel werden, wenn es Unterschiede gibt, die Zeilen der style1.css in Rot dargestellt und die der style2.css in Gr√ºn. Gibt es keine Unterschiede, werden die Zeilen in wei√üer Schrift ausgegeben."},{"title":"HTML5 Videos ab einer bestimmten Position abspielen (Media Fragments)","slug":"html5-videos-ab-einer-bestimmten-position-abspielen-media-fragments","teaser":"Mit den sogenannten [‚ÄûMedia Fragments‚Äú][1] ist es unter anderem m√∂glich Videos ab einer bestimmten Position oder sogar nur Teile eines Videos abzuspielen. Daf√ºr h√§ngt man an den Pfad der Videodatei ein hash-Zeichen (`#`) gefolgt von `t=` und dem gew√ºnschten Wert.\n\n    <video controls>\n        <source src=\"demo.mp4#t=2\" />\n        <source src=\"demo.webm#t=2\" />\n    </video>\n    \n[1]: http://www.w3.org/TR/media-frags/","date":"2015-04-16","year":"2015","body":"Dabei kann man verschiedene Werte angeben.\n\n`#t=5` => Das Video wird ab Sekunde 5 und bis zum Ende abgespielt (5-Ende)  \n`#t=5,20` => Das Video wird ab Sekunde 5 und bis Sekunde 20 abgespielt (5-20)  \n`#t=,20` => Das Video wird von Anfang an und bis Sekunde 20 abgespielt (0-20)\n\nEine [Demo][2] aller Optionen habe ich auf Codepen gestellt.\n\nIn fast allen getesteten Browsern (IE, Chrome, Firefox, Safari, Opera, Vivaldi) haben alle drei Varianten funktioniert, wie sie sollten. Einzig in Internet Explorer funktioniert leider gar nichts. Der Status des Media Fragment Features ist aktuell noch [‚Äûunder consideration‚Äú][3], also noch nicht in der Entwicklung und maximal erst in Planung.\n\nDie Media Fragmentation ist nicht nur m√∂glich, wenn man Videos mit `video` Element in HTML einbindet, sondern auch, wenn man einen Link zu einem Video direkt im Browser eingibt. Das funktioniert in allen getesteten Browsern au√üer in IE und Vivaldi.\n\n    http://matuzo.at/tests/html5video/demo.mp4#t=2,3\n    \n\nDie [‚ÄûMedia Fragments‚Äú][1] sind ein weiteres sehr praktisches Feature, das uns HTML5 bringt. Sobald Microsoft mitspielt, haut das mit der Browserkompatibilit√§t auch ganz gut hin.\n\n [1]: http://www.w3.org/TR/media-frags/\n [2]: http://codepen.io/matuzo/pen/XJvzOQ?editors=100\n [3]: https://status.modern.ie/mediafragments"},{"title":"WordCamp Vienna 2015 - Meine Notizen","slug":"wordcamp-vienna-2015-meine-notizen","teaser":"<small>Titelfoto: ¬© WordCamp Vienna <a href=\"http://vienna.wordcamp.org/2015/pictures-from-wordcamp-vienna-2015/\">http://vienna.wordcamp.org/2015/pictures-from-wordcamp-vienna-2015/</a></small>\n\nLetztes Wochenende hat das erste Wordcamp in Wien stattgefunden. Fast alle Talks waren sehr interessant und das Event an sich war sehr gut organisiert. Das n√§chste Mal bin ich sicher wieder dabei.\n\nMeine Notizen habe ich nat√ºrlich wieder formatiert und ver√∂ffentlicht.","date":"2015-04-14","year":"2015","body":"Vienna Wordpress Meetup <http://wpvienna.com>\n\n## How to seduce Google with your WordPress site\n\nBruce Jackson <http://www.seocoach.at>\n\n[Adwords keyword planner][1] - Traffic f√ºr Keywords finden und vergleichen\n\nSuchanfragen auf Desktop bestehen im Schnitt aus 1-2 W√∂rtern, auf Mobile bis zu 10, weil Mobile User Voicesearch verwenden, bspw. \"Zahnarzt im dritten Bezirk in Wien\".\n\n### SEO und title-Element\n\n*   Keywords m√ºssen im title und in der URL vorhanden sein\n*   title muss lesbar sein\n*   title muss einzigartig sein\n*   www in der Domain verwenden\n\n### ‚ÄûMobilegeddon‚Äú\n\nAm 21.04. findet das gr√∂√üte Google Update statt\n\n30% der Websites werden 30% ihres Traffics verlieren\n\nTesten ob die Website Mobile friendly ist: <https://www.google.de/webmasters/tools/mobile-friendly/>\n\nMan darf CSS und JS in robots.txt nicht blocken, weil die Website damit nicht komplett gelesen werden kann und entsprechend nicht mobile friendly sein kann.\n\nDirectories spielen (immer noch) eine wichtige Rolle bei der Suche  \n<http://tupalo.at>  \n<http://herold.at>  \n<http://yelp.at>\n\nF√ºr Mobile ist Google Maps wichtig. (Lokale Suchanfragen)\n\n### Wordpress Plugins\n\n[Yoast SEO Plugin][2]  \n[W3 Cache][3]  \n[Google Analyticator][4]  \n[Transposh][5]  \n[Polylang][6]\n\n### SEO\n\n[Google SEO Guidelines][7]  \n[SEO Moz][8]\n\n## Vagrant: disposable developer environments made easy\n\n[Michele Orselli][9]\n\n<https://www.vagrantup.com/>\n\nNach fertigen Vagrant Boxes suchen:\n\n*   <https://atlas.hashicorp.com/boxes/search>\n*   <http://www.vagrantbox.es/>\n\nEs ist auch m√∂glich mehrere Projekte in einer Box laufen zu haben.\n\n*   Box w√§hlen z.B. [laravel/homestead][10]\n*   Box installieren `vagrant box add laravel/homestead`\n*   `vagrant init`\n*   `vagrant up`\n\n## WordPress Responsive and Fast: Speed Index < 1000\n\nHolger Guggi\n\nWebsites sollten idealerweise innerhalb einer Sekunde dargestellt werden. ‚ÄûNach Abzug der Netzwerklatenz sind nur noch 400 Millisekunden √ºbrig‚Äú.\n\n<https://developers.google.com/speed/docs/insights/mobile?hl=de>\n\n> 80-90% of the end-user response time is spent on the frontend. Start there.\n\nSteve Souders\n\n### Backend optimieren\n\n*   Linux Kernel 3.2+ \n*   Man sollte wichtige Plugins installieren k√∂nnen, bspw. f√ºr Caching. \n*   Server Konfigurationen von [HTML5 Boilerplate][11] verwenden \n\n> The fastest HTTP request is the one not made.\n\nSteve Souders\n\n### WP Theme testen\n\nTheme installieren (oder einfach Demolink von Themeforest nehmen) und durch <http://webpagetest.org> laufen lassen.\n\n‚ÄûStart render‚Äú sollte maximal 700ms sein und ‚ÄûSpeed Index‚Äú maximal 1000ms.\n\n### Plugins\n\n[W3 total cache][3] - (Minification, Browser Cache,...)  \n[HTML5 Boilerplate .htaccess][12] - Servereinstellungen u.a. f√ºr Performance  \n[Plugin organizer][13] - Reihenfolge in der Plugins geladen werden √§ndern  \n[EWWW Image Optimizer][14] - Dateigr√∂√üe optimieren\n\n## Contributing to WordPress\n\n[Jenny Wong][15]\n\n[WP Rest Api][16] - Daten aus WP Website holen √ºber Rest.\n\nWenn man zu Wordpress etwas beitragen m√∂chte: <http://make.wordpress.org>. Verschiedene Teams: Accessibility, Core, UI, Mobile,..\n\n[Wordpress App][17] - Beitr√§ge schreiben √ºber die iOS oder Android App.\n\n[WordPress.tv][18] - Wordpress Videos und Talks.\n\n[bbPress][19] - Forum Software von den WordPress Machern.\n\n## https\n\n[Robert Harm][20]\n\nMan sollte https verwenden, weil es sicherer ist und zus√§tzlich gut f√ºrs Google Ranking.\n\n*   <https://www.mapsmarker.com/> \n*   <http://www.offene-oeffis.at/> \n*   <https://letsencrypt.org/> \n*   <https://wordpress.org/plugins/wordpress-https/>\n\n## Jetpack\n\n<https://wordpress.org/plugins/jetpack/>  \n<http://jetpack.me/>\n\nBr√ºcke zwischen wordpress.com und selber gehosteten Website. Features von wordpress.com in eigene Website bekommen.\n\n*   Markdown\n*   Statistiken \n*   √úberpr√ºfung von Rechtschreibung & Grammatik \n*   Shortcodes\n*   E-Mail Subscriptions\n*   [Photon][21] - Bilder in Wordpress Cloud hosten\n*   Social Features\n*   ...\n\n## VersionPress\n\n<http://versionpress.net/>\n\nGit Plugin f√ºr Wordpress Websites mit dem nicht nur Dateien, sondern auch die Datenbank versioniert wird.\n\nSehr junges Projekt. Man kann ihnen schreiben, um den aktuellen Development Build zu testen.\n\n## Git\n\n[Miguel Fonseca][22]\n\n*   Aliase erstellen (<http://stackoverflow.com/a/2553799>)\n*   git commit -v\n\n## How to present like a Boss\n\n[Davide 'Fol' Casali][23]\n\n**B**enchmark  \n**O**ne thing  \n**S**torytelling  \n**S**tyle\n\nBuchempfehlung: [Made to Stick: Why Some Ideas Survive and Others Die][24]\n\n## Building themes with the WP REST API\n\n[WP Rest Api][16] - Daten aus WP Website holen √ºber Rest\n\n[Picard Present][25] - A presentation theme that uses the REST API\n\nThemes bauen mit Javascript und Rest API.\n\nVorteile:\n\n*   Bessere User Experience\n*   Speed - Gewisse Seite auf einmal vorladen\n*   Offline - Durch das Vorladen sind gewisse Daten auch Offline verf√ºgbar\n*   Server wird entlastet\n\n**Zug√§nge:**\n\nWebsite komplett in Javascript aufgebaut und WP nur als Datenspeicher + Admin\n\noder\n\nSkeleton Theme und um den ersten Page Load k√ºmmert sich Javascript\n\nFunktioniert auch ohne Javascript! (progressive enhancement)\n\n<http://browserify.org/> - Browserify lets you require('modules') in the browser by bundling up all of your dependencies.\n\nCollections theme - <https://thethemefoundry.com/wordpress-themes/collections/>\n\n## React and Flux for WordPress Developers\n\n[Nikolay Bachiyski][26] - <http://extrapolate.me/>\n\n[React][27] - UI Library, kein Framework\n\n[React Developer Tools Chrome Plugin][28]\n\nBei jedem Update:\n\n1.  render() wird aufgerufen\n2.  React macht ein diff und vergleicht den aktuellen und den letzten Status\n3.  Es wird berechnet welche √Ñnderungen am DOM am sinnvollsten sind\n4.  Alle Updates am DOM werden batch durchgef√ºhrt\n\n### Flux\n\nFlux is the application architecture that Facebook uses for building client-side web applications. It complements React's composable view components by utilizing a unidirectional data flow. It's more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code.\n\n<https://facebook.github.io/flux/>\n\nArtikel: [Flux For Stupid People][29]\n\n## How to properly split-test your WP website\n\n[Igor Kolosov][30]\n\nSlides: [How to properly split-test your WP website][31]\n\nZuf√§llig Traffic verteilen auf Hauptversion (A) und abge√§nderte Versionen (B, C, ...).\n\nClicks tracken:\n\n*   <http://www.crazyegg.com/> \n*   <http://www.clicktale.com/>\n\n<https://www.browserling.com> - Online Browsertesting\n\nSeine Empfehlung zum Splittesting: Content Experiments (with Universal Analytics)\n\n [1]: https://adwords.google.de/keywordplanner\n [2]: https://wordpress.org/plugins/wordpress-seo/\n [3]: https://wordpress.org/plugins/w3-total-cache/\n [4]: https://wordpress.org/plugins/google-analyticator/\n [5]: https://wordpress.org/plugins/transposh-translation-filter-for-wordpress/\n [6]: https://wordpress.org/plugins/polylang/\n [7]: http://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf\n [8]: http://moz.com/blog\n [9]: https://twitter.com/_orso_\n [10]: https://atlas.hashicorp.com/laravel/boxes/homestead\n [11]: https://github.com/h5bp/html5-boilerplate/blob/master/dist/.htaccess\n [12]: https://roots.io/plugins/html5-boilerplate-htaccess/\n [13]: https://wordpress.org/plugins/plugin-organizer/\n [14]: https://wordpress.org/plugins/ewww-image-optimizer/\n [15]: https://twitter.com/miss_jwo\n [16]: http://wp-api.org/\n [17]: https://wordpress.org/mobile/\n [18]: http://wordpress.tv/\n [19]: https://bbpress.org/\n [20]: https://www.harm.co.at/en/\n [21]: http://jetpack.me/support/photon/\n [22]: https://github.com/mcsf\n [23]: https://twitter.com/folletto\n [24]: http://heathbrothers.com/books/made-to-stick/\n [25]: https://github.com/jacklenox/picard-present\n [26]: http://twitter.com/nikolayb\n [27]: https://facebook.github.io/react/\n [28]: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\n [29]: http://blog.andrewray.me/flux-for-stupid-people/\n [30]: https://twitter.com/igorko_hub\n [31]: http://de.slideshare.net/igorko/how-to-properly-split-test-your-wordpress-website?qid=696ac929-cb3e-4e02-9df8-fd2adfa73a06&v=qf1&b=&from_search=9"},{"title":"Buchempfehlung: Scott Jehl - Responsible Responsive Design","slug":"buchempfehlung-scott-jehl-responsible-responsive-design","teaser":"Vor Kurzem habe ich [Scott Jehls][1] Buch [‚ÄûResponsible Responsive Design‚Äú][2] gelesen. Weil ich so begeistert davon war und viele neue Dinge lernen und mitnehmen konnte, habe ich hier die f√ºr mich wichtigsten Infos zusammengefasst.\n\nEine Rezension spare ich mir an dieser Stelle, aber es sei gesagt, dass dieses Buch f√ºr alle jene eine Pflichtlekt√ºre ist, die viel mit Responsive Webdesign und Performance zu tun haben oder sich in dieses Thema einlesen m√∂chten.\n\n [1]: https://twitter.com/scottjehl\n [2]: http://abookapart.com/products/responsible-responsive-design","date":"2015-04-09","year":"2015","body":"## Wann setzt man am besten einen Breakpoint?\n\n> Start with the small screen first, then expand until it looks like shit. TIME FOR A BREAKPOINT!\n\n‚Äì Stephan Hay (<https://twitter.com/brad_frost/status/191977076000161793>)\n\n## Tablesaw: L√∂sungen f√ºr die Darstellung von Tabellen in Responsive Designs\n\nEine Reihe von jQuery Plugins mit verschiedenen L√∂sungen f√ºr die Darstellung von Tabellen in Responsive Designs.\n\n*   [Tablesaw auf Github][3]\n*   [Artikel zu Tablesaw][4]\n\n## Wie gro√ü sollten Buttons f√ºr Touch sein?\n\nLaut dem Smashing Magazine-Artikel [‚ÄûFinger-Friendly Design: Ideal Mobile Touchscreen Target Sizes‚Äù][5] empfiehlt es sich, Buttons **45 ‚Äì 57 Pixel** breit zu machen und Buttons, die tendenziell mit Daumen bedient werden, **72 Pixel** breit.\n\n## Tap-Click Verz√∂gerung: Zwischen einem Tap und dem Ausl√∂sen des Click-Events k√∂nnen 300ms vergehen\n\nAuf vielen Touch-Ger√§ten gibt es eine Verz√∂gerung von mindestens 300ms zwischen einem Tap und dem tats√§chlichen Ausl√∂sen des Click-Events. Das liegt daran, dass Touch-Ger√§te nach einem Click kurz warten, um sicher zu gehen, dass es sich nicht um ein Double Tap handelt.\n\nF√ºr diese deutlich wahrnehmbare Verz√∂gerung gibt es zwei L√∂sungen: [tappy.js][6] und [FastClick][7]\n\n## em in Media Queries\n\nDer Autor bevorzugt es, die Einheit `em` in Media Queries zu verwenden, weil sie relativ zum Content bzw. der Schriftgr√∂√üe ist und nicht *fix* wie Pixel.\n\nIn dem Artikel ‚Äû[The EMs have it: Proportional Media Queries FTW!][8]‚Äú erkl√§rt Lyza Gardner die Vorteile und gibt auch ein Beispiel dazu.\n\n## Der Unterschied zwischen @media all und @media only all\n\nDer Unterschied zwischen den beiden Anweisungen ist, dass `@media all` oder `@media screen` bei allen Browsern greift, die CSS 1.0 unterst√ºtzen und `@media only all` bzw. `@media only screen` nur bei jenen, die CSS3 Media Queries unterst√ºtzen.\n\n## CSS Device Adaptation\n\nDer viewport-Meta Tag wurde von Apple eingef√ºhrt und ist ‚Äì ganz unabh√§ngig von seiner Verbreitung - kein W3C Standard. Die standardisierte Technik, um die Breite des Viewports zu ver√§ndern, ist die sogenannte ‚ÄûCSS Device Adaptation‚Äú.\n\n    @-webkit-viewport{width:device-width}\n    @-moz-viewport{width:device-width}\n    @-ms-viewport{width:device-width}\n    @-o-viewport{width:device-width}\n    @viewport{width:device-width}\n    \n\nDie Breite des Viewports wird also in CSS, und nicht mehr in HTML, angegeben. [Opera Mini, Opera Mobile und Internet Explorer][9] sind aktuell noch die einzigen Browser, die ‚ÄûCSS Device Adaptation‚Äú unterst√ºtzen. Es macht aber Sinn, die Technik zus√§tzlich zum viewport-Meta Tag zu verwenden. Warum beschreibt Tim Kadlec in seinen Artikeln [‚ÄûIE10 Snap Mode and Responsive Design‚Äú][10] und [‚ÄûWindows Phone 8 and Device-Width‚Äù][11].\n\n## Momentum Scrolling\n\nIn iOS kann man ‚Äûschwungvolles Scrolling‚Äú f√ºr Elemente mit Scrollbars aktivieren.\n\n    overflow-y: scroll; /* Muss scroll sein, nicht auto */\n    -ms-overflow-style: auto;\n    -webkit-overflow-scrolling: touch;\n    \n\nDen Unterschied kann man [in diesem Codepen][12] auf Tablet oder Smartphone testen.\n\n## Wann sollte man ein Polyfill einsetzen?\n\nIn 9 von 10 F√§llen ist es besser, dem User eine weniger fortgeschrittene Variante einer Funktionalit√§t zu bieten, als ein Polyfill zu verwenden. Bei der Entscheidung sollte man sich drei Fragen stellen:\n\n*   Wie sehr wird durch das Polyfill die Experience verbessert?\n*   Wie stark wird die Performance dadurch verschlechtert?\n*   Wie wahrscheinlich ist es, dass das Polyfill irgendwann √ºberfl√ºssig und damit entfernbar ist?\n\n## Wie testet man am besten auf verschiedenen Ger√§ten?\n\nNat√ºrlich ist es immer am besten auf den tats√§chlichen Ger√§ten zu testen. [OpenDeviceLab.com][13] bietet eine Map in der aktuell 143 Open Device Labs weltweit markiert sind, damit man herausfinden kann, ob es eines in der N√§he gibt. Zus√§tzlich kann man auch sein altes Ger√§t einem bestimmten Lab spenden.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2015/03/OpenDeviceLab.jpg\" alt=\"OpenDeviceLab.com\" width=\"648\" height=\"301\" class=\"alignnone size-full wp-image-618\" />][14]\n\nWas Emulatoren betrifft, empfiehlt Jehl [Browserstack][15].\n\nEs ist wichtig, dass man nicht nur mit den Dev Tools eines bestimmten Browsers gut umgehen kann. Auf [devtoolsecrets.com][16] findet man Tipps und Tricks f√ºr den Umgang mit den Dev Tools in Chrome, Firebug, Firefox, Internet Explorer, Opera and Safari.\n\n## Fragen, die man sich stellen sollte beim Testen auf verschiedenen Ger√§ten.\n\n*   L√§dt die Website in einer akzeptablen Zeitspanne?\n*   Sind die Hauptinhalte und -funktionen bedienbar?\n*   F√ºhlt sich der Funktionsumfang auf dem jeweiligen Ger√§t passend an? (progressive enhancement)\n*   Kann der Text einfach gescannt werden? F√∂rdert die Zeilenh√∂he die Lesbarkeit?\n*   Ist die Website benutzbar mit den √ºblichsten Eingabetechniken f√ºr das jeweilige Ger√§t (bspw. Tastatur, Touch, Maus,..).\n*   Sind die tapbaren Bereiche einfach zu tapen ohne dass benachbarte Bereiche getroffen werden?\n*   Wird das Layout immer noch gut dargestellt, wenn sich Orientation, Viewport- oder Schriftgr√∂√üe √§ndern?\n*   Wenn technische Hilfsmittel (bspw. Screenreader) installiert sind, wird der Inhalt auf sinnvolle Art und Weise vorgelesen?\n*   Funktioniert das Scrolling fl√º√üig? Werden Animationen fl√º√üig abgespielt?\n\n## Wann hat eine Seite schnell genug geladen?\n\nMan kann sagen, dass eine Seite dann schnell genug geladen, wenn die Ladezeite, die ben√∂tigt wird bis die Website bedienbar ist, unter einer Sekunde liegt.\n\nDie Performance kann man mit [Google PageSpeed Insights][17] testen und Vorschl√§ge f√ºr die Optimierung einholen.\n\nEine weitere M√∂glichkeit zu testen ist [WebPageTest][18]. Ein wichtiger Indikator bei den Tests ist der Speed Index. [Laut Paul Irish][19] sollte es das Ziel sein einen Speed Index unter 1000 zu erreichen.\n\n> My answer to how fast is fast enough? A Speed Index of under 1000. [...] And lastly I think most people's expectations for what's OK is currently way too lax. :)\n\nPaul Irish\n\nMehr dazu gibt es in seinem Talk auf der Fluent 2014.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/R8W_6xWphtw\" frameborder=\"0\" allowfullscreen></iframe> \n## Was kann man als Grundlage f√ºr ein Performance Budget nehmen?\n\nWenn man nicht wei√ü, welches Performance Budget man festlegen soll, kann man einfach die Ladezeiten oder Speed Indices von Konkurrenz Websites hernehmen, vergleichen und einen niedrigeren Wert budgetieren.\n\n## Caching optimieren\n\nTipps zur Optimierung des Caching einer Website:\n\n*   [html5boilerplate][20] (Downloaden und Kommentare anschauen)\n*   [LeverageBrowserCaching][21]\n\n## Offline Websites\n\nEs kann manchmal auch sinnvoll sein, Inhalte offline verf√ºgbar zu machen.\n\n*   [Application Cache][22]\n*   [Local storage][23]\n*   [Service Worker][24]\n\n## Lazy Loading\n\nZwei empfohlene Artikel von Jeremy Keith zum Thema Lazy Loading:\n\n*   [Conditional Loading for Responsive Designs][25]\n*   [Clean conditional loading][26]\n\nEin Script um Inhalte *lazy zu laden* ist [Ajax Include][27]. Damit kann man Inhalte unter bestimmten Voraussetzungen laden, bspw. erst wenn das DOM geladen ist oder wenn ein bestimmtes Media Query greift.\n\n## Inhalte bei Breakpoints umordnen\n\n[AppendAround][28] ‚Äì Ein Script mit dem man Elemente je nach Breakpoint im DOM umordnen kann.\n\n## Performance bei Media Queries in separaten CSS-Dateien\n\n    <link href=\"a.css\" rel=\"stylesheet\">\n    <link href=\"a.css\" rel=\"stylesheet\" media=\"(min-width: 45em)\">\n    <link href=\"a.css\" rel=\"stylesheet\" media=\"(min-resolution: 100dpi)\">\n    <link href=\"a.css\" rel=\"stylesheet\" media=\"nonsense query weeee!\">\n    \n\nIn allen g√§ngigen Browsern werden alle Stylesheets ganz unabh√§ngig vom media-Attribut geladen, auch wenn die Media Queries nicht greifen.\n\n> Unfortunately, not only do browsers always request StyleSheets regardless of their applicability, but many browsers delay rendering (displaying the page content to the user) until those requests have returned.\n\nScott Jehl\n\nIn manchen Browsern werden die Stylesheets zumindest an Hand der media-Attribute priorisiert.\n\n> That said, some modern browsers (particularly those based on Webkit and now Blink) will actually evaluate media queries (when present) to determine the priority at which a StyleSheet should be loaded before requesting that StyleSheet. In these browsers, StyleSheets paired with media queries that are found to be inapplicable at load time will be loaded asynchronously (and possibly deferred until higher-priority requests have been made), meaning the page content will be displayed to the user immediately and regardless of whether those de-prioritized StyleSheets have finished loading or not.\n\nScott Jehl\n\n[Beispiel, Untersuchung und Ergebnisse von Scott Jehl auf Github.][29]\n\n## Wann sollte man CSS nicht in eine eigene Datei auslagern?\n\nWenn man eine Single-Page Website macht, jede Seite anders aussieht oder wenn man nur wenig CSS verwendet (~unter 8kb).\n\n## Critical path (above the fold) CSS und HTML\n\nDie Datenmenge, die bei der ersten Anfrage an den Server zur√ºckgegeben werden kann, betr√§gt 14kb. Man sollte versuchen, dass diese 14kb das CSS, HTML und JS umfassen, das notwendig ist f√ºr die Darstellung des sichtbaren Teils der Website (Viewport) und den Rest sollte man asynchron laden, bspw. mit [loadCSS][30].\n\n[npm Plugin][31] und [Grunt Task][32] f√ºr das Extrahieren des Critical CSS.\n\n## Media Query & Asset Downloading Results\n\n[Tim Kadlec][33] hat in seinem Artikel [‚ÄûMedia Query & Asset Downloading Results‚Äú][34] untersucht unter welchen Voraussetzungen Bilder speziell beim Einsatz von Media Queries in den g√§ngigsten Browsern geladen werden oder nicht.\n\n## Sonstige Skripte, L√∂sungen und Tools\n\n### Data URIs\n\n[Data URIs per Drag & Drop konvertieren][35]\n\nData URIs k√∂nnen Performanceprobleme auf manchen mobilen Ger√§te verursachen. Passende Artikel dazu:\n\n*   [On Mobile, Data URIs are 6x Slower than Source Linking (New Research)][36]\n*   [Data URI Performance: Don't Blame it on Base64][37]\n\n### Barrierefreie und mehrfarbige Icon Fonts\n\n*   [Bulletproof Accessible Icon Fonts][38] ‚Äì Artikel √ºber Icon Fonts und Accessibility\n*   [A Font Garde][39] ‚Äì Passendes Tool dazu\n\n[Mehrfarbige Icon Fonts][40]\n\n### Grunticon - A mystical CSS icon solution\n\n[Grunticon][41] ‚Äì Browser√ºbergreifend Arbeiten mit SVG Icons inklusive .png-Fallback\n\n### Fonts via Javascript laden\n\n[CSS Font Loading API][42]\n\n### Es gibt auch Alternativen zu jQuery\n\n[Shoestring][43] - Eine Alternative zu jQuery mit niedriger Dateigr√∂√üe.\n\n### Javascript dynamisch laden\n\n[loadJS][44] ‚Äì Javascript asynchron laden, je nach Voraussetzung.\n\n### CSS und JS dynamisch laden\n\n[enhance.js][45] ‚Äì loadCSS, loadJS und mehr in einem Script zusammengefasst.\n\n> A JavaScript workflow designed to progressively enhance sites in a qualified manner.\n\n [1]: https://twitter.com/scottjehl\n [2]: http://abookapart.com/products/responsible-responsive-design\n [3]: https://github.com/filamentgroup/tablesaw\n [4]: http://www.filamentgroup.com/lab/tablesaw.html\n [5]: http://www.smashingmagazine.com/2012/02/21/finger-friendly-design-ideal-mobile-touchscreen-target-sizes/\n [6]: https://github.com/filamentgroup/tappy\n [7]: https://github.com/ftlabs/fastclick/\n [8]: http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/\n [9]: http://caniuse.com/#search=css%20device\n [10]: http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/\n [11]: http://timkadlec.com/2013/01/windows-phone-8-and-device-width/\n [12]: http://codepen.io/chriscoyier/full/nHEDj\n [13]: http://opendevicelab.com/\n [14]: http://opendevicelab.com\n [15]: http://www.browserstack.com/\n [16]: http://devtoolsecrets.com/\n [17]: https://developers.google.com/speed/pagespeed/insights\n [18]: http://www.webpagetest.org/\n [19]: http://timkadlec.com/2014/01/fast-enough/#comment-1200946500\n [20]: https://html5boilerplate.com/\n [21]: https://developers.google.com/speed/docs/insights/LeverageBrowserCaching\n [22]: http://www.html5rocks.com/en/tutorials/appcache/beginner/\n [23]: http://diveintohtml5.info/storage.html\n [24]: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Social_API/Service_worker_API_reference\n [25]: http://24ways.org/2011/conditional-loading-for-responsive-designs\n [26]: http://adactio.com/journal/5042/\n [27]: http://www.filamentgroup.com/lab/ajax-includes-modular-content.html\n [28]: https://github.com/filamentgroup/AppendAround\n [29]: https://github.com/scottjehl/css-inapplicable-load\n [30]: https://github.com/filamentgroup/loadCSS\n [31]: https://github.com/addyosmani/critical\n [32]: https://github.com/filamentgroup/grunt-criticalcss/\n [33]: https://twitter.com/tkadlec\n [34]: http://timkadlec.com/2012/04/media-query-asset-downloading-results/\n [35]: http://boazsender.github.io/datauri/\n [36]: http://www.mobify.com/blog/data-uris-are-slow-on-mobile/\n [37]: http://www.mobify.com/blog/base64-does-not-impact-data-uri-performance/\n [38]: http://www.filamentgroup.com/lab/bulletproof_icon_fonts.html\n [39]: https://github.com/filamentgroup/a-font-garde\n [40]: https://css-tricks.com/stackicons-icon-fonts/\n [41]: https://github.com/filamentgroup/grunticon\n [42]: http://dev.w3.org/csswg/css-font-loading/\n [43]: https://github.com/filamentgroup/shoestring\n [44]: https://github.com/filamentgroup/loadJS\n [45]: https://github.com/filamentgroup/enhance"},{"title":"Hintergrundbilder mit Pixel- oder Prozentwerten relativ zu egal welcher Kante positionieren","slug":"hintergrundbilder-mit-pixel-oder-prozentwerten-relativ-zu-egal-welcher-kante-positionieren","teaser":"Positioniert man ein Hintergrundbild mit Pixel- oder Prozentwerten, wird die linke obere Ecke des jeweiligen Elements als Referenzpunkt verwendet. Gibt man dem Element beispielsweise `background-position: 20px 40px`, bewegt sich das Bild um 20px nach rechts und 40px nach unten, ausgehend von der oberen bzw. linken Kante des Elements. Mit CSS2.1 konnte man nur relativ zu eben diesen Kanten positionieren und nicht beispielweise 40px von rechts und 20px von unten.","date":"2015-04-02","year":"2015","body":"Mit CSS3 ist das aber schon seit einer ganzen Weile m√∂glich. Daf√ºr gibt es eine 3 bzw. 4 Werte Syntax. Man gibt zuerst die Seite an von der man ausgehen m√∂chte und dann den Pixel- oder Prozentwert um den das Bild verschoben werden soll.\n\n    background-position: right 40px bottom 20px;\n    \n\nL√§sst man den zweiten Wert weg, ist dieser standardm√§√üig auf 0.\n\n    background-position: right 40px bottom;\n    \n\nAlle aktuellen Browser beherrschen diese Schreibweise und viele schon seit [mehreren Versionen][1]. In Internet Explorer kann man diese Technik ab Version 9 anwenden. Ein Live-Beispiel gibt es in [diesem Codepen][2] zu sehen.\n\n [1]: http://caniuse.com/#feat=css-background-offsets\n [2]: http://codepen.io/matuzo/pen/pvBZEG?editors=010"},{"title":"Vivaldi - Warum nicht noch ein Browser?","slug":"vivaldi-warum-nicht-noch-ein-browser","teaser":"Noch bevor Microsofts [‚ÄûSpartan‚Äú][1] angekommen ist, gibt es schon ein *new kid in browsertown*. Der ehemalige Opera CEO [J√≥n S. von Tetzchner][2] hat gemeinsam mit einem Team, bestehend aus mehr als 20 Leuten, einen neuen Browser entwickelt und gestern das Preview ver√∂ffentlicht.\n\n [1]: https://matuzo.at/project-spartan-microsofts-neuer-browser-und-was-wir-erwarten-konnen/\n [2]: http://de.wikipedia.org/wiki/Jon_Stephenson_von_Tetzchner","date":"2015-01-28","year":"2015","body":"\n\nDer Browser hei√üt [Vivaldi][3], verwendet Chromium als Grundlage und richtet sich direkt an Power-User.\n\n> We are going for the kind of user who spends a lot of time online, keeps a lot of tabs open and likes to work efficiently with a lot of content.\n\n[J√≥n S. von Tetzchner][4]\n\nHintergrund der Entstehung ist, dass Tetzchner, nachdem er Opera verlassen hatte, mit der Entwicklung nicht zufrieden war, die das Unternehmen durchmachte. Es gefiel ihm nicht, dass Opera von der Presto- zur Webkit- (und in weiterer Folge Blink) Engine wechselte. Denn gleichzeitig wurde damit auch eine andere, breitere Userbase angesprochen. Im Gegensatz dazu ist Vivaldi eben f√ºr die urspr√ºngliche Opera-Community gedacht.  \n(Ausz√ºge aus dem Interview mit Techcrunch: [Former Opera CEO Launches Vivaldi, A New Browser For Power Users][4])\n\n## Features\n\nIn dem aktuellen Previewbuild sind noch nicht alle Kernfeatures eingebunden, aber es soll schon mal die Richtung zeigen, in die Vivaldi gehen will.\n\n### Tabs und Adressleiste\n\nEin nettes Detail, das mir sofort aufgefallen ist, ist, dass sich die Hintergrundfarbe des Tabs und der Men√ºleiste an die dominanteste Farbe im Favicon anpasst.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/01/vivaldi-tabs.gif\" alt=\"Vivaldi - Tabs\" width=\"648\" height=\"195\" class=\"alignnone size-full wp-image-550\" />\n\n### Quick Commands\n\nMit CMD + G bzw. F2 kann man die ‚ÄûQuick Commands‚Äú aufrufen und Funktionen, Bookmarks, Einstellungen und besuchte Websites, √§hnlich wie bei Spotlight oder Alfred, √ºber einen Launcher filtern und ausw√§hlen. √úberhaupt gibt es f√ºr viele Dinge Shortcuts, beispielsweise kann man mit Alt + D zu den Downloads wechseln und mit Alt + B zu den Bookmarks.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/01/vivaldi-quickcommands.jpg\" alt=\"Vivaldi - Quick commands\" width=\"648\" height=\"362\" class=\"alignnone size-full wp-image-543\" />\n\nNach wenigen Minuten der Benutzung hat mich diese Kernfunktionalit√§t schon sehr begeistert.\n\n### Tab Stacks\n\nEin weiteres Merkmal ist, dass man Tabs in Stacks organisieren kann. Das ist besonders Hilfreich, wenn man oft sehr viele Tabs offen hat. Wenn man aber nicht sehr vorsichtig beim Verschieben der Tabs ist, kann das ‚ÄûStacken‚Äú recht nervig werden, aber ich denke, dass das in Zukunft sicher noch optimiert wird.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/01/vivaldi-tabstacks.gif\" alt=\"Vivaldi - Tabstacks\" width=\"1046\" height=\"471\" class=\"size-full wp-image-551\" />\n\n### Zuk√ºnftige Features\n\nIn Zukunft soll ein Mail Client im Browser integriert werden. Weiters soll es unter anderem ger√§te√ºbergreifende Synchronisation, Extensions, eine reine Keyboardnavigation und Performanceoptimierungen geben.\n\n## Fazit\n\nOb wir wirklich einen weiteren Browser brauchen, kann ich nicht beurteilen. So oder so sieht [Vivaldi][3] ganz nett aus und die speziellen Features machen auf jeden Fall Sinn. Nachdem die Grundlage f√ºr den Browser Chromium ist, sollte dieser zus√§tzliche Browser f√ºr uns als WebdesignerInnen auch keine gro√üen Auswirkungen haben.\n\n [1]: https://matuzo.at/project-spartan-microsofts-neuer-browser-und-was-wir-erwarten-konnen/\n [2]: http://de.wikipedia.org/wiki/Jon_Stephenson_von_Tetzchner\n [3]: https://vivaldi.com\n [4]: http://techcrunch.com/2015/01/27/vivaldi-the-four-browsers/"},{"title":"‚ÄûProject Spartan‚Äú - Microsofts neuer Browser und was wir erwarten k√∂nnen","slug":"project-spartan-microsofts-neuer-browser-und-was-wir-erwarten-konnen","teaser":"Letzte Woche hat Microsoft bekannt gegeben, dass Windows 10 mit einem neuen Browser, aktuell noch unter dem Codenamen **‚ÄûSpartan‚Äú**, ausgeliefert wird. Diese Nachricht hat nat√ºrlich f√ºr viel Aufsehen und vor allem zu vielen Fragen gef√ºhrt. Das [Smashing Magazine][1] hat das zum Anlass genommen, mit Jacob Rossi, einem der Senior-Entwickler im IE-Team, zu sprechen und ein paar Details von ihm zu erfahren.\n\nIch habe die wichtigsten Hard-Facts aus dem [Artikel][2] zusammengefasst.\n\n [1]: http://www.smashingmagazine.com\n [2]: http://www.smashingmagazine.com/2015/01/26/inside-microsofts-new-rendering-engine-project-spartan/","date":"2015-01-27","year":"2015","body":"1.  ## Status & Ver√∂ffentlichung\n    \n    Der neue Browser wird in wenigen Monaten ver√∂ffentlicht. Ein genaues Datum oder ein Zeitraum scheint noch nicht festzustehen.\n    \n    Den aktuellen Feature-Entwicklungsstatus kann man auf [status.modern.ie][3] einsehen.\n\n2.  ## Engine\n    \n    In ‚ÄûSpartan‚Äú wird Trident durch eine neue Rendering Engine (EdgeHTML.dll) abgel√∂st. Grundlage f√ºr diese ist der [Support f√ºr Standards des IE11][4], wobei Altlasten (bspw. attachEvent, X-UA-Compatible), Unterst√ºtzung f√ºr Funktionen alter Versionen, sowie die Document Modes (*Oh, wie ich sie hasse*) entfernt worden sind.\n    \n    Das Javascript in ‚ÄûSpartan‚Äú wird weiterhin durch die [Chakra Engine][5] angetrieben.\n\n3.  ## Features\n    \n    Ziel ist es so kompatibel wie m√∂glich mit anderen Browsern zu sein, sodass in Zukunft keine/so wenig wie m√∂glich eigene IE-Workarounds geschrieben werden m√ºssen. Bis Dato wurden daf√ºr alleine schon √ºber 3000 Inkompatibilit√§ts-Bugs gefixt.\n    \n    Aktuell wird an [√ºber 40 neuen Web Standards][6] gearbeitet.  \n    Unter anderem:\n    \n    *   ES6 Support\n    *   HTTP/2\n    *   srcset\n    *   @supports\n    *   Touch Events\n    \n    Au√üerdem werden die **F12 Developer Tools** erneuert.\n\n4.  ## Updates & Extensions\n    \n    Microsoft will die Verbreitung der neuen Betriebssysteme und Browserversionen vorantreiben, sodass keine Uralt-Versionen mehr im Umlauf sind. Ein Schritt in diese Richtung ist, dass Windows 7-, Windows 8.1-, und Windows Phone 8.1-Nutzer innerhalb des ersten Jahres nach dem Launch ein **kostenloses Update** auf Windows 10 machen k√∂nnen.\n    \n    Weiters werden neue Browserfeatures nicht mehr immer erst mit neuen Versionen ver√∂ffentlicht, sondern dank **Auto-Update** laufend.\n    \n    Das Installieren von Extensions ist zurzeit nicht m√∂glich und es wird auch erst an einem Plan daf√ºr gearbeitet.\n\n5.  ## Abw√§rtskompatibilit√§t\n    \n    F√ºr all jene Unternehmen, die Websites und vor allem Web Applikationen haben, die angewiesen sind auf Funktionen √§lterer Browser, gibt es den [Enterprise Mode][7]. Dieser erm√∂glicht es, f√ºr gewisse Websites, die in den Einstellungen definiert werden m√ºssen, auf die Trident Engine zu wechseln. Das bedeutet, dass man regul√§r mit ‚ÄûSpartan‚Äú surft und die neue Engine nutzt und nur dann Trident im Hintergrund hat, wenn man auf eine dieser bestimmten Websites navigiert.\n    \n    [<img src=\"https://matuzo.at/wp-content/uploads/2015/01/ie11-enterprisemode.png\" alt=\"IE11 - Enterprisemode\" width=\"551\" height=\"271\" class=\"alignnone size-full wp-image-526\" />][7]\n    \n    Das gute daran ist, dass Benutzer nicht, wie bei den Document Modes, unabsichtlich in einen anderen Modus wechseln k√∂nnen. Die ‚ÄûTrident-Websites‚Äú m√ºssen, √ºblicherweise von der IT, explizit angegeben werden.\n\n6.  ## Testen und Feedback geben\n    \n    Jeder kann sich aktiv an den Geschehnissen rund um ‚ÄûSpartan‚Äú beteiligen oder auch nur passiv daran teilhaben. Es gibt daf√ºr verschiedene Zug√§nge und Quellen:\n    \n    *   Das [Windows Insider Programm][8] - Preview Builds downloaden, testen und Feedback geben.\n    *   Updates durch die [IE Devs auf Twitter][9].\n    *   [Cloud-based Remote-Testing][10] auch f√ºr Nicht Windows-User.\n    *   [Bug Reports schreiben][11]\n\n## Fazit\n\nIch war anfangs sehr skeptisch, aber sehe dem Ganzen mittlerweile positiv entgegen. Die Pl√§ne und √Ñnderungen klingen f√ºr mich zum gr√∂√üten Teil nachvollziehbar und sinnvoll. Das IE-Team hat sich innerhalb der letzten Monate sehr bem√ºht, den IE und vor allem die Entwicklung dessen voranzutreiben. Sie waren auf Konferenzen vertreten, haben [Tools f√ºr Entwickler][12] bereitgestellt und den [Entwicklungs-Status][3] transparent gemacht. Zwar habe ich immer noch ‚ÄûAngst‚Äú vor einer neuen Engine, aber diese Entwicklung kann auch [Vorteile][13] mit sich bringen.\n\n [1]: http://www.smashingmagazine.com\n [2]: http://www.smashingmagazine.com/2015/01/26/inside-microsofts-new-rendering-engine-project-spartan/\n [3]: https://status.modern.ie/\n [4]: https://gist.github.com/jacobrossi/044ea8ad3b0165e46eaf\n [5]: http://blogs.msdn.com/b/ie/archive/2012/06/13/advances-in-javascript-performance-in-ie10-and-windows-8.aspx\n [6]: https://status.modern.ie/crossdomainfontloading?iestatuses=indevelopment,iedev&browserstatuses=notsupported,indevelopment,implemented&browsers=chrome,firefox,opera,safari&ieversion=11\n [7]: http://blogs.msdn.com/b/ie/archive/2014/04/02/stay-up-to-date-with-enterprise-mode-for-internet-explorer-11.aspx\n [8]: https://insider.windows.com/\n [9]: https://twitter.com/iedevchat\n [10]: https://remote.modern.ie/\n [11]: https://connect.microsoft.com/ie\n [12]: https://www.modern.ie/en-us\n [13]: http://www.smashingmagazine.com/2015/01/26/inside-microsofts-new-rendering-engine-project-spartan/#comment-1263149"},{"title":"Sublime Text 3 Shortcuts (OS X) Teil 2","slug":"sublime-text-3-shortcuts-os-x-teil-2","teaser":"Ich habe vor kurzem schon einen [Artikel mit Shortcuts f√ºr Sublime Text 3][1] ver√∂ffentlicht. Das ist der zweite Teil und auch diesmal sind ein paar besonders hilfreiche Tastenkombinationen dabei.\n\n [1]: https://matuzo.at/sublime-text-3-shortcuts-os-x-teil-1/","date":"2015-01-06","year":"2015","body":"## Gleiche Inhalte ausw√§hlen (und √§ndern)\n\nIn das Wort klicken oder Text markieren und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">D</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_wort_auswaehlen.gif\" alt=\"Sublime - Wort ausw√§hlen\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-431\" />\n\n## Text uppercase darstellen\n\nIn das Wort klicken oder Text markieren und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">K</span> <div class=\"mac-keys-link\">\n    dann\n  </div>\n  \n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">U</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_text_uppercase.gif\" alt=\"Sublime - Text uppercase darstellen\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-428\" />\n\n## Text lowercase darstellen\n\nIn das Wort klicken oder Text markieren und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">K</span> <div class=\"mac-keys-link\">\n    dann\n  </div>\n  \n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">L</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_text_lowercase.gif\" alt=\"Sublime - Text lowercase darstellen\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-427\" />\n\n## Inhalt zwischen Klammern ausw√§hlen\n\nIrgendwo zwischen die Klammern klicken und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-shift\" title=\"Shift\">‚áß</span><span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-ctrl\" title=\"Control\">ctrl</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">M</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_inhalt_zwischen_klammern_auswaehlen.gif\" alt=\"Sublime - Inhalt zwischen Klammern ausw√§hlen\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-434\" />\n\n## Zeile duplizieren\n\nIn die Zeile klicken und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-shift\" title=\"Shift\">‚áß</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">D</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/01/sublime_zeileduplizieren.gif\" alt=\"Sublime - Zeile duplizieren\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-459\" />\n\n## Alle Kindelemente selektieren\n\nIn das Element klicken und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-shift\" title=\"Shift\">‚áß</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">J</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/01/sublime_allekindelementeselektieren.gif\" alt=\"Sublime - Alle Kindelemente selektieren\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-461\" />\n\n## Zwischen Tabs wechseln\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">1</span> / <span class=\"mac-key\">2</span> / ... <div class=\"mac-keys\">\n    oder\n  </div>\n  \n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-alt\" title=\"Alt\">‚å•</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-triangle\" title=\"Pfeil Links\">‚óÇ</span> / <span class=\"mac-key mac-key-triangle\" title=\"Pfeil Rechts\">‚ñ∏</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2015/01/sublime_zwischentabswechseln.gif\" alt=\"Sublime - Zwischen Tabs wechseln\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-463\" />\n\n## Weitere Shortcuts\n\n*   [Sublime Text 3 Shortcuts (OS X) Teil 1][1]\n\n [1]: https://matuzo.at/sublime-text-3-shortcuts-os-x-teil-1/"},{"title":"Emmet Snippets in Sublime erstellen  und √§ndern","slug":"emmet-snippets-in-sublime-erstellen-und-aendern","teaser":"Ich bin ein gro√üer Fan von [Emmet][1] und k√∂nnte mir gar nicht mehr vorstellen ohne diesem Plugin zu arbeiten. F√ºr jene, die [Emmet][1] nicht kennen: In dem gif √ºber diesem Absatz sieht man ein Beispiel daf√ºr, was mit [Emmet][1] m√∂glich ist. (Installation √ºber [Package Control][2]: Install Packages > Emmet).\n\n [1]: http://emmet.io\n [2]: https://sublime.wbond.net/installation","date":"2014-11-29","year":"2014","body":"Es gibt also Snippets, mit denen man HTML (und CSS) generieren kann. Beispielsweise erzeugt `!` + Tab das HTML Grundger√ºst.\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <title>Document</title>\n        </head>\n        <body>\n    \n        </body>\n    </html>\n    \n\nDas ist sch√∂n und gut, aber daran gef√§llt mir nicht, dass im lang-Attribut \"en\" und nicht \"de\" steht und in vielen F√§llen reicht mir nicht einfach nur das Grundger√ºst, sondern ich brauche auch eine M√∂glichkeit CSS zu schreiben. Deswegen habe ich versucht herauszufinden, wie man eigene Snippets erstellen kann.\n\n## Eine Liste der Snippets und was sie erzeugen\n\nAuf [GitHub][3] findet man eine .json-Datei mit einigen Einstellungen, allen Snippets und Abk√ºrzungen. Da sieht man nicht nur was m√∂glich ist, sondern auch wie die einzelnen Befehle aufgebaut sind. Nach kurzer Recherche habe ich herausgefunden wie das `!` Snippet funktioniert und gleich darauf meine eigenen Anpassungen durchgef√ºhrt.\n\n√úber das Sublime Men√º kommt man zu der Datei, in der man eigene Snippets definieren oder bestehende √ºberschreiben kann **(Sublime Text > Preferences > Package Settings > Emmet > Settings - User)**. Diese Datei strukturiert man genauso wie die [.json-Datei auf GitHub][3].\n\nWeiters gibt es auf der [Emmet Website][4] eine Liste mit sonstigen m√∂glichen Einstellungen.\n\n## Eigene Snippets erstellen\n\nZum leichteren Verst√§ndnis gebe ich jetzt nur ein simples Beispiel daf√ºr, wie man ein Snippet erstellen kann. Die Snippets und Einstellungen, die mein oben erw√§hntes \"Problem\" l√∂sen, findet man auf meiner [GitHub Page][5].\n\nDas Snippet `header` erzeugt `<header></header>`. Es w√§re doch aber sch√∂n, wenn es gleichzeitig auch eine `h1` und eine Navigation generiert. Die Emmet User Settings-Datei (Sublime Text > Preferences > Package Settings > Emmet > Settings ‚Äì User) habe ich daf√ºr so aufgebaut:\n\n    {\n        \"snippets\": {\n            \"html\": {\n                \"abbreviations\": {\n                    \"header+\": \"header>nav>ul.menu>li*3>a\"\n                }\n            }\n        }\n    }\n    \n\nIch habe also ein neues HTML-Snippet angelegt, das mit dem Befehl `header+` generiert wird. Wenn man `header+` eingibt und Tab dr√ºckt, bekommt man folgendes HTML:\n\n    <header>\n        <nav>\n            <ul class=\"menu\">\n                <li><a href=\"\"></a></li>\n                <li><a href=\"\"></a></li>\n                <li><a href=\"\"></a></li>\n            </ul>\n        </nav>\n    </header>\n    \n\nIm abbreviations Objekt kann man beliebig viele Snippets hinzuf√ºgen oder √ºberschreiben.\n\n    \"html\": {\n        \"abbreviations\": {\n            \"header+\": \"header>nav>ul.menu>li*3>a\",\n            \"sm-icons\": \"ul.socialmedia-icons>li.icon.icon-*3>a\"\n        }\n    }\n    \n\nMein Problem mit dem lang-Attribut konnte ich so l√∂sen, dass ich in der gleichen Datei, in der ich das Snippet erstellt habe, eine Variable √ºberschrieben habe.\n\n    {\n        \"snippets\": {\n            \"variables\": {\n                \"lang\": \"de\"\n            },\n    \n            \"html\": {\n    ...\n    \n\nDie [Default-Snippets][6] in Emmet sind sehr durchdacht und umfangreich. Muss man aber trotzdem √Ñnderungen oder Erg√§nzungen machen, ist das auch kein Problem, wenn man wei√ü wo man nachsehen muss.\n\n## Links in diesem Beitrag\n\n*   [Emmet Website][1]\n*   [Alle Emmet Snippets][3]\n*   [Meine Emmet Settings auf GitHub][5]\n*   [Package Control][2]\n*   [Emmet Einstellungen][4]\n*   [Emmet Cheatsheet][6]\n\n [1]: http://emmet.io\n [2]: https://sublime.wbond.net/installation\n [3]: https://github.com/emmetio/emmet/blob/master/lib/snippets.json\n [4]: http://docs.emmet.io/customization/preferences/\n [5]: https://github.com/matuzo/sublime\n [6]: http://docs.emmet.io/cheat-sheet/"},{"title":"Sublime Text 3 Shortcuts (OS X) Teil 1","slug":"sublime-text-3-shortcuts-os-x-teil-1","teaser":"Ich liebe Shortcuts. Je mehr ich mit der Tastatur machen kann und je weniger ich die Maus verwenden muss, desto besser. Seit ein paar Jahren arbeite ich jetzt schon mit [Sublime Text][1] und ich denke, dass ich auch noch eine Weile bei diesem Editor bleiben werde.\n\nIn Sublime gibt es einen Haufen Keyboard Shortcuts und ich nutze auch einige davon regelm√§√üig. Wenn ich aber ganz ehrlich bin, habe ich mir nie die M√ºhe gemacht, mich aktiv hinzusetzen und nach Shortcuts zu suchen. Bis jetzt. In dieser Reihe von Artikeln stelle ich jeweils 6-7 meiner Favorites und auch mir bislang unbekannte Tastenk√ºrzel vor.\n\n [1]: https://www.sublimetext.com/3","date":"2014-11-22","year":"2014","body":"Ich decke nat√ºrlich bei weitem nicht alle Kombinationen ab, aber ich habe versucht, die f√ºr mich (und m√∂glicherweise auch euch) relevantesten zusammenzufassen.\n\n## Ganze Zeile kopieren, ausschneiden, einf√ºgen\n\nIn die Zeile klicken ohne zu markieren und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">C</span> / <span class=\"mac-key\">X</span> / <span class=\"mac-key\">V</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_zeile_kopierenausschneideneinfuegen.gif\" alt=\"Sublime Zeile kopieren, ausschneiden, einfuegen\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-398\" />\n\n## Ganze Zeile(n) markieren\n\nIn die Zeile klicken und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">L</span>\n</div>\n\nF√ºr mehrere Zeilen Shortcut wiederholen.\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_zeile_markieren.gif\" alt=\"Sublime - Zeilen markieren\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-401\" />\n\n## Zeile verschieben\n\nIn die Zeile klicken und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-ctrl\" title=\"Control\">ctrl</span> + <span class=\"mac-key mac-key-triangle\" title=\"Pfeil rauf\">&utrif;</span> / <span class=\"mac-key mac-key-triangle\" title=\"Pfeil runter\">&dtrif;</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_zeile_verschieben.gif\" alt=\"Sublime - Zeile verschieben\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-402\" />\n\n## Den Inhalt zwischen Start- und Endtag markieren\n\nIrgendwo zwischen Start- und Endtag klicken und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-shift\" title=\"Shift\">‚áß</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">A</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_inhalt_markieren.gif\" alt=\"Sublime - Inhalt markieren\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-411\" />\n\n## Kommentar\n\nIn die Zeile klicken oder Zeilen markieren und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-shift\" title=\"Shift\">‚áß</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">7</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_kommentar.gif\" alt=\"Sublime - Kommentar\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-405\" />\n\n## Mehrzeiliges Kommentar\n\nZeile(n) markieren und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-cmd\" title=\"Command\">‚åò</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-alt\" title=\"Alt\">‚å•</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-shift\" title=\"Shift\">‚áß</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key\">7</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_mehrzeiliges_kommentar.gif\" alt=\"Sublime - Mehrzeiliges Kommentar\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-406\" />\n\n## Auswahl ein- und ausr√ºcken\n\nAn den Anfang einer Zeile klicken oder mehrere Zeilen markieren und...\n\n<div class=\"mac-keys\">\n  <span class=\"mac-key mac-key-ctrl\" title=\"Tab\">‚á•</span> <div class=\"mac-keys\">\n    oder zum ausr√ºcken\n  </div>\n  \n  <span class=\"mac-key mac-key-shift\" title=\"Shift\">‚áß</span> <span class=\"mac-keys-plus\">+</span> <span class=\"mac-key mac-key-ctrl\" title=\"Tab\">‚á•</span>\n</div>\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/sublime_inhalt_einausruecken.gif\" alt=\"Sublime - Inhalt ein- und ausruecken\" width=\"648\" height=\"365\" class=\"alignnone size-full wp-image-416\" />\n\n## Weitere Shortcuts\n\n*   [Sublime Text 3 Shortcuts (OS X) Teil 2][2]\n\n## Credits\n\nDie Grundlage f√ºr das Styling der Tasten habe ich aus [diesem CodePen][3] und die gifs habe ich mit [LICEcap][4] erstellt.\n\n [1]: https://www.sublimetext.com/3\n [2]: https://matuzo.at/sublime-text-3-shortcuts-os-x-teil-2/\n [3]: http://codepen.io/nrjmadan/pen/jpLmt\n [4]: http://www.cockos.com/licecap/"},{"title":"Firefox Developer Edition - Der Browser f√ºr Web-Entwicklerinnen","slug":"firefox-developer-edition-der-browser-fur-web-entwicklerinnen","teaser":"Mozilla hat anl√§sslich des [10\\. Geburtstages des Firefox Browsers][1] eine neue Version, speziell f√ºr Web-EntwicklerInnen, herausgebracht. Neben dem *normalen* Firefox, der [Beta][2] und [Nightly-Version][3], gibt es jetzt auch [Firefox Developer Edition][4].\n\nLaut ihrer Website bringt der Firefox Developer Edition <q cite=\"https://www.mozilla.org/de/firefox/developer/\">grundlegende Werkzeuge zusammen mit einigen neuen, welche Ihre M√∂glichkeiten zum plattform√ºbergreifenden Arbeiten von einem Ger√§t aus erleichtern</q>.\n\nWas genau das bedeutet und welche Werkzeuge integriert sind, habe ich mir angesehen.\n\n [1]: http://blog.mozilla.org/press-de/2014/11/10/10-jahre-firefox/\n [2]: https://www.mozilla.org/en-US/firefox/channel/#beta\n [3]: https://nightly.mozilla.org/\n [4]: https://www.mozilla.org/de/firefox/developer/","date":"2014-11-13","year":"2014","body":"## Grundlegende Features\n\nNeben den bekannten Features, wie \"Seiten-Inspektor\", \"Web-Konsole\", \"JavaScript-Debugger\" und \"Netzwerkanalyse\", gibt es unter anderem folgende neue Werkzeuge:\n\n## WebIDE\n\nIm Browser ist ein IDE (Integrierte Entwicklungsumgebung) vorhanden, das es m√∂glich macht Apps f√ºr Firefox OS zu entwickeln, zu installieren und zu debuggen.\n\nAuf Youtube gibt es ein [Demo-Video][5] dazu.\n\n## Valence\n\nValence geh√∂rt mit Sicherheit zu einem der interessantesten Features des FFDE. Denn es erm√∂glicht es, Browser- und ger√§te√ºbergreifend zu entwickeln und zu debuggen. Vorerst kann man (nur) die Chrome und iOS-Emulatoren mit dem WebIDE verbinden und die Firefox Konsole verwenden, um in den jeweiligen mobilen Browsern (Chrome und Safari) zu debuggen.\n\n<iframe width=\"648\" height=\"350\" src=\"//www.youtube.com/embed/eH0R10Ga4Hs\" frameborder=\"0\" allowfullscreen></iframe> \nMan hat auch die M√∂glichkeit sein Smartphone mit dem Browser zu verbinden. Vom System her erinnert es sehr stark an Adobe Edge Inspect, wobei Valence aber deutlich performanter und nicht so buggy ist. Neben √Ñnderungen am DOM und CSS, kann man auch Javascript √ºber die Konsole ausf√ºhren.\n\n### Android 4.4.4 Developer options und USB-Debugging aktivieren\n\nUm auf einem *echten* Android Smartphone testen zu k√∂nnen, muss man USB-Debugging aktivieren. Auf Android 4.4.4 funktioniert das folgenderma√üen:\n\n1.  Man geht in die Einstellungen (\"Settings\") und w√§hlt ganz unten \"About Phone\" aus. \n2.  Dort sucht man \"Build number\" und tapt so lange darauf (ca. 7 Mal) bis eine Nachricht kommt, dass man nun den Developer-Modus aktiviert hat.\n3.  Wenn man wieder in die Einstellungen geht, hat man jetzt √ºber \"About Phone\" einen neuen Men√ºpunkt \"Developer options\".\n4.  In den \"Developer options\" muss man dann \"USB-Debugging\" aktivieren. FFDE erkennt das Ger√§t dann automatisch.\n\nAndere Ger√§te habe ich nicht getestet aber es gibt [weitere Beschreibungen][6].\n\n<img src=\"https://matuzo.at/wp-content/uploads/2014/11/valence.jpg\" alt=\"Firefox Developer Edition - Valence\" width=\"648\" height=\"408\" class=\"alignnone size-full wp-image-352\" />\n\nValence hat in meinem kurzen Test sehr gut funktioniert und wird sicher zu einem Werkzeug, das ich verwenden werde. Auf der [MDN-Website][6] gibt es aber einen wichtigen Hinweis zu Valence:\n\n> Valence is still in its early stages, and is available only as a preview. We do not yet recommend using it for day-to-day work.\n\n## Style Editor (Stilbearbeitung)\n\nDer [Style Editor][7] macht es m√∂glich, Stylesheets direkt und live im Browser zu bearbeiten und zu speichern.\n\nIch habe ein schnelles Screencapture ‚Äì Achtung eine Premiere! ‚Äì aufgenommen, um zu zeigen, dass sich bestehende Dateien √ºberschreiben und neue erstellen lassen.\n\n<iframe width=\"648\" height=\"350\" src=\"//www.youtube.com/embed/KuilgmtM-JE\" frameborder=\"0\" allowfullscreen></iframe> \n## Responsive Design View\n\nMit dem Responsive Design View kann eine Website in verschiedenen Aufl√∂sungen, √§hnlich wie bei <http://responsivetest.net>, angezeigt werden. Es gibt Presets, wobei man aber auch eigene Aufl√∂sungen eingeben oder die Gr√∂√üe des Anzeigebereichs durch Drag & Drop ver√§ndern kann.\n\n<iframe width=\"648\" height=\"350\" src=\"//www.youtube.com/embed/iJ4C7VnIMC8\" frameborder=\"0\" allowfullscreen></iframe> \nWie man in dem Video sehen kann, gibt es zwei sehr nette Details. Man kann Screenshots erstellen und man sieht im Style Editor welche Media Queries gerade greifen.\n\n## Fazit\n\nDie letzten Jahre habe ich eigentlich nur in Chrome entwickelt. Zwischendurch habe ich versucht mit Firefox zu arbeiten, aber der Workflow war meines Erachtens nicht so fl√ºssig wie in Chrome. Davon habe ich bei meinen Tests in Firefox Developer Edition nichts bemerkt. Ich werde den Firefox DE die n√§chsten Tage als prim√§ren Entwicklungsbrowser verwenden und weiter testen. Ich bin von dem bestehenden Set an Werkzeugen √ºberzeugt und auf weitere Entwicklungen gespannt.\n\n\n [5]: https://www.youtube.com/watch?v=1R9_WdXwUsE\n [6]: https://developer.mozilla.org/en-US/docs/Tools/Valence\n [7]: https://www.youtube.com/watch?v=3kdBvvIZIqU"},{"title":"News und Tipps: Responsive Webdesign Testing, :nth-child, Guide Layout in Photoshop, Devtools und Instagram","slug":"news-und-tipps-responsive-webdesign-testing-nth-child-guide-layout-in-photoshop-devtools-und-instagram","teaser":"Ich habe auch diese Woche wieder ein paar News und Tipps zusammengetragen. Diesmal geht es um Responsive Webdesign Testing, :nth-child, Guide Layout in Photoshop, Devtools und Instagram.","date":"2014-10-28","year":"2014","body":"## nthmaster: Mastering the :nth-child\n\n[nthmaster][1] zeigt, neben den Grundlagen, ein paar sehr fortgeschrittene Einsatzm√∂glichkeiten des `:nth-child` Selektors.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/nthmaster.jpg\" alt=\"nthmaster\" width=\"648\" height=\"300\" class=\"alignnone size-full wp-image-338\" />][1]\n\nBeispielsweise kann man die Pseudoklassen so aneinanderreihen, dass nur eine gewisse Spanne an Elementen selektiert wird. In folgendem Beispiel werden alle `li` Elemente bis zum siebten `li` angesprochen.\n\n    li:nth-child(-n+7) {\n        padding-left: 1.5em;\n    }\n    \n\nWenn ein zweiter Selektor angeh√§ngt wird, kann diese Auswahl gefiltert werden. So werden alle Elemente beginnend beim dritten bis hin zum siebten selektiert.\n\n    li:nth-child(-n+7):nth-child(n+3) {\n        padding-left: 1.5em;\n    }\n    \n\nEine passende [Demo][2] gibt es auf Codepen.\n\n## RWD testen mit reponsivetest.net\n\nAuf [responsivetest.net][3] hat man die M√∂glichkeit die *responsiveness* einer Website auf die Schnelle zu testen. Anstatt den Browser gr√∂√üer und kleiner zu ziehen, kann man auf [responsivetest.net][3] ein Frame resizen. In diesem Frame wird die Website dann so dargestellt, wie sie sich bei der jeweiligen Breite verh√§lt.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/responsivetest.jpg\" alt=\"responsivetest.net\" width=\"648\" height=\"300\" class=\"alignnone size-full wp-image-339\" />][3]\n\nZus√§tzlich kann man auch fixe Gr√∂√üen einstellen oder eine der vielen Voreinstellungen (z.B.: Lenovo ThinkPad T440s, Macbook Air 13'' oder LG Nexus 4) ausw√§hlen.\n\n## Photoshop - Guide Layout\n\nMit dem neuesten Photoshop Update kann man von nun an mehrere Hilfslinien gleichzeitig erstellen. Erm√∂glicht wird das durch das \"Guide Layout\" (View -> New Guide Layout).\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/guidelayout.jpg\" alt=\"Photoshop Guide Layout\" width=\"648\" height=\"300\" class=\"alignnone size-full wp-image-336\" />][4]\n\nEs k√∂nnen vertikale und horizontale Linien erstellt, Gutter und Margin festgelegt werden, und vieles mehr. Eine detailliertere √úbersicht und Screenshots gibt es auf [setOpacity][4]\n\n## DevTools Tips\n\n[DevTools Tips][5] hat es sich zur Aufgabe gemacht, die coolsten und neuesten Features der Chrome DevTools auf ihrer Website zu sammeln und mit kurzen Videos vorzuf√ºhren.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/devtoolstips.jpg\" alt=\"Devtools Tips\" width=\"648\" height=\"300\" class=\"alignnone size-full wp-image-335\" />][5]\n\nBeispielsweise sieht man in den zwei neuesten Videos, dass man in den Chrome Devtools nach HTML Selektoren oder auch nach CSS Eigenschaften filtern kann.\n\n## Wie hoch sind alle Fotos auf Instagram zusammen?\n\nDiese Frage haben sich [photoworld.com][6] gestellt, beantwortet und sehr nett visualisiert. Das Ergebnis sieht man auf ihrer [Photos on the Web][6] - Page.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/instagram.jpg\" alt=\"Instagram\" width=\"648\" height=\"300\" class=\"alignnone size-full wp-image-337\" />][6]\n\n [1]: http://nthmaster.com/\n [2]: http://codepen.io/matuzo/pen/Eoveu\n [3]: http://responsivetest.net/#u=http://www.matuzo.at|1024|768|1\n [4]: http://www.setopacity.com/articles/2014/10/7/guide-updates-for-photoshop-october-2014\n [5]: http://devtoolstips.com/\n [6]: https://photoworld.com/photos-on-the-web/"},{"title":"Codepen.io Pro Account im Test","slug":"codepen-io-pro-account-im-test","teaser":"F√ºr Codedemos und sonstige CSS- oder Javascript-Experimente verwende [ich][1] sehr gerne [CodePen][2]. Letzte Woche habe ich ein E-Mail bekommen, mit dem Angebot [CodePen PRO][3] f√ºr 14 Tage gratis zu testen. Und genau das habe ich auch gemacht und meine Eindr√ºcke zusammengefasst.\n\n [1]: http://codepen.io/matuzo\n [2]: http://codepen.io/\n [3]: http://codepen.io/pro","date":"2014-10-20","year":"2014","body":"## Live View\n\n[Live View][4] erm√∂glicht es, dass ein Pen, das man gerade bearbeitet, im Fullscreen-Modus in mehreren Browsern und Ger√§ten angezeigt und live aktualisiert wird. Das bedeutet, dass sich die verschiedenen Browser w√§hrend man tippt automatisch refreshen. √Ñhnlich wie man es von [Livereload][5] oder [Emmet LiveStyle][6] kennt.\n\nAuf dem CodePen-Blog gibt es ein [Beispielvideo mit Live View im Einsatz][4].\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/CodePen_Liveview.gif\" alt=\"CodePen Liveview\" width=\"684\" height=\"383\" class=\"alignnone size-full wp-image-318\" />][4]\n\nIn meinem Test (siehe oben) habe ich in Chrome auf einem iMac die √Ñnderungen gemacht und den Live View-Link in folgenden Ger√§ten/Browsern ge√∂ffnet gehabt:\n\n*   iMac - OS X 10.9. Firefox\n*   iMac - Parallels Win 8 IE 11 \n*   iMac - Parallels Win 7 IE 9 (Live Update hat nicht funktioniert)\n*   iMac - iPhone Simulator iPhone 4s\n*   LG Nexus - Android 4.4 Chrome\n*   Macbook Air - OS X 10.9. Opera\n*   iPad Mini Retina - iOS 8 Safari\n\nDie Updates passieren nahezu ohne Verz√∂gerung. Sobald das Pen aktualisiert ist, sind auch die Live Versionen uptodate.\n\n## Asset Hosting\n\nAlso PRO-User kann man in ein Codepen Assets, wie Bilder, Javascript- oder CSS-Dateien, gem√ºtlich per Drag & Drop hinzuf√ºgen. Au√üerdem gibt es auch den Asset Manager, der es m√∂glich macht Assets zu verwalten und wiederzuverwenden. In [zwei kurzen Videos][7] sieht man wie beide Features funktionieren.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/CodePen_Assets.jpg\" alt=\"CodePen Assets\" width=\"648\" height=\"232\" class=\"alignnone size-full wp-image-319\" />][7]\n\n## Collab Mode\n\nIm sogenannten [Collab Mode][8] k√∂nnen 2 Leute gleichzeitig an einem Codepen arbeiten und haben zus√§tzlich auch noch die M√∂glichkeit direkt in dem Pen zu chatten.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/CodePen_Collabmode.jpg\" alt=\"CodePen Collabmode\" width=\"648\" height=\"331\" class=\"alignnone size-full wp-image-320\" />][8]\n\n## Professor Mode\n\nIm [Professor Mode][9] kann man jemandem auf dem eigenen Screen live beim arbeiten zusehen. Bis zu 10 Zuseher k√∂nnen gleichzeitig an einem Codepen im [Professor Mode][9] teilnehmen.\n\n## SMS\n\nWenn man in einem Pen auf den \"Share\"-Button klickt, kann man das Pen nicht nur auf Social Media Plattformen teilen, sondern sich auch den Link zum Codepen per SMS auf das Smartphone schicken lassen. Standardm√§√üig kann man 10 SMS im Monat verschicken und als PRO-User 100 im Monat.\n\n## Sonstiges\n\nWeitere Features sind:\n\n*   Private Codepens\n*   Eingebundene Codepens ohne Restriktionen themen\n*   Werbung wird nicht mehr angezeigt\n*   Die Wahrscheinlichkeit, dass man mit einem Pen auf der Startseite landet ist h√∂her\n*   Man bekommt ein PRO-Badge neben den Namen\n\n## Fazit\n\nDie Profeatures in [CodePen][3] sind die 75$ im Jahr auf jeden Fall wert, wenn man viel in Codepen arbeitet. [Live View][4] eignet sich sehr gut daf√ºr, wenn man schnell und unkompliziert sicher gehen will, dass etwas in mehreren Browsern funktioniert. Der [Asset Manager und das Asset Hosting][7] sind essentiell, wenn man viel mit Bildern und externen Dateien arbeitet. Und der [Collab][8] und [Professor Mode][9] sind ideal f√ºr das Arbeiten im Team.\n\nAktuell investiere ich noch nicht in einen Pro-Account, aber sobald ich mehr in CodePen arbeite, wird sich das sicher √§ndern.\n [4]: http://blog.codepen.io/documentation/pro-features/live-view/\n [5]: http://livereload.com/\n [6]: http://livestyle.emmet.io/\n [7]: http://blog.codepen.io/documentation/pro-features/asset-hosting/\n [8]: http://blog.codepen.io/documentation/pro-features/collab-mode/\n [9]: http://blog.codepen.io/documentation/pro-features/professor-mode/"},{"title":"Tipps zum Wochenstart: Github Student Developer Pack, WebApp Manifest, PerfMap und CSS wird 20","slug":"tipps-zum-wochenstart-github-student-developer-pack-webapp-manifest-perfmap-und-css-wird-20","teaser":"Diese Woche startet f√ºr euch wieder mit ein paar Neuigkeiten und Tipps, die ich in den letzten Tagen zusammengetragen habe. Die Themen sind Github Student Developer Pack, WebApp Manifest, PerfMap und CSS wird 20.","date":"2014-10-14","year":"2014","body":"## Github: Student Developer Pack\n\nF√ºr Studierende hat Github in Kooperation mit einigen Partnern ein [Student Developer Pack][1] zusammengestellt. Der Grund daf√ºr ist, dass Studierende oft keinen Zugriff auf gute Software haben, weil sie einfach zu teuer ist.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/github.jpg\" alt=\"Github Student Developer Pack\" width=\"648\" height=\"304\" class=\"alignnone size-full wp-image-310\" />][1]\n\nEnthalten ist unter anderem:\n\n*   Unreal Engine\n*   Github Micro-Account\n*   Sendgrid 15.000 E-Mails pro Monat\n*   Ein SSL Zertifikat f√ºr ein Jahr\n\nEine [vollst√§ndige Auflistung][1] findet man auf Github.\n\n## Chrome 39 Beta: JS Generatoren, Animation Playback Control und das WebApp Manifest\n\nIn der aktuellen Chrome Beta gibt es unter anderem Updates, die die neue [Web Animations API][2], [Javascript Generatoren][3] und das [Web Application Manifest][4] betreffen.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/webapp_manifest.jpg\" alt=\"Webapplication Manifest\" width=\"648\" height=\"297\" class=\"alignnone size-full wp-image-312\" />][4]\n\nLetzteres ist f√ºr mich aktuell am interessantesten. Denn m√∂chte man App-√§hnliche Funktionen f√ºr seine Website, bspw. ein Icon am Homescreen oder den Fullscreen-Modus, muss man momentan eine Reihe von meta- und link-Tags angeben. Mit dem [WebApp Manifest][4] kann man all diese Informationen nun in einer [json-Datei][5] zusammenfassen. Die Vorteile davon sind, dass die Performance der Website verbessert wird und dass man zentral in einer Datei und nach einem stringenten Muster arbeiten kann.\n\n[Details zur Chrome 39 Beta][6]\n\n## PerfMap: front-end performance heatmap\n\nMark Zeman hat ein [Bookmarklet][7] f√ºr Chrome erstellt, das eine Heatmap √ºber Websites legt und die Ladezeit von Bildern anzeigt.\n\n[<img src=\"https://matuzo.at/wp-content/uploads/2014/10/perf_heatmap.jpg\" alt=\"Perf Heatmap\" width=\"648\" height=\"426\" class=\"alignnone size-full wp-image-311\" />][7]\n\nDer erste Wert gibt an wie lange es gedauert hat, bis das Bild angezeigt worden ist. Die User konnten also das Logo auf meiner Website nach 462ms sehen. Der Wert in den Klammern gibt an, wie lange der Browser gebraucht hat, um das Bild zu laden.\n\nF√ºr alle, die so wie ich nicht wussten, wie man ein Bookmarklet installiert, gibt es eine [Beschreibung][8].\n\n## Style: CSS wird 20\n\nCSS ist letzte Woche 20 Jahre alt geworden. Oder genauer gesagt hat H√•kon Wium Lie vor 20 Jahren das [Dokument][9] verfasst, in dem er den ersten Vorschlag f√ºr eine Style Sheet Sprache macht. Operas Bruce Lawson hat zur Feier des Tages ein [Interview][10] mit ihm gef√ºhrt.\n\n [1]: https://education.github.com/pack\n [2]: http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36\n [3]: http://updates.html5rocks.com/2014/10/Generators-the-Gnarly-Bits\n [4]: http://w3c.github.io/manifest/\n [5]: https://github.com/GoogleChrome/samples/blob/gh-pages/web-application-manifest/manifest.json\n [6]: http://blog.chromium.org/2014/10/chrome-39-beta-js-generators-animation.html\n [7]: https://github.com/zeman/perfmap\n [8]: https://crossbrowsertesting.com/faq/how-do-i-install-bookmarklet-google-chrome-mac-os\n [9]: http://www.w3.org/People/howcome/p/cascade.html\n [10]: https://dev.opera.com/articles/css-twenty-years-hakon/"},{"title":"Tipps zum Wochenstart: ARIA Rollen, Newsletter Guidelines und Photoshop Assets","slug":"tipps-zum-wochenstart-aria-rollen-newsletter-guidelines-und-photoshop-assets","teaser":"Zum Wochenstart habe ich euch ein paar aktuelle Neuigkeiten und Tipps zusammengefasst. Kurz geht es um **ARIA Rollen**, **Newsletter Guidelines** und **Photoshop Assets**.","date":"2014-10-07","year":"2014","body":"## WAI-ARIA: ARIA Rollen und ihre Anwendung\n\nWann verwende ich ARIA Rollen und vor allem bei welchem Element? Diese Frage habe ich mir schon oft gestellt und richtig zufriedenstellend konnte ich, bzw. Google, sie nie beantworten. Das W3C bietet eine Liste mit allen HTML-Elementen und der passenden Info, ob eine Rolle vergeben werden kann bzw. muss und welche g√ºltig sind.\n\n<a href=\"http://w3c.github.io/aria-in-html/#recommendations-table\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2014/10/aria_rollen.jpg\" alt=\"ARIA Rollen\" width=\"648\" height=\"348\" class=\"alignnone size-full wp-image-295\" /></a>\n\n[Recommended ARIA usage by HTML language feature][1]\n\nDiese Information sieht man seit neuestem auch in der HTML 5 Spezifikation direkt bei jedem Element, bspw. beim [article Tag][2].\n\n## MailChimp: Email Design Guide\n\nDass MailChimp ein fabelhaftes Produkt ist, kann ich selber (noch) nicht bezeugen. Was ich aber wei√ü, ist, dass sie sich sehr darum bem√ºhen das Erstellen und Versenden von Newslettern einfacher und effektiver zu machen.\n\n<a href=\"http://mailchimp.com/resources/email-design-guide/\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2014/10/email_design_guide.jpg\" alt=\"Email design guide von Mailchimp\" width=\"648\" height=\"452\" class=\"alignnone size-full wp-image-297\" /></a>\n\nEin Beispiel daf√ºr ist ihr [CSS Inliner Tool][3], das sich CSS-Deklarationen aus dem style Tag holt, automatisch style-Attribute generiert und Elementen die passenden Eigenschaften vergibt. Weitere Tools findet man auf ihrer [Resources][4] Seite.\n\nIn ihrem [\"Email Design Guide\"][5] fassen sie die wichtigsten Ratschl√§ge f√ºr effektivere E-Mails zusammen. Sie geben unter anderem Tipps zur Arbeit mit Farben, Fonts, Bildern und Calls To Action.\n\n## Photoshop: Neuer Asset-Export in Photoshop\n\nMit dem, vor ca. einem Jahr ver√∂ffentlichtem, [Generator in Photoshop CC][6] kann man einzelne Layer automatisch exportieren, indem man die Layernamen anpasst. Seit dem gestrigen Photoshop CC Update ist es nun auch m√∂glich direkt aus der Ebenenpalette Layer zu exportieren.\n\n<a href=\"http://helpx.adobe.com/photoshop/using/generate-assets-layers.html\" target=\"_blank\"><img src=\"https://matuzo.at/wp-content/uploads/2014/10/assets_export.jpg\" alt=\"Extract Assets in Photoshop\" width=\"648\" height=\"434\" class=\"alignnone size-full wp-image-296\" /></a>\n\nMit der \"Extract Assets\" Option muss man auch nicht mehr den Namen des Layers anpassen, sondern hat daf√ºr ein User Interface zur Verf√ºgung. Ein Rechtsklick auf die Ebene(n) und ein Klick auf \"Extract Assets\" reicht, um die Exportoptionen aufzurufen.\n\nDie wichtigsten Besonderheiten des neuen Features sind:\n\n*   Gleichzeitiger Export von mehreren Assets\n*   Export u.a. auch als 2x, 3x, 4x\n*   Export als svg\n\nDemo-Videos und weitere Features gibt es auf der [Adobe Website][7], sowie Screenshots und Beschreibungen in [Julieanne Kosts's Blog][8].\n\n [1]: http://w3c.github.io/aria-in-html/#recommendations-table\n [2]: http://www.w3.org/html/wg/drafts/html/master/sections.html#the-article-element\n [3]: http://templates.mailchimp.com/resources/inline-css/\n [4]: http://templates.mailchimp.com/resources/\n [5]: http://mailchimp.com/resources/email-design-guide/\n [6]: http://helpx.adobe.com/photoshop/using/generate-assets-layers.html\n [7]: https://helpx.adobe.com/creative-cloud/how-to/extract-assets-browser-workflow.html\n [8]: http://blogs.adobe.com/jkost/2014/10/new-extract-assets-for-generator-in-photoshop-cc.html"},{"title":"Die ersten oder letzten n-Elemente mit :nth-child() und :nth-last-child() selektieren","slug":"die-ersten-oder-letzten-n-elemente-mit-nth-child-und-nth-last-child-selektieren","teaser":"Es kann vorkommen, dass man nicht nur das erste oder letzte Elemente speziell stylen muss, sondern beispielsweise die ersten oder letzten zwei. Mein erster Gedanke w√§re das mit Javascript oder PHP zu l√∂sen, aber es ist auch mit CSS m√∂glich.","date":"2014-10-03","year":"2014","body":"Den meisten sind die Pseudoklassen `:first-child`, `:last-child` und `:nth-child` wahrscheinlich gel√§ufig. Mit `:nth-child` kann man ein bestimmtes Element selektieren, jedes n-te beginnend beim 0ten oder jedes n-te beginnend bei einem bestimmten Element.\n\n    /* Das dritte Element */\n    li:nth-child(3) {\n        font-weight: 900;\n    }\n    \n    /* Jedes vierte Element */\n    li:nth-child(4n) {\n        color: #d25b4b;\n    }\n    \n    /* Jedes vierte beginnend beim 2. Element */\n    li:nth-child(4n + 2) {\n        color: #67b352;\n    }\n    \n\nDas Live-Beispiel zu `:nth-child` findest du [hier][1].\n\n`:nth-child` bietet noch eine weitere M√∂glichkeit Elemente anzusprechen. Mit `(-n+ZAHL)` kann man definieren, dass alle Elemente beginnend beim ersten bis zu einem bestimmten Element ausgew√§hlt werden sollen.\n\n    /* Die ersten drei Elemente orange einf√§rben */\n    li:nth-child(-n+3) {\n        color: #d25b4b;\n    }\n    \n\nMacht man genau das gleiche mit `:nth-last-child`, kann man alle Elemente zwischen einem bestimmten und dem letzten Element selektieren.\n\n    /* Die letzten zwei Elemente fett darstellen */\n    li:nth-last-child(-n+2) {\n        font-weight: 900;\n    }\n    \n\nDas Live-Beispiel zu `:nth-child(-n+3)` und `:nth-last-child(-n+2)` findest du [hier][2].\n\nEs bedarf also keiner serverseitigen oder Javascript-L√∂sung mehr, um die ersten oder letzten n-Element anzusprechen. Zu beachten ist nur, dass `:nth-child` erst ab IE 9 funktioniert.\n\n [1]: http://codepen.io/matuzo/pen/iaErm\n [2]: http://codepen.io/matuzo/pen/HmsdD"},{"title":"Gleich hohe Spalten mit CSS","slug":"gleich-hohe-spalten-mit-css","teaser":"Die Arbeit mit Prozentangaben f√ºr die `height`-Eigenschaft in CSS kann relativ frustrierend sein. Wenn man Layouts baut, aber auch schon, wenn man nur versucht mehrere, gleich hohe Spalten zu erzeugen. F√ºr das Erstellen von Spalten gibt es verschiedene Techniken, u.a. viel padding + negativer margin, divs endlos schachteln, wiederholende Hintergrundbilder, absolute Positionierung, etc. Ich habe mir zwei Techniken angesehen, die nicht zu kompliziert sind und keine Bilder und zus√§tzliches Markup verlangen.","date":"2014-09-25","year":"2014","body":"Um genau zu sein, mussten folgende Voraussetzungen erf√ºllt werden:\n\n*   Keine zwanghafte Verwendung von Hintergrundfarben oder -bildern\n*   Abstand zwischen den Spalten muss m√∂glich sein\n*   Kein √ºbertriebenes Schachteln von divs\n*   Vergeben von Rahmen um die Spalten muss m√∂glich\n\n## Gleich hohe Spalten mit Flexbox\n\nDiese Variante gef√§llt mir nat√ºrlich am besten, weil sie sauber und unkompliziert ist. Das einzige Problem an der L√∂sung mit Flexbox ist, dass es um die [Browserkompatibilit√§t][1] nicht sehr gut steht. Von den meisten modernen Browsern wird es schon ‚Äì oder zumindest teilweise ‚Äì unterst√ºtzt. In Internet Explorer leider erst ab der Version 10.\n\nGegeben ist eine Liste mit drei `li`s. Das erste und dritte `li` sollen sich an der H√∂he des zweiten anpassen.\n\n    <ul>\n       <li>Spalte 1</li>\n       <li>\n           Spalte 2\n            <p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis   egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>  \n       </li>\n       </li>\n       <li>Spalte 3</li>\n    </ul>\n    \n\nF√ºr die `ul` muss die display:flex Eigenschaft vergeben und definiert werden, dass die Spalten gleichm√§√üig aufgeteilt werden sollen.\n\n    ul {   \n        display: -webkit-box; /* Alte Safari, Chrome, iOS und Android */\n        display: -moz-box; /* Alte Firefox */\n        display: -ms-flexbox; /* IE 10 */\n        display: -webkit-flex;  /* Safari, Chrome, iOS und Android */\n        display: flex;\n    \n        /* Elemente werden gleichm√§√üig aufgeteilt. */\n        /* Das erste ganz links und das letzte ganz rechts */\n        -ms-flex-pack: justify; /* IE 10 */\n        justify-content: space-between;\n    } \n    \n\n</code></pre>\n\nDie `li`s ben√∂tigen dann nur mehr die Breite und gegebenenfalls padding und/oder border.\n\n    li {  \n        width: 32%;\n    }\n    \n\nEin live-Beispiel findest du in diesem [Codepen][2].\n\n## Gleich hohe Spalten mit display: table-cell\n\nEine weniger elegante Variante, um das Ziel unter den gegebenen Voraussetzungen zu erreichen ist die Verwendung von `display: table-cell;`. Der gro√üe Vorteil daran ist die Browserkompatibilit√§t, da diese Technik auch in IE 8 funktioniert.\n\nGibt man den `li`s `display: table-cell` werden sie automatisch gleich hoch und nebeneinander positioniert. Das ist fast so einfach wie bei der Flexbox-Variante, aber problematisch wird es mit dem Abstand zwischen den Spalten. Da sich die `li`s jetzt wie Zellen einer Tabelle verhalten, kann man ihnen nicht einfach `margin` geben.\n\n    li {  \n        display: table-cell;\n    }\n    \n\nUm Abstand zwischen den \"Pseudo-Zellen\" zu erreichen, gibt man der `ul` die Eigenschaften `border-collapse: separate;` und `border-spacing: 10px 0;`.\n\n<span class=\"tipp\"><strong>Hinweis:</strong> border-spacing nimmt maximal zwei Werte an. Der erste definiert den horizontalen und der zweite den vertikalen Abstand. Gibt man nur einen Wert an, gilt dieser f√ºr alle Seiten.</span>\n\nDurch `border-spacing` bekommen die `li`s nun links UND rechts Abstand. Mein Workaround dazu sieht so aus, dass man der `ul` links und rechts negativen Margin in der H√∂he des border-spacing vergibt.\n\n    ul {\n        list-style:none;\n        padding: 0;\n        border-collapse: separate;\n        border-spacing: 10px 0;\n        margin: 0 -10px;\n    }\n    \n\nEin live-Beispiel findest du in diesem [Codepen][3].\n\nIhr k√∂nnt also zwischen zwei Techniken w√§hlen, wobei die zweite in dem meisten F√§llen noch am ehesten in Fragen kommt. Wenn man aber in den Genuss kommt an einem Projekt zu arbeiten bei dem IE9 keine Rolle spielt, sollte man auf jeden Fall Flexbox verwenden.\n\n [1]: http://caniuse.com/#search=flex\n [2]: http://codepen.io/matuzo/pen/tJHds\n [3]: http://codepen.io/matuzo/pen/JCtbi"},{"title":"Smashing Conference Freiburg 2014 Tag 2 ‚Äì Meine Notizen","slug":"smashing-conference-freiburg-2014-tag-2-meine-notizen","teaser":"Auch der zweite Tag auf der Smashing Conf 2014 in Freiburg war sehr inspirierend. Ich habe meine Notizen wieder gesammelt und online gestellt.","date":"2014-09-19","year":"2014","body":"\n## CSS Architecture\n\nDave Shea  \n[@mezzoblue][1]  \n[CSS Zen Garden][2]\n\n**Problem**: Bloated Codebase  \n**L√∂sung**: System f√ºr CSS Architektur\n\nFertige Systeme:\n\n*   [BEM][3] \n*   [OOCS][4] \n*   [SMACSS][5] \n*   [SuitCSS][6]\n\nHaben ein eigenes System f√ºr CSS Architektur gebaut names Argon. Wichtigste Prinzipien:\n\n*   Keine IDs\n*   Nur Klassen. Nicht mal HTML-Elemente werden gestyled. bspw. `.header-2 {}` statt `h2 {}`\n*   `.component.-modifier ._descendent`\n*   Ausnahme: .js Prefix f√ºr Klassen, die nur f√ºr JS da sind. D√ºrfen nicht gestyled werden.\n*   Ausnahme: states, wie .is-hidden\n\nWelchen Syntax man verwendet ist nicht wichtig. Wichtig ist, dass man sich daran h√§lt.\n\nSlides: <http://www.mezzoblue.com/presentations/2014/smashing/smashing.pdf>\n\nArtikeltipps:\n\n*   <https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06>\n*   <http://blog.teamtreehouse.com/introduction-source-maps>\n*   <https://adactio.com/journal/7276/>\n*   <http://csste.st/>\n*   <http://cssguidelin.es/>\n*   <http://benfrain.com/modular-css-bem-oocss-naming/>\n*   <http://aerotwist.com/blog/pixels-are-expensive/>\n*   <http://vimeo.com/100501790>\n*   <http://chillco.com/blog/setting-sass-and-compass-source-maps>\n*   <http://thesassway.com/intermediate/using-source-maps-with-sass>\n\n## Be All In Without Checking Out\n\nPhil Coffman  \n[@philcoffman][7]  \n<http://philcoffman.com/>\n\nWork / Life Balance\n\nVersuchen der/die beste zu sein und stetig zu lernen, aber die Balance mit Familie und Freizeit ist wichtig.\n\n*   Inspiration: Be careful of overindulging in inspiration\n*   Employer: Choose wisely \n*   Daily routine: Establish and communicate work boundaries \n*   Know when to fight and when to concede \n*   Social Media & Community: A focused period of motivated production\n*   Side projects: Plan for the future\n\nSeine Definition von Erfolg: Nicht Anerkennung oder Geld, sondern Gute Work / Life Balance\n\nSlides: <http://www.slideshare.net/philcoffman/be-all-in-without-checking-out>\n\n## Orchestrating Content\n\nSara W.-Boettcher  \n[@sara_ann_marie][8]  \n<http://sarawb.com>\n\nContent auf mobile sollte nicht einfach nur im Design auf die Aufl√∂sung angepasst werden, sondern vielleicht auch neu √ºberdacht werden. Vielleicht macht es Sinn, den Content in einzelne Brocken aufzuteilen.\n\nContentplanung muss schon am Anfang des Projekts passieren und die Designer und Developer sollten darin involviert sein.\n\nSlides: <http://www.slideshare.net/Saraboettcher/orchestrating-content>\n\n## Typefaces for screens\n\nGerry Leonidas  \n[@gerryleonidas][9]  \n[@typefacedesign][10]  \n<http://leonidas.org/>\n\nSchrift f√ºr mobile ist gut wenn...\n\n...gleichm√§√üiger Abstand zwischen den Buchstaben vorhanden ist  \n...die [Punzen][11] offen sind  \n...Stroke Joints klar sind (siehe Slide 51)\n\nBeispielsweise:\n\n*   [Ideal Sans][12] \n*   [Proxima Nova][13] \n*   [FF Tisa][14] \n*   [Elena][15]\n\nSlides: <https://speakerdeck.com/gerryleonidas/typefaces-for-screens>\n\n## The Future of the Web?\n\nPeter Smart  \n[@petewsmart][16]\n\nSlides: <https://speakerdeck.com/petewsmart/the-future-of-the-web-and-how-to-prepare-for-it-today>\n\n> Technology must be like oxygen: ubiquitous, necessary and invisible.\n\n‚Äì Chris Lehmann\n\n*   <https://www.youtube.com/watch?v=GJKwHAvR4uI>\n*   <https://www.youtube.com/watch?v=Pz17lbjOFn8>\n\n## Long Life Pages\n\nMatt Andrews  \n[@andrewsmatt][17]  \n<https://github.com/ftlabs>\n\nStatt nativer App, haben sie eine Webapp gemacht, die Offline verf√ºgbar ist. Bringt viele Schwierigkeiten mit sich, konnte aber mit AppCache gel√∂st werden. Sehr empfehlenswert ist es nicht, zu versuchen eine native App als Webapp nachzubauen. (Offline Storage, History, ...)\n\n[Service Worker][18] wird AppCache in Zukunft abl√∂sen.\n\n## Big, Not Bad\n\nJosh Payton  \n[@jpay][19]  \n<http://hugeinc.com>\n\nCase Studies zum <http://www.ted.com/> Redesign und zum bevorstehenden eurosport.com Redesign.\n\n<http://www.hugeinc.com/case-study/eurosport>  \n<http://www.hugeinc.com/case-study/ted>\n\n> The only constant is change\n\n‚Äì Josh Payton\n\n## Adaptive Input\n\nJason Grigsby  \n[@grigs][20]\n\n*   <https://vine.co/v/MIjTE3ZDxa3>\n\n> Who are we to judge which input is better?\n\n‚Äì Jason Grigsby\n\nTouch ist nicht zwangsweise Mobile und Maus/Tastatur nicht zwangsweise Desktop. Man darf nicht davon ausgehen, dass Benutzer die eine bestimmte Eingabemethode verwenden.\n\n> After poking at this problem for a few weeks, my conclusion is: **every desktop UI should be designed for touch now**. When any desktop machine *could* have a touch interface, we have to proceed as if they all do.\n\n‚Äì Josh Clark\n\nArtikeltipp: <http://smus.com/touch-laptop-experiments/>\n\nSlides: <https://speakerdeck.com/grigs/adaptive-input-smashing-conference-freiburg>\n\n## Sonstiges\n\n*   <http://www.ted.com/speakers/philippe_petit>\n*   <http://blog.teamtreehouse.com/introduction-source-maps>\n*   <https://developer.mozilla.org/de/docs/IndexedDB>\n*   <http://www.moreawesomeweb.com/#1>\n\n [1]: http://twitter.com/mezzoblue\n [2]: http://www.csszengarden.com/\n [3]: https://bem.info/\n [4]: http://oocss.org/\n [5]: https://smacss.com/\n [6]: http://suitcss.github.io/\n [7]: https://twitter.com/philcoffman\n [8]: https://twitter.com/sara_ann_marie\n [9]: https://twitter.com/gerryleonidas\n [10]: https://twitter.com/typefacedesign\n [11]: http://de.wikipedia.org/wiki/Punze_(Typografie)\n [12]: http://www.typography.com/fonts/ideal-sans/styles/\n [13]: https://typekit.com/fonts/proxima-nova\n [14]: https://typekit.com/fonts/ff-tisa-web-pro\n [15]: https://processtypefoundry.com/fonts/elena/\n [16]: https://twitter.com/petewsmart\n [17]: https://twitter.com/andrewsmatt\n [18]: https://github.com/slightlyoff/ServiceWorker/\n [19]: https://twitter.com/jpay\n [20]: https://twitter.com/grigs"},{"title":"Smashing Conference Freiburg 2014 Tag 1 ‚Äì Meine Notizen","slug":"smashing-conference-freiburg-2014-tag-1-meine-notizen","teaser":"Die Talks am ersten Tag der Smashing Conference 2014 in Freiburg waren wieder sehr interessant und lehrreich. Ich habe f√ºr euch die wichtigsten Links, Zitate, Notizen, Slides und Buch-Tipps zusammengestellt.","date":"2014-09-16","year":"2014","body":"## Good is the enemy of great\n\n**Marcin Wichary**  \n[@mwichary][1]  \n<http://www.aresluna.org>  \n<https://medium.com/@mwichary>\n\n> The details are not the details. They make the design.\n\n‚Äì Charles Eames\n\nPassender Artikel zum Talk: <https://medium.com/designing-medium/crafting-link-underlines-on-medium-7c03a9274f9>\n\nmedium.com verwendet teilweise Canvas f√ºr Hintergrundbilder, bspw. [hier][2]. Sie haben auch die Unterstreichung von Links selber gemacht, weil ihnen die defaultm√§√üige nicht gefallen hat. (L√∂sung mit Gradients). Erkl√§rung im [Artikel][3].\n\n`-moz-osx-font-smoothing: grayscale;` ist das Firefox Pendant zu `-webkit-font-smoothing: antialiased;`\n\n<http://streetmix.net/-/158212> - Stra√üen planen\n\n> Good is the enemy of perfect. Perfect is the enemy of good.\n\n‚Äì\n\nMan muss ein Mittelding finden.\n\n<http://songexploder.net/> - \"A podcast where musicians take apart their songs, and piece by piece, tell the story of how they were made.\"\n\n<http://littlebigdetails.com/> - \"Your daily dose of design inspiration.\"\n\n[Toronto Subway Font][4]\n\n## Design Decisions Through The Lens Of a Performance Budget\n\n**Yesenia Perez-Cruz**  \n[@yeseniaa][5]  \n<http://www.yeseniaperezcruz.com/>\n\n√Ñhnlich wie ein Finanz-Budget, kann man, bevor man zu designen beginnt, ein Performance-Budget definieren. Beispielsweise k√∂nnte man festlegen, dass die Website beim ersten Mal laden nur maximal 800kb gro√ü sein darf. Basierend auf diesem 800kb-Maximum √ºberlegt man sich dann, welche und wieviele Designelemente, Bilder, Widgets, Schriften, etc. man einbinden wird.\n\nAuf das Budget kommt man, wenn man sich ansieht \"wie hoch das Budget\" bei der Konkurrenz ist.\n\nPagespeed testen:\n\n*   <http://www.webpagetest.org/> \n*   <https://developers.google.com/speed/pagespeed/>\n\n## Dynamic static site strategies\n\n**Phil Hawksworth**  \n[@philhawksworth][6]  \n<http://hawksworx.com>\n\nArtikeltipp: [Bake, Don't fry][7]\n\nNicht immer ist es notwendig ein CMS zu verwenden oder √ºberhaupt eine Datenbank im Hintergrund zu haben. Manchmal reicht eine statische Seite, wobei statische Seiten auch dynamisch sein k√∂nnen (bspw. Suche mit JS, Kommentare mit Hilfe von third party services). Vorteile von statischen Seiten sind Performance und niedrige/keine Hostingkosten.\n\nEs gibt eine Vielzahl von Generatoren, die aus ‚Äûeinfachem Text‚Äú Websites generieren. Bspw. jekyll (ruby), hyde (python), middleman (js) oder harp (js). Weitere auf <http://staticgen.com> bzw. <http://staticsitegenerator.net>.\n\n> Any application that can be written in JavaScript will eventually be written in JavaScript.\n\n‚Äì Jeff Atwood\n\nAutomatisierungstools:\n\n*   [Fabric][8] \n*   [grunt][9] \n*   [gulp][10] \n*   [brunch][11]\n\nHosting:\n\n*   [site44][12] ‚Üí Dropbox als Webroot verwenden \n*   [Githubpages][13] ‚Äì Github f√ºr Hosting verwenden, wie bspw. [Bootstrap][14] \n*   [Bitballoon][15] - Einfach das Projekt reindraggen \n*   [factor.io][16]- Developer workflow Automatisierung\n\nSlides: <https://speakerdeck.com/philhawksworth/dynamic-static-site-strategies-smashing-conference>\n\n## Responsive Games\n\n**Josh Emerson**  \n[@joshje][17]  \n<http://www.joshemerson.co.uk>\n\nNintendo hat urspr√ºnglich [Spielkarten][18] hergestellt.\n\n<http://joshje.github.io/drawpath> ‚Äì Pfade f√ºr Canvas zeichnen und Code daf√ºr generieren  \n<http://labs.ft.com/> - Dev-Team der Financial Times\n\nSlides: <https://speakerdeck.com/joshje/responsive-games>\n\n## Javascript <3 Unicode\n\n**Mathias Bynens**  \n[@mathias][19]  \n<https://mathiasbynens.be/>\n\n<http://jsperf.com/> - JS Performancetest erstellen, teilen und vergleichen  \n<https://mothereff.in/js-escapes> - Javascript Escapes  \n[Pile of Poo][20]  \n<http://sachaschmid.ch/Countable/> - Worte und Zeichen z√§hlen\n\nNotes: <https://mathiasbynens.be/notes/javascript-unicode>\n\n## Design Consistency for the Responsive Web\n\n**Patty Toland**  \n[@pattytoland][21]\n\nEs ist schwieirig mit einem 12 Spalten Grid zu arbeiten, wenn man f√ºr so viele verschiedene device-widths optimieren muss. Es ist besser ein einfaches Grid zu haben und daf√ºr Komplexe Module.\n\n> One could describe Design as a plan for arranging elements to accomplish a particular purpose.\n\n‚Äì Charles Eames\n\n> Responsive Webdesign is more than fitting stuff on screens.\n\n‚Äì Patty Toland\n\n<http://www.ericsson.com/mobility-report>  \n<http://www.slideshare.net/Ericsson/ericsson-mobilityreportaugust2014interim>\n\nArtikeltipp: <http://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html?pagewanted=all&_r=0>\n\nRWD Geschwindigkeitsprobleme:\n\n*   Bilder\n*   Third party tools (Werbung, Social Media, Tracking)\n*   Frameworks\n*   Netzwerk\n\nArtikeltipp: <http://filamentgroup.com/lab/performance-rwd.html>\n\n[filamentgroup open-source code][22]\n\nSie verwenden SVG statt Icon-Fonts\n\nBuchtipp: [Jason Santa Maria - ‚ÄûOn Web Typography‚Äú][23]\n\nBuchtipp: [Scott Jehl - ‚ÄûResponsible Responsive Design‚Äú][24]\n\n> consistent != identical\n\n‚Äì Patty Toland\n\nNur weil die Usagestatistiken sagen, dass wenige Benutzer die Website auf mobilen Ger√§ten verwenden, hei√üt das nicht, dass sie das nicht tun, weil sie nicht wollen. Es kann ganz einfach daran liegen, dass es keine mobile Website gibt und sie deswegen eher ein Desktopger√§t verwenden (m√ºssen). Lego wollte 4% mehr Umsatz haben durch die Responsive Website, 16% hatte sie dann tats√§chlich.\n\nSlides: <https://docs.google.com/presentation/d/19JmUdMvOzsrIdtJv7jYlwEptTCOQCHOE10KzjL84hXY/edit?pli=1>\n\n## Co-design Not Redesign\n\n**Kevin M. Hoffman**  \n[@kevinmhoffman][25]  \n<http://kevinmhoffman.com/>\n\n> the pen is mightier than the keyboard\n\n‚Äì Kevin M. Hoffman\n\nMeetings sollten designed werden und sehr partizipativ gestaltet sein. Vor Meetings sollte man sich und dem Team die Frage stellen, welche Entscheidungen getroffen werden in diesem Meeting. In Meetings m√ºssen die einzelnen Teilnehmer die M√∂glichkeit haben, aktiv am Prozess teilzunehmen. (Papier, Stifte, Plakte, Karten, etc. zur Verf√ºgung stellen.)\n\nBuchtipp: [The Year Without Pants - Scott Berkun][26]\n\nSlides: <http://kevinmhoffman.com/smashingconf/2014/>\n\nSein Buch: <http://rosenfeldmedia.com/books/meeting-design/>\n\n## It's about time\n\n**Christopher Murphy**  \n[@fehler][27]\n\nBuchtipp: [Status Anxiety - Alain de Botton][28]  \nBuchtipp: [Ken Robinson - Finding your Element][29]  \nBuchtipp: [Peter F. Drucker - Managing oneself][30]\n\n> Be curious. Read widely. Try new things. What people call intelligence just boils down to curiosity.\n\n‚Äì Aaron Swartz\n\nArtikeltipp: [Shit or get off the pot][31]\n\nBuchtipp: [The Dip von Seth Godin][32]\n\n## Sonstiges:\n\n*   <http://kylerush.net/>\n*   <http://remysharp.com/>\n*   <https://developers.google.com/web/fundamentals/>\n*   <http://github.com/google/webfundamentals>\n*   <http://www.websiteoptimization.com/>\n*   <http://responsivewebdesign.com/podcast/>\n*   <http://jsbin.com/>\n*   <http://pooleapp.com/>\n*   <http://www.html5rocks.com/en/>\n*   <http://blog.tojicode.com/>\n*   <http://beanstalkapp.com/>\n*   <https://slack.com/>\n*   <http://littleprinter.com/>\n*   <https://podio.com/>\n*   <https://www.box.com/>\n*   <https://github.com/npm/npm/issues/2933>\n*   <http://www.webpagetest.org/>\n*   <https://developers.google.com/speed/pagespeed/>\n\n [1]: https://twitter.com/mwichary\n [2]: https://medium.com/beautiful-stories\n [3]: https://medium.com/designing-medium/crafting-link-underlines-on-medium-7c03a9274f9\n [4]: http://www.quadrat.com/tsr.html\n [5]: https://twitter.com/yeseniaa\n [6]: https://twitter.com/philhawksworth\n [7]: http://www.aaronsw.com/weblog/000404\n [8]: http://fabricjs.com/\n [9]: http://gulpjs.com/\n [10]: http://gruntjs.com/\n [11]: http://brunch.io/\n [12]: http://www.site44.com/\n [13]: https://pages.github.com/\n [14]: http://getbootstrap.com/\n [15]: https://www.bitballoon.com/\n [16]: https://factor.io/\n [17]: https://twitter.com/joshje\n [18]: http://blog.beforemario.com/2012/09/nintendo-playing-cards-early-1960s.html\n [19]: https://twitter.com/mathias\n [20]: http://www.fileformat.info/info/unicode/char/1f4a9/index.htm\n [21]: https://twitter.com/pattytoland\n [22]: http://filamentgroup.com/code/\n [23]: http://www.abookapart.com/products/on-web-typography\n [24]: http://www.abookapart.com/products/responsible-responsive-design\n [25]: https://twitter.com/kevinmhoffman\n [26]: http://scottberkun.com/yearwithoutpants/\n [27]: https://twitter.com/fehler\n [28]: http://alaindebotton.com/status/\n [29]: http://sirkenrobinson.com/?page_id=420\n [30]: http://www.pitt.edu/~peterb/3005-001/managingoneself.pdf\n [31]: http://jonnycampbell.com/journal/shit-or-get-off-the-pot/\n [32]: http://www.amazon.com/The-Dip-Little-Teaches-Stick/dp/1591841666"},{"title":"Smashing Conference Freiburg 2014 Tag 0","slug":"smashing-conference-freiburg-2014-tag-0","teaser":"Die Smashing Conference 2014 in Freiburg hat inoffiziell gestern schon begonnen. Es gab Torte, Freibier und gratis antialkoholische Getr√§nke. Als Programm wurden auch schon die ersten 5 Talks vorgetragen. Nicht von geladenen G√§sten, sondern von Leuten aus dem \"Publikum\", da grunds√§tzlich jeder etwas vortragen konnte, der/die wollte.","date":"2014-09-15","year":"2014","body":"Man hatte also die M√∂glichkeit sich in gem√ºtlicher Runde kurze Vortr√§ge zu verschiedensten Themen anzuh√∂ren. Gesprochen wurde beispielsweise √ºber die unterschiedliche Wahrnehmung der Geschwindigkeit von Animation bei Frauen und M√§nnern oder auch √ºber Debugging in Internet Explorer.\n\nEin paar Links, die in den Talks bzw. in Diskussionen danach erw√§hnt worden sind:\n\n*   **[Animationen testen][1]**\n    \n    Ein Online-Tool zur Erstellung und zum Testen von Animation mit der cubic-bezier Eigenschaft.\n\n*   **[Status von Feature-Implementierungen in IE][2]**\n    \n    Checken ob und wann IE gewisse Features implementiert.\n\n*   **[IEDev Twitter Channel][3]**\n    \n    Twitter-Channel der IE Entwickler.\n\n*   **[Websites auf g√§ngige HTML, CSS und JavaScript-Fehler √ºberpr√ºfen][4]**\n    \n    Ein Tool der IE Devs, das Websites auf g√§ngige Fehler √ºberpr√ºft.\n\nDer erste Abend im Rahmen der Smashing Conf hat schon einen guten Einblick darauf gegeben, was in den n√§chsten Tagen passieren wird. Der erste \"offizielle\" Tag ist schon in vollem Gange. Links und Slides dazu folgen sp√§testens morgen.\n\n [1]: http://cubic-bezier.com\n [2]: http://status.modern.ie\n [3]: https://twitter.com/IEDevChat\n [4]: https://modern.ie/en-us/report"},{"title":"Dateidownloads in Links mit dem download-Attribut erzwingen","slug":"dateidownloads-in-links-mit-dem-download-attribut-erzwingen","teaser":"In HTML5 gibt es ein sehr hilfreiches Feature, das Dateidownloads erzwingt. Gibt man einem Link zu einer Datei das `download`-Attribut, wird die Datei nicht im Browser ge√∂ffnet, sondern heruntergeladen.","date":"2014-09-15","year":"2014","body":"<span class=\"tipp\"><strong>Hinweis:</strong> Das Attribut funktioniert aktuell nur in Chrome, Firefox und Opera. F√ºr die n√§chste IE Version wird es angedacht</span>\n\n[Browserkompatibilit√§t des download-Attributs auf caniuse.com][1]\n\n    <a href=\"test.html\" download>Datei herunterladen</a>\n    \n\nMit dem `download`-Attribut wurde ein sehr praktisches Feature geschaffen, das l√§stiges Experimentieren mit PHP obsolet macht.\n\n [1]: http://caniuse.com/#feat=download"},{"title":"Mehrdimensionale Arrays oder Listen von Objekten in Tabellenform ausgeben","slug":"mehrdimensionale-arrays-oder-listen-von-objekten-in-tabellenform-ausgeben","teaser":"Mit `console.log` kann man mehrdimensionale Arrays oder Listen von Objekten ausgeben und moderne Browser tun auch ihr bestes, diese √ºbersichtlich darzustellen.\n\nIn Chrome ist es ‚Äì [schon seit √ºber einem Jahr][1] ‚Äì m√∂glich, diese Daten mit `console.table()` noch √ºbersichtlicher anzuzeigen.\n\n [1]: https://plus.google.com/+AddyOsmani/posts/PmTC5wwJVEc","date":"2014-09-07","year":"2014","body":"\n\n    var users = [\n        {id: 0, name: 'User1', posts: 540},\n        {id: 1, name: 'User2', posts: 30},\n        {id: 2, name: 'User3', posts: 12},\n        {id: 3, name: 'User4', posts: 1840}\n    ]\n    \n    console.table(users);\n    \n\nDie Ausgabe erfolgt in Tabellenform, wie man im Screenshot oben sehen kann.\n\n`console.table()` nimmt einen zweiten Parameter, der festlegt welche Felder ausgegeben werden sollen. Beispielsweise k√∂nnte man wollen, dass nur `name`und `posts` geloggt werden und die `id` nicht. Die auszugebenden Felder werden in einem Array √ºbergeben.\n\n    console.table(users, ['name', 'posts'])\n    \n\n<span class=\"tipp\"><strong>Hinweis:</strong> In Firefox oder Safari funktioniert <code>console.table</code> momentan noch nicht, daf√ºr aber in <a href=\"http://getfirebug.com/\">Firebug</a></span>\n\nEine Beispieldatei kannst du dir <a href=\"http://matuzo.at/wp-content/uploads/files/consoletable.html\" download>hier</a> herunterladen"},{"title":"npm (node package manager) auf OS X 10.9. Mavericks installieren","slug":"npm-node-package-manager-auf-os-x-10-9-mavericks-installieren","teaser":"[npm][1], der Packagemanager f√ºr nodejs, l√§sst sich sehr einfach mit [brew installieren][2]. Man √∂ffnet Terminal und f√ºhrt folgenden Befehl aus:\n\n [1]: https://www.npmjs.org/\n [2]: http://matuzo.at/brew-auf-os-x-10-9-mavericks-installieren/","date":"2014-09-05","year":"2014","body":"    brew install npm\n    \n\nUm sicher zu gehen, dass npm auch erfolgreich installiert worden ist, f√ºhrt man `npm` im Terminal aus.\n\n    npm\n    \n\nIst npm installiert, wird die npm-Hilfe angezeigt.\n\n[Hier][1] erf√§hrst du wie man brew auf OS X 10.9. Mavericks installiert.\n\n [1]: http://matuzo.at/brew-auf-os-x-10-9-mavericks-installieren/"},{"title":"brew auf OS X 10.9. Mavericks installieren","slug":"brew-auf-os-x-10-9-mavericks-installieren","teaser":"[brew][1], der Package Manager f√ºr OS X, vereinfacht das Installieren von Tools, Utilities und sonstiger OS X Software ungemein.\n\n [1]: http://brew.sh/","date":"2014-09-05","year":"2014","body":"Auf der [brew-Website][1] findet man ganz am Ende unter \"Install Homebrew\" einen Befehl (ruby -e \"$(curl...). Diesen kopiert man, f√ºgt ihn in Terminal (oder iTerm 2, etc.) ein und f√ºhrt ihn mit \"Enter\" aus. Dann best√§tigt man, dass man mit der Installation fortfahren m√∂chte und gibt sein Passwort ein. (siehe Screenshot)\n\n<span class=\"tipp\"><strong>Hinweis:</strong> Um brew installieren zu k√∂nnen, muss man zus√§tzlich die <a href=\"http://matuzo.at/git-und-command-line-developer-tools-auf-os-x-10-9-mavericks-installieren/\">command line developer tools installieren</a> (Wenn man das nicht bereits gemacht hat).</span>\n\nNachdem die Installation beendet ist, f√ºhrt man folgenden Befehl aus:\n\n    brew doctor\n    \n\nIst alles gut gegangen, wird die Nachricht \"Your system is ready to brew.\" ausgegeben.\n\n [1]: http://brew.sh/"},{"title":"git (und command line developer tools) auf OS X 10.9. Mavericks installieren","slug":"git-und-command-line-developer-tools-auf-os-x-10-9-mavericks-installieren","teaser":"Es gibt verschiedene M√∂glichkeiten, um git auf OS X einzurichten. Eine der einfachsten und auch sinnvollsten ist die Installation der command line developer tools.","date":"2014-09-05","year":"2014","body":"In diesen ist git enthalten ‚Äì neben vielen verschiedenen Tools, Utilities und Compilern. F√ºr die Installation √∂ffnet man Terminal (oder iTerm 2, etc.) und gibt folgendes ein:\n\n    xcode-select --install\n    \n\nNachdem man mit \"Enter\" best√§tigt hat, kann man die Tools schon installieren. Um sicher zu gehen, dass git auch erfolgreich eingerichtet worden ist, gibt man einfach `git` in Terminal ein.\n\n    git\n    \n\nIst git installiert, werden unter anderem verschiedene git Kommandos angezeigt. Ist es nicht installiert, sollte das gleiche Pop-Up erscheinen wie bei der Eingabe von `xcode-select --install`."}]